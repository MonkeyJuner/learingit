// Generated by gencpp from file pnc_msgs/PlanningCmd.msg
// DO NOT EDIT!


#ifndef PNC_MSGS_MESSAGE_PLANNINGCMD_H
#define PNC_MSGS_MESSAGE_PLANNINGCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <pnc_msgs/Trajectory.h>
#include <pnc_msgs/Trajectory.h>

namespace pnc_msgs
{
template <class ContainerAllocator>
struct PlanningCmd_
{
  typedef PlanningCmd_<ContainerAllocator> Type;

  PlanningCmd_()
    : header()
    , mode(0)
    , utm_traj()
    , veh_traj()
    , rt_speed(0.0)
    , final_speed(0.0)
    , final_distance(0.0)
    , lateral_state(0)
    , speed_state(0)
    , stop_at_dest(false)
    , turn_direction(0)
    , task_id(0)  {
    }
  PlanningCmd_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , mode(0)
    , utm_traj(_alloc)
    , veh_traj(_alloc)
    , rt_speed(0.0)
    , final_speed(0.0)
    , final_distance(0.0)
    , lateral_state(0)
    , speed_state(0)
    , stop_at_dest(false)
    , turn_direction(0)
    , task_id(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef  ::pnc_msgs::Trajectory_<ContainerAllocator>  _utm_traj_type;
  _utm_traj_type utm_traj;

   typedef  ::pnc_msgs::Trajectory_<ContainerAllocator>  _veh_traj_type;
  _veh_traj_type veh_traj;

   typedef double _rt_speed_type;
  _rt_speed_type rt_speed;

   typedef double _final_speed_type;
  _final_speed_type final_speed;

   typedef double _final_distance_type;
  _final_distance_type final_distance;

   typedef uint8_t _lateral_state_type;
  _lateral_state_type lateral_state;

   typedef uint8_t _speed_state_type;
  _speed_state_type speed_state;

   typedef uint8_t _stop_at_dest_type;
  _stop_at_dest_type stop_at_dest;

   typedef uint8_t _turn_direction_type;
  _turn_direction_type turn_direction;

   typedef int32_t _task_id_type;
  _task_id_type task_id;



  enum {
    MODE_AUTO = 0u,
    MODE_LATERAL_CLOSED_LOOP = 1u,
    MODE_SPEED_CLOSED_LOOP = 2u,
    MODE_OPEN_LOOP = 3u,
    LATERAL_KEEP_LANE = 0u,
    LATERAL_CHG_TO_LEFT = 1u,
    LATERAL_CHG_TO_RIGHT = 2u,
    SPEED_PARK = 0u,
    SPEED_FOLLOW = 1u,
    SPEED_ESTOP = 2u,
    SPEED_BRAKE = 3u,
    DIR_STRAIGHT = 0u,
    DIR_TURN_LEFT = 1u,
    DIR_TURN_RIGHT = 2u,
  };


  typedef boost::shared_ptr< ::pnc_msgs::PlanningCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pnc_msgs::PlanningCmd_<ContainerAllocator> const> ConstPtr;

}; // struct PlanningCmd_

typedef ::pnc_msgs::PlanningCmd_<std::allocator<void> > PlanningCmd;

typedef boost::shared_ptr< ::pnc_msgs::PlanningCmd > PlanningCmdPtr;
typedef boost::shared_ptr< ::pnc_msgs::PlanningCmd const> PlanningCmdConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pnc_msgs::PlanningCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pnc_msgs::PlanningCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pnc_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'pncc_msgs': ['/home/xjm/catkin_ws/src/interfaces/ros/pncc/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'pnc_msgs': ['/home/xjm/catkin_ws/src/messages/ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pnc_msgs::PlanningCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pnc_msgs::PlanningCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pnc_msgs::PlanningCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pnc_msgs::PlanningCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pnc_msgs::PlanningCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pnc_msgs::PlanningCmd_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pnc_msgs::PlanningCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c524a0bbbcc9e84caf1b33d77fd89eaf";
  }

  static const char* value(const ::pnc_msgs::PlanningCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc524a0bbbcc9e84cULL;
  static const uint64_t static_value2 = 0xaf1b33d77fd89eafULL;
};

template<class ContainerAllocator>
struct DataType< ::pnc_msgs::PlanningCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pnc_msgs/PlanningCmd";
  }

  static const char* value(const ::pnc_msgs::PlanningCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pnc_msgs::PlanningCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# control mode\n\
uint8 MODE_AUTO                 = 0\n\
uint8 MODE_LATERAL_CLOSED_LOOP  = 1\n\
uint8 MODE_SPEED_CLOSED_LOOP    = 2\n\
uint8 MODE_OPEN_LOOP            = 3\n\
\n\
# lateral state\n\
uint8 LATERAL_KEEP_LANE         = 0\n\
uint8 LATERAL_CHG_TO_LEFT       = 1\n\
uint8 LATERAL_CHG_TO_RIGHT      = 2\n\
\n\
# longtude state\n\
uint8 SPEED_PARK   = 0\n\
uint8 SPEED_FOLLOW = 1\n\
uint8 SPEED_ESTOP  = 2\n\
uint8 SPEED_BRAKE  = 3\n\
\n\
# turn light direction\n\
uint8 DIR_STRAIGHT              = 0\n\
uint8 DIR_TURN_LEFT             = 1\n\
uint8 DIR_TURN_RIGHT            = 2\n\
\n\
Header header\n\
\n\
# control mode\n\
uint8               mode\n\
\n\
# trajectory in utm coord\n\
pnc_msgs/Trajectory utm_traj\n\
\n\
# trajectory in vehicle coord\n\
pnc_msgs/Trajectory veh_traj\n\
\n\
# real time speed in [km/h]\n\
float64             rt_speed\n\
\n\
# target follow speed in [km/h]\n\
float64             final_speed\n\
\n\
# target follow distance in [m]\n\
float64             final_distance\n\
\n\
# lateral state\n\
uint8               lateral_state\n\
\n\
# speed state\n\
uint8               speed_state\n\
\n\
# if vehicle stop at dest\n\
bool                stop_at_dest\n\
\n\
# turn light direction when change lane or turn\n\
uint8               turn_direction\n\
\n\
int32 task_id\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: pnc_msgs/Trajectory\n\
# total traj length in [m]\n\
float64 total_traj_length\n\
\n\
# total traj time in [s]\n\
float64 total_traj_time\n\
\n\
pnc_msgs/TrajectoryPoint[] trajectory_pts\n\
================================================================================\n\
MSG: pnc_msgs/TrajectoryPoint\n\
# path data\n\
PathPoint path_point\n\
\n\
# linear velocity in [m/s]\n\
float64 v\n\
# linear acceleration in [m/s^2]\n\
float64 a\n\
# relative time from beginning of the trajectory in [s]\n\
float64 relative_time\n\
================================================================================\n\
MSG: pnc_msgs/PathPoint\n\
# coordinates in [m]\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
# accumulated distance from beginning of the path in [m]\n\
float64 s\n\
\n\
# direction on the x-y plane in [0 ~ 2Ï€]\n\
float64 theta\n\
\n\
# curvature on the x-y planning\n\
float64 kappa\n\
\n\
# derivative of kappa w.r.t s.\n\
float64 dkappa\n\
\n\
# derivative of derivative of kappa w.r.t s.\n\
float64 ddkappa\n\
";
  }

  static const char* value(const ::pnc_msgs::PlanningCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pnc_msgs::PlanningCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.mode);
      stream.next(m.utm_traj);
      stream.next(m.veh_traj);
      stream.next(m.rt_speed);
      stream.next(m.final_speed);
      stream.next(m.final_distance);
      stream.next(m.lateral_state);
      stream.next(m.speed_state);
      stream.next(m.stop_at_dest);
      stream.next(m.turn_direction);
      stream.next(m.task_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlanningCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pnc_msgs::PlanningCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pnc_msgs::PlanningCmd_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "utm_traj: ";
    s << std::endl;
    Printer< ::pnc_msgs::Trajectory_<ContainerAllocator> >::stream(s, indent + "  ", v.utm_traj);
    s << indent << "veh_traj: ";
    s << std::endl;
    Printer< ::pnc_msgs::Trajectory_<ContainerAllocator> >::stream(s, indent + "  ", v.veh_traj);
    s << indent << "rt_speed: ";
    Printer<double>::stream(s, indent + "  ", v.rt_speed);
    s << indent << "final_speed: ";
    Printer<double>::stream(s, indent + "  ", v.final_speed);
    s << indent << "final_distance: ";
    Printer<double>::stream(s, indent + "  ", v.final_distance);
    s << indent << "lateral_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lateral_state);
    s << indent << "speed_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speed_state);
    s << indent << "stop_at_dest: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop_at_dest);
    s << indent << "turn_direction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.turn_direction);
    s << indent << "task_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.task_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PNC_MSGS_MESSAGE_PLANNINGCMD_H
