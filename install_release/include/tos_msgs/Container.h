// Generated by gencpp from file tos_msgs/Container.msg
// DO NOT EDIT!


#ifndef TOS_MSGS_MESSAGE_CONTAINER_H
#define TOS_MSGS_MESSAGE_CONTAINER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tos_msgs
{
template <class ContainerAllocator>
struct Container_
{
  typedef Container_<ContainerAllocator> Type;

  Container_()
    : container_id()
    , container_size(0)
    , container_weight(0)
    , container_pos(0)  {
    }
  Container_(const ContainerAllocator& _alloc)
    : container_id(_alloc)
    , container_size(0)
    , container_weight(0)
    , container_pos(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _container_id_type;
  _container_id_type container_id;

   typedef uint8_t _container_size_type;
  _container_size_type container_size;

   typedef int32_t _container_weight_type;
  _container_weight_type container_weight;

   typedef uint8_t _container_pos_type;
  _container_pos_type container_pos;





  typedef boost::shared_ptr< ::tos_msgs::Container_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tos_msgs::Container_<ContainerAllocator> const> ConstPtr;

}; // struct Container_

typedef ::tos_msgs::Container_<std::allocator<void> > Container;

typedef boost::shared_ptr< ::tos_msgs::Container > ContainerPtr;
typedef boost::shared_ptr< ::tos_msgs::Container const> ContainerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tos_msgs::Container_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tos_msgs::Container_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tos_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'tos_msgs': ['/home/wuhaisheng/Workspace/catkin_integration/src/app/msgs/tos_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tos_msgs::Container_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tos_msgs::Container_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tos_msgs::Container_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tos_msgs::Container_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tos_msgs::Container_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tos_msgs::Container_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tos_msgs::Container_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd22eca006ec43bbf4e6912d6c115e28";
  }

  static const char* value(const ::tos_msgs::Container_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd22eca006ec43bbULL;
  static const uint64_t static_value2 = 0xf4e6912d6c115e28ULL;
};

template<class ContainerAllocator>
struct DataType< ::tos_msgs::Container_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tos_msgs/Container";
  }

  static const char* value(const ::tos_msgs::Container_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tos_msgs::Container_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string container_id\n\
uint8 container_size\n\
int32 container_weight\n\
uint8 container_pos \n\
";
  }

  static const char* value(const ::tos_msgs::Container_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tos_msgs::Container_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.container_id);
      stream.next(m.container_size);
      stream.next(m.container_weight);
      stream.next(m.container_pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Container_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tos_msgs::Container_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tos_msgs::Container_<ContainerAllocator>& v)
  {
    s << indent << "container_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.container_id);
    s << indent << "container_size: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.container_size);
    s << indent << "container_weight: ";
    Printer<int32_t>::stream(s, indent + "  ", v.container_weight);
    s << indent << "container_pos: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.container_pos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOS_MSGS_MESSAGE_CONTAINER_H
