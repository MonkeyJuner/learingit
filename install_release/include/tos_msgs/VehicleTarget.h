// Generated by gencpp from file tos_msgs/VehicleTarget.msg
// DO NOT EDIT!


#ifndef TOS_MSGS_MESSAGE_VEHICLETARGET_H
#define TOS_MSGS_MESSAGE_VEHICLETARGET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>

namespace tos_msgs
{
template <class ContainerAllocator>
struct VehicleTarget_
{
  typedef VehicleTarget_<ContainerAllocator> Type;

  VehicleTarget_()
    : header()
    , task_id(0)
    , send_packet_id(0)
    , chid()
    , stop_point()
    , stop_tag_id(0)
    , stop_tag_type(0)
    , brake_distance(0.0)
    , hadmap_stop_shift(0.0)
    , tag_stop_shift(0.0)
    , lane_id()
    , brake_tag_id_forward(0)
    , brake_distance_forward(0.0)
    , brake_tag_id_backward(0)
    , brake_distance_backward(0.0)
    , vessel_orientation(0)  {
    }
  VehicleTarget_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , task_id(0)
    , send_packet_id(0)
    , chid(_alloc)
    , stop_point(_alloc)
    , stop_tag_id(0)
    , stop_tag_type(0)
    , brake_distance(0.0)
    , hadmap_stop_shift(0.0)
    , tag_stop_shift(0.0)
    , lane_id(_alloc)
    , brake_tag_id_forward(0)
    , brake_distance_forward(0.0)
    , brake_tag_id_backward(0)
    , brake_distance_backward(0.0)
    , vessel_orientation(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _task_id_type;
  _task_id_type task_id;

   typedef int32_t _send_packet_id_type;
  _send_packet_id_type send_packet_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _chid_type;
  _chid_type chid;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _stop_point_type;
  _stop_point_type stop_point;

   typedef int32_t _stop_tag_id_type;
  _stop_tag_id_type stop_tag_id;

   typedef uint8_t _stop_tag_type_type;
  _stop_tag_type_type stop_tag_type;

   typedef double _brake_distance_type;
  _brake_distance_type brake_distance;

   typedef double _hadmap_stop_shift_type;
  _hadmap_stop_shift_type hadmap_stop_shift;

   typedef double _tag_stop_shift_type;
  _tag_stop_shift_type tag_stop_shift;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _lane_id_type;
  _lane_id_type lane_id;

   typedef uint8_t _brake_tag_id_forward_type;
  _brake_tag_id_forward_type brake_tag_id_forward;

   typedef double _brake_distance_forward_type;
  _brake_distance_forward_type brake_distance_forward;

   typedef uint8_t _brake_tag_id_backward_type;
  _brake_tag_id_backward_type brake_tag_id_backward;

   typedef double _brake_distance_backward_type;
  _brake_distance_backward_type brake_distance_backward;

   typedef uint8_t _vessel_orientation_type;
  _vessel_orientation_type vessel_orientation;



  enum {
    TAG_ON_ANQIAO = 1u,
    TAG_ON_CHANGQIAO = 2u,
    VESSEL_ORIENTATION_FORWARD = 0u,
    VESSEL_ORIENTATION_BACKWARD = 1u,
  };


  typedef boost::shared_ptr< ::tos_msgs::VehicleTarget_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tos_msgs::VehicleTarget_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleTarget_

typedef ::tos_msgs::VehicleTarget_<std::allocator<void> > VehicleTarget;

typedef boost::shared_ptr< ::tos_msgs::VehicleTarget > VehicleTargetPtr;
typedef boost::shared_ptr< ::tos_msgs::VehicleTarget const> VehicleTargetConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tos_msgs::VehicleTarget_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tos_msgs::VehicleTarget_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tos_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'tos_msgs': ['/home/wuhaisheng/Workspace/catkin_integration/src/app/msgs/tos_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tos_msgs::VehicleTarget_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tos_msgs::VehicleTarget_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tos_msgs::VehicleTarget_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tos_msgs::VehicleTarget_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tos_msgs::VehicleTarget_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tos_msgs::VehicleTarget_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tos_msgs::VehicleTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "71267172c38fac2a6326d1c7bdcba91e";
  }

  static const char* value(const ::tos_msgs::VehicleTarget_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x71267172c38fac2aULL;
  static const uint64_t static_value2 = 0x6326d1c7bdcba91eULL;
};

template<class ContainerAllocator>
struct DataType< ::tos_msgs::VehicleTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tos_msgs/VehicleTarget";
  }

  static const char* value(const ::tos_msgs::VehicleTarget_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tos_msgs::VehicleTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 TAG_ON_ANQIAO = 1\n\
uint8 TAG_ON_CHANGQIAO = 2\n\
\n\
uint8 VESSEL_ORIENTATION_FORWARD = 0\n\
uint8 VESSEL_ORIENTATION_BACKWARD = 1\n\
\n\
Header header\n\
uint32 task_id\n\
int32 send_packet_id\n\
string chid\n\
geometry_msgs/Point stop_point\n\
int32 stop_tag_id\n\
uint8 stop_tag_type\n\
float64 brake_distance\n\
float64 hadmap_stop_shift\n\
float64 tag_stop_shift\n\
string lane_id\n\
\n\
uint8 brake_tag_id_forward\n\
float64 brake_distance_forward\n\
\n\
uint8 brake_tag_id_backward\n\
float64 brake_distance_backward\n\
\n\
uint8 vessel_orientation\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::tos_msgs::VehicleTarget_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tos_msgs::VehicleTarget_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.task_id);
      stream.next(m.send_packet_id);
      stream.next(m.chid);
      stream.next(m.stop_point);
      stream.next(m.stop_tag_id);
      stream.next(m.stop_tag_type);
      stream.next(m.brake_distance);
      stream.next(m.hadmap_stop_shift);
      stream.next(m.tag_stop_shift);
      stream.next(m.lane_id);
      stream.next(m.brake_tag_id_forward);
      stream.next(m.brake_distance_forward);
      stream.next(m.brake_tag_id_backward);
      stream.next(m.brake_distance_backward);
      stream.next(m.vessel_orientation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleTarget_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tos_msgs::VehicleTarget_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tos_msgs::VehicleTarget_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "task_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.task_id);
    s << indent << "send_packet_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.send_packet_id);
    s << indent << "chid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.chid);
    s << indent << "stop_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.stop_point);
    s << indent << "stop_tag_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.stop_tag_id);
    s << indent << "stop_tag_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop_tag_type);
    s << indent << "brake_distance: ";
    Printer<double>::stream(s, indent + "  ", v.brake_distance);
    s << indent << "hadmap_stop_shift: ";
    Printer<double>::stream(s, indent + "  ", v.hadmap_stop_shift);
    s << indent << "tag_stop_shift: ";
    Printer<double>::stream(s, indent + "  ", v.tag_stop_shift);
    s << indent << "lane_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.lane_id);
    s << indent << "brake_tag_id_forward: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake_tag_id_forward);
    s << indent << "brake_distance_forward: ";
    Printer<double>::stream(s, indent + "  ", v.brake_distance_forward);
    s << indent << "brake_tag_id_backward: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake_tag_id_backward);
    s << indent << "brake_distance_backward: ";
    Printer<double>::stream(s, indent + "  ", v.brake_distance_backward);
    s << indent << "vessel_orientation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vessel_orientation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOS_MSGS_MESSAGE_VEHICLETARGET_H
