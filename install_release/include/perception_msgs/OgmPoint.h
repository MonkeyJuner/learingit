// Generated by gencpp from file perception_msgs/OgmPoint.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_OGMPOINT_H
#define PERCEPTION_MSGS_MESSAGE_OGMPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace perception_msgs
{
template <class ContainerAllocator>
struct OgmPoint_
{
  typedef OgmPoint_<ContainerAllocator> Type;

  OgmPoint_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , p(0.0)
    , type(0)  {
    }
  OgmPoint_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , p(0.0)
    , type(0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _p_type;
  _p_type p;

   typedef uint8_t _type_type;
  _type_type type;



  enum {
    UNCLASSIFIED = 0u,
    UNKNOWN_SMALL = 1u,
    UNKNOWN_BIG = 2u,
    PEDESTRIAN = 3u,
    BIKE = 4u,
    CAR = 5u,
    TRUCK = 6u,
  };


  typedef boost::shared_ptr< ::perception_msgs::OgmPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::OgmPoint_<ContainerAllocator> const> ConstPtr;

}; // struct OgmPoint_

typedef ::perception_msgs::OgmPoint_<std::allocator<void> > OgmPoint;

typedef boost::shared_ptr< ::perception_msgs::OgmPoint > OgmPointPtr;
typedef boost::shared_ptr< ::perception_msgs::OgmPoint const> OgmPointConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::OgmPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::OgmPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'perception_msgs': ['/home/wuhaisheng/Workspace/catkin_integration/src/interfaces/ads_internal/ros/perception/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::OgmPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::OgmPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::OgmPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::OgmPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::OgmPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::OgmPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::OgmPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2869d09395abac7946a917ec677fb46";
  }

  static const char* value(const ::perception_msgs::OgmPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe2869d09395abac7ULL;
  static const uint64_t static_value2 = 0x946a917ec677fb46ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::OgmPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/OgmPoint";
  }

  static const char* value(const ::perception_msgs::OgmPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::OgmPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 UNCLASSIFIED = 0\n\
uint8 UNKNOWN_SMALL = 1\n\
uint8 UNKNOWN_BIG = 2\n\
uint8 PEDESTRIAN = 3\n\
uint8 BIKE = 4\n\
uint8 CAR = 5\n\
uint8 TRUCK = 6\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 p\n\
uint8 type\n\
\n\
";
  }

  static const char* value(const ::perception_msgs::OgmPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::OgmPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.p);
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OgmPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::OgmPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::OgmPoint_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "p: ";
    Printer<double>::stream(s, indent + "  ", v.p);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_OGMPOINT_H
