// Generated by gencpp from file perception_msgs/Object.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_OBJECT_H
#define PERCEPTION_MSGS_MESSAGE_OBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct Object_
{
  typedef Object_<ContainerAllocator> Type;

  Object_()
    : id(0)
    , age(0)
    , prediction_age(0)
    , reference_point()
    , reference_points()
    , bounding_box_center()
    , bounding_box_size()
    , object_box_center()
    , object_box_size()
    , object_box_orientation(0.0)
    , object_box_orientation_absolute(0.0)
    , absolute_velocity()
    , absolute_velocity_sigma()
    , relative_velocity()
    , absolute_acceleration()
    , relative_acceleration()
    , absolute_yaw_rate()
    , relative_yaw_rate()
    , classification(0)
    , classification_age(0)
    , classification_certainty(0)
    , contour_points()
    , contour_points_absolute()  {
    }
  Object_(const ContainerAllocator& _alloc)
    : id(0)
    , age(0)
    , prediction_age(0)
    , reference_point(_alloc)
    , reference_points(_alloc)
    , bounding_box_center(_alloc)
    , bounding_box_size(_alloc)
    , object_box_center(_alloc)
    , object_box_size(_alloc)
    , object_box_orientation(0.0)
    , object_box_orientation_absolute(0.0)
    , absolute_velocity(_alloc)
    , absolute_velocity_sigma(_alloc)
    , relative_velocity(_alloc)
    , absolute_acceleration(_alloc)
    , relative_acceleration(_alloc)
    , absolute_yaw_rate(_alloc)
    , relative_yaw_rate(_alloc)
    , classification(0)
    , classification_age(0)
    , classification_certainty(0)
    , contour_points(_alloc)
    , contour_points_absolute(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _age_type;
  _age_type age;

   typedef int32_t _prediction_age_type;
  _prediction_age_type prediction_age;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _reference_point_type;
  _reference_point_type reference_point;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _reference_points_type;
  _reference_points_type reference_points;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _bounding_box_center_type;
  _bounding_box_center_type bounding_box_center;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _bounding_box_size_type;
  _bounding_box_size_type bounding_box_size;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _object_box_center_type;
  _object_box_center_type object_box_center;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _object_box_size_type;
  _object_box_size_type object_box_size;

   typedef double _object_box_orientation_type;
  _object_box_orientation_type object_box_orientation;

   typedef double _object_box_orientation_absolute_type;
  _object_box_orientation_absolute_type object_box_orientation_absolute;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _absolute_velocity_type;
  _absolute_velocity_type absolute_velocity;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _absolute_velocity_sigma_type;
  _absolute_velocity_sigma_type absolute_velocity_sigma;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _relative_velocity_type;
  _relative_velocity_type relative_velocity;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _absolute_acceleration_type;
  _absolute_acceleration_type absolute_acceleration;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _relative_acceleration_type;
  _relative_acceleration_type relative_acceleration;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _absolute_yaw_rate_type;
  _absolute_yaw_rate_type absolute_yaw_rate;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _relative_yaw_rate_type;
  _relative_yaw_rate_type relative_yaw_rate;

   typedef int32_t _classification_type;
  _classification_type classification;

   typedef int32_t _classification_age_type;
  _classification_age_type classification_age;

   typedef int32_t _classification_certainty_type;
  _classification_certainty_type classification_certainty;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _contour_points_type;
  _contour_points_type contour_points;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _contour_points_absolute_type;
  _contour_points_absolute_type contour_points_absolute;





  typedef boost::shared_ptr< ::perception_msgs::Object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::Object_<ContainerAllocator> const> ConstPtr;

}; // struct Object_

typedef ::perception_msgs::Object_<std::allocator<void> > Object;

typedef boost::shared_ptr< ::perception_msgs::Object > ObjectPtr;
typedef boost::shared_ptr< ::perception_msgs::Object const> ObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::Object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::Object_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'perception_msgs': ['/home/wuhaisheng/Workspace/catkin_integration/src/interfaces/ads_internal/ros/perception/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::Object_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::Object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::Object_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "683135dacc3cb368d96ceddae6f34be6";
  }

  static const char* value(const ::perception_msgs::Object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x683135dacc3cb368ULL;
  static const uint64_t static_value2 = 0xd96ceddae6f34be6ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/Object";
  }

  static const char* value(const ::perception_msgs::Object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n\
int32 age\n\
int32 prediction_age\n\
\n\
geometry_msgs/Point reference_point\n\
geometry_msgs/Point[] reference_points\n\
geometry_msgs/Point bounding_box_center\n\
geometry_msgs/Point bounding_box_size\n\
geometry_msgs/Point object_box_center\n\
geometry_msgs/Point object_box_size\n\
\n\
float64 object_box_orientation\n\
float64 object_box_orientation_absolute\n\
\n\
geometry_msgs/Point absolute_velocity\n\
geometry_msgs/Point absolute_velocity_sigma\n\
geometry_msgs/Point relative_velocity\n\
\n\
geometry_msgs/Point absolute_acceleration\n\
geometry_msgs/Point relative_acceleration\n\
\n\
geometry_msgs/Point absolute_yaw_rate\n\
geometry_msgs/Point relative_yaw_rate\n\
\n\
int32 classification\n\
int32 classification_age\n\
int32 classification_certainty\n\
\n\
geometry_msgs/Point[] contour_points\n\
geometry_msgs/Point[] contour_points_absolute\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::perception_msgs::Object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::Object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.age);
      stream.next(m.prediction_age);
      stream.next(m.reference_point);
      stream.next(m.reference_points);
      stream.next(m.bounding_box_center);
      stream.next(m.bounding_box_size);
      stream.next(m.object_box_center);
      stream.next(m.object_box_size);
      stream.next(m.object_box_orientation);
      stream.next(m.object_box_orientation_absolute);
      stream.next(m.absolute_velocity);
      stream.next(m.absolute_velocity_sigma);
      stream.next(m.relative_velocity);
      stream.next(m.absolute_acceleration);
      stream.next(m.relative_acceleration);
      stream.next(m.absolute_yaw_rate);
      stream.next(m.relative_yaw_rate);
      stream.next(m.classification);
      stream.next(m.classification_age);
      stream.next(m.classification_certainty);
      stream.next(m.contour_points);
      stream.next(m.contour_points_absolute);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::Object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::Object_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "age: ";
    Printer<int32_t>::stream(s, indent + "  ", v.age);
    s << indent << "prediction_age: ";
    Printer<int32_t>::stream(s, indent + "  ", v.prediction_age);
    s << indent << "reference_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.reference_point);
    s << indent << "reference_points[]" << std::endl;
    for (size_t i = 0; i < v.reference_points.size(); ++i)
    {
      s << indent << "  reference_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.reference_points[i]);
    }
    s << indent << "bounding_box_center: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.bounding_box_center);
    s << indent << "bounding_box_size: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.bounding_box_size);
    s << indent << "object_box_center: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.object_box_center);
    s << indent << "object_box_size: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.object_box_size);
    s << indent << "object_box_orientation: ";
    Printer<double>::stream(s, indent + "  ", v.object_box_orientation);
    s << indent << "object_box_orientation_absolute: ";
    Printer<double>::stream(s, indent + "  ", v.object_box_orientation_absolute);
    s << indent << "absolute_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.absolute_velocity);
    s << indent << "absolute_velocity_sigma: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.absolute_velocity_sigma);
    s << indent << "relative_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.relative_velocity);
    s << indent << "absolute_acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.absolute_acceleration);
    s << indent << "relative_acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.relative_acceleration);
    s << indent << "absolute_yaw_rate: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.absolute_yaw_rate);
    s << indent << "relative_yaw_rate: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.relative_yaw_rate);
    s << indent << "classification: ";
    Printer<int32_t>::stream(s, indent + "  ", v.classification);
    s << indent << "classification_age: ";
    Printer<int32_t>::stream(s, indent + "  ", v.classification_age);
    s << indent << "classification_certainty: ";
    Printer<int32_t>::stream(s, indent + "  ", v.classification_certainty);
    s << indent << "contour_points[]" << std::endl;
    for (size_t i = 0; i < v.contour_points.size(); ++i)
    {
      s << indent << "  contour_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.contour_points[i]);
    }
    s << indent << "contour_points_absolute[]" << std::endl;
    for (size_t i = 0; i < v.contour_points_absolute.size(); ++i)
    {
      s << indent << "  contour_points_absolute[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.contour_points_absolute[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_OBJECT_H
