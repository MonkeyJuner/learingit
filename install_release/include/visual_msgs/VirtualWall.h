// Generated by gencpp from file visual_msgs/VirtualWall.msg
// DO NOT EDIT!


#ifndef VISUAL_MSGS_MESSAGE_VIRTUALWALL_H
#define VISUAL_MSGS_MESSAGE_VIRTUALWALL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace visual_msgs
{
template <class ContainerAllocator>
struct VirtualWall_
{
  typedef VirtualWall_<ContainerAllocator> Type;

  VirtualWall_()
    : type(0)
    , id(0)
    , distance(0.0)
    , speed(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , heading(0.0)  {
    }
  VirtualWall_(const ContainerAllocator& _alloc)
    : type(0)
    , id(0)
    , distance(0.0)
    , speed(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , heading(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef uint32_t _id_type;
  _id_type id;

   typedef double _distance_type;
  _distance_type distance;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _heading_type;
  _heading_type heading;



  enum {
    UNCLASSIFIED = 0u,
    STOP_SIGN_ABSOLUTE = 1u,
    STOP_SIGN_RELATIVE = 2u,
    OBJECT = 3u,
    OBJECT_VIRTUAL = 4u,
    OBJECT_CLOSE = 5u,
    OGM = 6u,
    HMAP_SPEED_LIMIT = 7u,
    CURV_SPEED_LIMIT = 8u,
    LONGITUDE_CMD = 9u,
  };


  typedef boost::shared_ptr< ::visual_msgs::VirtualWall_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::visual_msgs::VirtualWall_<ContainerAllocator> const> ConstPtr;

}; // struct VirtualWall_

typedef ::visual_msgs::VirtualWall_<std::allocator<void> > VirtualWall;

typedef boost::shared_ptr< ::visual_msgs::VirtualWall > VirtualWallPtr;
typedef boost::shared_ptr< ::visual_msgs::VirtualWall const> VirtualWallConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::visual_msgs::VirtualWall_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::visual_msgs::VirtualWall_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace visual_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'visual_msgs': ['/home/wuhaisheng/Workspace/catkin_integration/src/interfaces/ads_internal/ros/visual/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::visual_msgs::VirtualWall_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::visual_msgs::VirtualWall_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visual_msgs::VirtualWall_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visual_msgs::VirtualWall_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visual_msgs::VirtualWall_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visual_msgs::VirtualWall_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::visual_msgs::VirtualWall_<ContainerAllocator> >
{
  static const char* value()
  {
    return "551524b8a92acd2689036d94355e750a";
  }

  static const char* value(const ::visual_msgs::VirtualWall_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x551524b8a92acd26ULL;
  static const uint64_t static_value2 = 0x89036d94355e750aULL;
};

template<class ContainerAllocator>
struct DataType< ::visual_msgs::VirtualWall_<ContainerAllocator> >
{
  static const char* value()
  {
    return "visual_msgs/VirtualWall";
  }

  static const char* value(const ::visual_msgs::VirtualWall_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::visual_msgs::VirtualWall_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 UNCLASSIFIED          = 0\n\
uint8 STOP_SIGN_ABSOLUTE    = 1\n\
uint8 STOP_SIGN_RELATIVE    = 2\n\
uint8 OBJECT                = 3\n\
uint8 OBJECT_VIRTUAL        = 4\n\
uint8 OBJECT_CLOSE          = 5\n\
uint8 OGM                   = 6\n\
uint8 HMAP_SPEED_LIMIT      = 7\n\
uint8 CURV_SPEED_LIMIT      = 8\n\
uint8 LONGITUDE_CMD         = 9\n\
\n\
uint8   type\n\
uint32  id\n\
float64 distance\n\
float64 speed\n\
\n\
float64 x           # Optional\n\
float64 y           # Optional\n\
float64 z           # Optional\n\
float64 heading     # Optional\n\
\n\
\n\
";
  }

  static const char* value(const ::visual_msgs::VirtualWall_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::visual_msgs::VirtualWall_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.id);
      stream.next(m.distance);
      stream.next(m.speed);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.heading);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VirtualWall_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::visual_msgs::VirtualWall_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::visual_msgs::VirtualWall_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISUAL_MSGS_MESSAGE_VIRTUALWALL_H
