// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/map_geometry.proto

#ifndef PROTOBUF_proto_2fmap_5fgeometry_2eproto__INCLUDED
#define PROTOBUF_proto_2fmap_5fgeometry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace trunk {
namespace hadmap {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2fmap_5fgeometry_2eproto();
void protobuf_AssignDesc_proto_2fmap_5fgeometry_2eproto();
void protobuf_ShutdownFile_proto_2fmap_5fgeometry_2eproto();

class Point2D;
class Point3D;
class Quaternion;
class Polygon;

// ===================================================================

class Point2D : public ::google::protobuf::Message {
 public:
  Point2D();
  virtual ~Point2D();

  Point2D(const Point2D& from);

  inline Point2D& operator=(const Point2D& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point2D& default_instance();

  void Swap(Point2D* other);

  // implements Message ----------------------------------------------

  Point2D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point2D& from);
  void MergeFrom(const Point2D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // optional double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // @@protoc_insertion_point(class_scope:trunk.hadmap.Point2D)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  friend void  protobuf_AddDesc_proto_2fmap_5fgeometry_2eproto();
  friend void protobuf_AssignDesc_proto_2fmap_5fgeometry_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmap_5fgeometry_2eproto();

  void InitAsDefaultInstance();
  static Point2D* default_instance_;
};
// -------------------------------------------------------------------

class Point3D : public ::google::protobuf::Message {
 public:
  Point3D();
  virtual ~Point3D();

  Point3D(const Point3D& from);

  inline Point3D& operator=(const Point3D& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point3D& default_instance();

  void Swap(Point3D* other);

  // implements Message ----------------------------------------------

  Point3D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point3D& from);
  void MergeFrom(const Point3D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // optional double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // optional double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);

  // @@protoc_insertion_point(class_scope:trunk.hadmap.Point3D)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  friend void  protobuf_AddDesc_proto_2fmap_5fgeometry_2eproto();
  friend void protobuf_AssignDesc_proto_2fmap_5fgeometry_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmap_5fgeometry_2eproto();

  void InitAsDefaultInstance();
  static Point3D* default_instance_;
};
// -------------------------------------------------------------------

class Quaternion : public ::google::protobuf::Message {
 public:
  Quaternion();
  virtual ~Quaternion();

  Quaternion(const Quaternion& from);

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Quaternion& default_instance();

  void Swap(Quaternion* other);

  // implements Message ----------------------------------------------

  Quaternion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Quaternion& from);
  void MergeFrom(const Quaternion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double qx = 1;
  inline bool has_qx() const;
  inline void clear_qx();
  static const int kQxFieldNumber = 1;
  inline double qx() const;
  inline void set_qx(double value);

  // optional double qy = 2;
  inline bool has_qy() const;
  inline void clear_qy();
  static const int kQyFieldNumber = 2;
  inline double qy() const;
  inline void set_qy(double value);

  // optional double qz = 3;
  inline bool has_qz() const;
  inline void clear_qz();
  static const int kQzFieldNumber = 3;
  inline double qz() const;
  inline void set_qz(double value);

  // optional double qw = 4;
  inline bool has_qw() const;
  inline void clear_qw();
  static const int kQwFieldNumber = 4;
  inline double qw() const;
  inline void set_qw(double value);

  // @@protoc_insertion_point(class_scope:trunk.hadmap.Quaternion)
 private:
  inline void set_has_qx();
  inline void clear_has_qx();
  inline void set_has_qy();
  inline void clear_has_qy();
  inline void set_has_qz();
  inline void clear_has_qz();
  inline void set_has_qw();
  inline void clear_has_qw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double qx_;
  double qy_;
  double qz_;
  double qw_;
  friend void  protobuf_AddDesc_proto_2fmap_5fgeometry_2eproto();
  friend void protobuf_AssignDesc_proto_2fmap_5fgeometry_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmap_5fgeometry_2eproto();

  void InitAsDefaultInstance();
  static Quaternion* default_instance_;
};
// -------------------------------------------------------------------

class Polygon : public ::google::protobuf::Message {
 public:
  Polygon();
  virtual ~Polygon();

  Polygon(const Polygon& from);

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Polygon& default_instance();

  void Swap(Polygon* other);

  // implements Message ----------------------------------------------

  Polygon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .trunk.hadmap.Point3D point = 1;
  inline int point_size() const;
  inline void clear_point();
  static const int kPointFieldNumber = 1;
  inline const ::trunk::hadmap::Point3D& point(int index) const;
  inline ::trunk::hadmap::Point3D* mutable_point(int index);
  inline ::trunk::hadmap::Point3D* add_point();
  inline const ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Point3D >&
      point() const;
  inline ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Point3D >*
      mutable_point();

  // @@protoc_insertion_point(class_scope:trunk.hadmap.Polygon)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Point3D > point_;
  friend void  protobuf_AddDesc_proto_2fmap_5fgeometry_2eproto();
  friend void protobuf_AssignDesc_proto_2fmap_5fgeometry_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmap_5fgeometry_2eproto();

  void InitAsDefaultInstance();
  static Polygon* default_instance_;
};
// ===================================================================


// ===================================================================

// Point2D

// optional double x = 1;
inline bool Point2D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point2D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point2D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point2D::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Point2D::x() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Point2D.x)
  return x_;
}
inline void Point2D::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:trunk.hadmap.Point2D.x)
}

// optional double y = 2;
inline bool Point2D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point2D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point2D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point2D::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Point2D::y() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Point2D.y)
  return y_;
}
inline void Point2D::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:trunk.hadmap.Point2D.y)
}

// -------------------------------------------------------------------

// Point3D

// optional double x = 1;
inline bool Point3D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point3D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point3D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point3D::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Point3D::x() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Point3D.x)
  return x_;
}
inline void Point3D::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:trunk.hadmap.Point3D.x)
}

// optional double y = 2;
inline bool Point3D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point3D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point3D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point3D::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Point3D::y() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Point3D.y)
  return y_;
}
inline void Point3D::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:trunk.hadmap.Point3D.y)
}

// optional double z = 3;
inline bool Point3D::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Point3D::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Point3D::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Point3D::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Point3D::z() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Point3D.z)
  return z_;
}
inline void Point3D::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:trunk.hadmap.Point3D.z)
}

// -------------------------------------------------------------------

// Quaternion

// optional double qx = 1;
inline bool Quaternion::has_qx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Quaternion::set_has_qx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Quaternion::clear_has_qx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Quaternion::clear_qx() {
  qx_ = 0;
  clear_has_qx();
}
inline double Quaternion::qx() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Quaternion.qx)
  return qx_;
}
inline void Quaternion::set_qx(double value) {
  set_has_qx();
  qx_ = value;
  // @@protoc_insertion_point(field_set:trunk.hadmap.Quaternion.qx)
}

// optional double qy = 2;
inline bool Quaternion::has_qy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Quaternion::set_has_qy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Quaternion::clear_has_qy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Quaternion::clear_qy() {
  qy_ = 0;
  clear_has_qy();
}
inline double Quaternion::qy() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Quaternion.qy)
  return qy_;
}
inline void Quaternion::set_qy(double value) {
  set_has_qy();
  qy_ = value;
  // @@protoc_insertion_point(field_set:trunk.hadmap.Quaternion.qy)
}

// optional double qz = 3;
inline bool Quaternion::has_qz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Quaternion::set_has_qz() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Quaternion::clear_has_qz() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Quaternion::clear_qz() {
  qz_ = 0;
  clear_has_qz();
}
inline double Quaternion::qz() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Quaternion.qz)
  return qz_;
}
inline void Quaternion::set_qz(double value) {
  set_has_qz();
  qz_ = value;
  // @@protoc_insertion_point(field_set:trunk.hadmap.Quaternion.qz)
}

// optional double qw = 4;
inline bool Quaternion::has_qw() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Quaternion::set_has_qw() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Quaternion::clear_has_qw() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Quaternion::clear_qw() {
  qw_ = 0;
  clear_has_qw();
}
inline double Quaternion::qw() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Quaternion.qw)
  return qw_;
}
inline void Quaternion::set_qw(double value) {
  set_has_qw();
  qw_ = value;
  // @@protoc_insertion_point(field_set:trunk.hadmap.Quaternion.qw)
}

// -------------------------------------------------------------------

// Polygon

// repeated .trunk.hadmap.Point3D point = 1;
inline int Polygon::point_size() const {
  return point_.size();
}
inline void Polygon::clear_point() {
  point_.Clear();
}
inline const ::trunk::hadmap::Point3D& Polygon::point(int index) const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Polygon.point)
  return point_.Get(index);
}
inline ::trunk::hadmap::Point3D* Polygon::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.Polygon.point)
  return point_.Mutable(index);
}
inline ::trunk::hadmap::Point3D* Polygon::add_point() {
  // @@protoc_insertion_point(field_add:trunk.hadmap.Polygon.point)
  return point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Point3D >&
Polygon::point() const {
  // @@protoc_insertion_point(field_list:trunk.hadmap.Polygon.point)
  return point_;
}
inline ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Point3D >*
Polygon::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:trunk.hadmap.Polygon.point)
  return &point_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hadmap
}  // namespace trunk

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fmap_5fgeometry_2eproto__INCLUDED
