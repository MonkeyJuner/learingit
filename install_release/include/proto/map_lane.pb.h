// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/map_lane.proto

#ifndef PROTOBUF_proto_2fmap_5flane_2eproto__INCLUDED
#define PROTOBUF_proto_2fmap_5flane_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/map_id.pb.h"
#include "proto/map_geometry.pb.h"
// @@protoc_insertion_point(includes)

namespace trunk {
namespace hadmap {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2fmap_5flane_2eproto();
void protobuf_AssignDesc_proto_2fmap_5flane_2eproto();
void protobuf_ShutdownFile_proto_2fmap_5flane_2eproto();

class LaneBoundaryType;
class LaneBoundary;
class LaneCenterPoint;
class LaneCenter;
class Lane;

enum LaneBoundaryType_Type {
  LaneBoundaryType_Type_UNKNOWN = 0,
  LaneBoundaryType_Type_DOTTED_YELLOW = 1,
  LaneBoundaryType_Type_DOTTED_WHITE = 2,
  LaneBoundaryType_Type_SOLID_YELLOW = 3,
  LaneBoundaryType_Type_SOLID_WHITE = 4,
  LaneBoundaryType_Type_DOUBLE_YELLOW = 5,
  LaneBoundaryType_Type_CURB = 6
};
bool LaneBoundaryType_Type_IsValid(int value);
const LaneBoundaryType_Type LaneBoundaryType_Type_Type_MIN = LaneBoundaryType_Type_UNKNOWN;
const LaneBoundaryType_Type LaneBoundaryType_Type_Type_MAX = LaneBoundaryType_Type_CURB;
const int LaneBoundaryType_Type_Type_ARRAYSIZE = LaneBoundaryType_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* LaneBoundaryType_Type_descriptor();
inline const ::std::string& LaneBoundaryType_Type_Name(LaneBoundaryType_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    LaneBoundaryType_Type_descriptor(), value);
}
inline bool LaneBoundaryType_Type_Parse(
    const ::std::string& name, LaneBoundaryType_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LaneBoundaryType_Type>(
    LaneBoundaryType_Type_descriptor(), name, value);
}
enum Lane_LaneType {
  Lane_LaneType_DRIVING = 0,
  Lane_LaneType_SEASIDE = 1,
  Lane_LaneType_YARD = 2,
  Lane_LaneType_CROSS = 3,
  Lane_LaneType_CONNECTION = 4,
  Lane_LaneType_LOCKZONE = 5,
  Lane_LaneType_HATCHCOVER = 6,
  Lane_LaneType_SIDEWALK = 7,
  Lane_LaneType_PARKING = 8,
  Lane_LaneType_SHOULDER = 9,
  Lane_LaneType_EMERGENCY = 10,
  Lane_LaneType_JUNCTION = 11,
  Lane_LaneType_BIKING = 12
};
bool Lane_LaneType_IsValid(int value);
const Lane_LaneType Lane_LaneType_LaneType_MIN = Lane_LaneType_DRIVING;
const Lane_LaneType Lane_LaneType_LaneType_MAX = Lane_LaneType_BIKING;
const int Lane_LaneType_LaneType_ARRAYSIZE = Lane_LaneType_LaneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Lane_LaneType_descriptor();
inline const ::std::string& Lane_LaneType_Name(Lane_LaneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Lane_LaneType_descriptor(), value);
}
inline bool Lane_LaneType_Parse(
    const ::std::string& name, Lane_LaneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Lane_LaneType>(
    Lane_LaneType_descriptor(), name, value);
}
enum Lane_LaneTurn {
  Lane_LaneTurn_NO_TURN = 0,
  Lane_LaneTurn_LEFT_TURN = 1,
  Lane_LaneTurn_RIGHT_TURN = 2,
  Lane_LaneTurn_U_TURN = 3
};
bool Lane_LaneTurn_IsValid(int value);
const Lane_LaneTurn Lane_LaneTurn_LaneTurn_MIN = Lane_LaneTurn_NO_TURN;
const Lane_LaneTurn Lane_LaneTurn_LaneTurn_MAX = Lane_LaneTurn_U_TURN;
const int Lane_LaneTurn_LaneTurn_ARRAYSIZE = Lane_LaneTurn_LaneTurn_MAX + 1;

const ::google::protobuf::EnumDescriptor* Lane_LaneTurn_descriptor();
inline const ::std::string& Lane_LaneTurn_Name(Lane_LaneTurn value) {
  return ::google::protobuf::internal::NameOfEnum(
    Lane_LaneTurn_descriptor(), value);
}
inline bool Lane_LaneTurn_Parse(
    const ::std::string& name, Lane_LaneTurn* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Lane_LaneTurn>(
    Lane_LaneTurn_descriptor(), name, value);
}
// ===================================================================

class LaneBoundaryType : public ::google::protobuf::Message {
 public:
  LaneBoundaryType();
  virtual ~LaneBoundaryType();

  LaneBoundaryType(const LaneBoundaryType& from);

  inline LaneBoundaryType& operator=(const LaneBoundaryType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneBoundaryType& default_instance();

  void Swap(LaneBoundaryType* other);

  // implements Message ----------------------------------------------

  LaneBoundaryType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LaneBoundaryType& from);
  void MergeFrom(const LaneBoundaryType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LaneBoundaryType_Type Type;
  static const Type UNKNOWN = LaneBoundaryType_Type_UNKNOWN;
  static const Type DOTTED_YELLOW = LaneBoundaryType_Type_DOTTED_YELLOW;
  static const Type DOTTED_WHITE = LaneBoundaryType_Type_DOTTED_WHITE;
  static const Type SOLID_YELLOW = LaneBoundaryType_Type_SOLID_YELLOW;
  static const Type SOLID_WHITE = LaneBoundaryType_Type_SOLID_WHITE;
  static const Type DOUBLE_YELLOW = LaneBoundaryType_Type_DOUBLE_YELLOW;
  static const Type CURB = LaneBoundaryType_Type_CURB;
  static inline bool Type_IsValid(int value) {
    return LaneBoundaryType_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LaneBoundaryType_Type_Type_MIN;
  static const Type Type_MAX =
    LaneBoundaryType_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LaneBoundaryType_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return LaneBoundaryType_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return LaneBoundaryType_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return LaneBoundaryType_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .trunk.hadmap.LaneBoundaryType.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::trunk::hadmap::LaneBoundaryType_Type type() const;
  inline void set_type(::trunk::hadmap::LaneBoundaryType_Type value);

  // @@protoc_insertion_point(class_scope:trunk.hadmap.LaneBoundaryType)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  friend void  protobuf_AddDesc_proto_2fmap_5flane_2eproto();
  friend void protobuf_AssignDesc_proto_2fmap_5flane_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmap_5flane_2eproto();

  void InitAsDefaultInstance();
  static LaneBoundaryType* default_instance_;
};
// -------------------------------------------------------------------

class LaneBoundary : public ::google::protobuf::Message {
 public:
  LaneBoundary();
  virtual ~LaneBoundary();

  LaneBoundary(const LaneBoundary& from);

  inline LaneBoundary& operator=(const LaneBoundary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneBoundary& default_instance();

  void Swap(LaneBoundary* other);

  // implements Message ----------------------------------------------

  LaneBoundary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LaneBoundary& from);
  void MergeFrom(const LaneBoundary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double length = 1;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 1;
  inline double length() const;
  inline void set_length(double value);

  // optional bool virtual = 2;
  inline bool has_virtual_() const;
  inline void clear_virtual_();
  static const int kVirtualFieldNumber = 2;
  inline bool virtual_() const;
  inline void set_virtual_(bool value);

  // optional .trunk.hadmap.LaneBoundaryType boundary_type = 3;
  inline bool has_boundary_type() const;
  inline void clear_boundary_type();
  static const int kBoundaryTypeFieldNumber = 3;
  inline const ::trunk::hadmap::LaneBoundaryType& boundary_type() const;
  inline ::trunk::hadmap::LaneBoundaryType* mutable_boundary_type();
  inline ::trunk::hadmap::LaneBoundaryType* release_boundary_type();
  inline void set_allocated_boundary_type(::trunk::hadmap::LaneBoundaryType* boundary_type);

  // optional .trunk.hadmap.Polygon pts = 4;
  inline bool has_pts() const;
  inline void clear_pts();
  static const int kPtsFieldNumber = 4;
  inline const ::trunk::hadmap::Polygon& pts() const;
  inline ::trunk::hadmap::Polygon* mutable_pts();
  inline ::trunk::hadmap::Polygon* release_pts();
  inline void set_allocated_pts(::trunk::hadmap::Polygon* pts);

  // @@protoc_insertion_point(class_scope:trunk.hadmap.LaneBoundary)
 private:
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_virtual_();
  inline void clear_has_virtual_();
  inline void set_has_boundary_type();
  inline void clear_has_boundary_type();
  inline void set_has_pts();
  inline void clear_has_pts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double length_;
  ::trunk::hadmap::LaneBoundaryType* boundary_type_;
  ::trunk::hadmap::Polygon* pts_;
  bool virtual__;
  friend void  protobuf_AddDesc_proto_2fmap_5flane_2eproto();
  friend void protobuf_AssignDesc_proto_2fmap_5flane_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmap_5flane_2eproto();

  void InitAsDefaultInstance();
  static LaneBoundary* default_instance_;
};
// -------------------------------------------------------------------

class LaneCenterPoint : public ::google::protobuf::Message {
 public:
  LaneCenterPoint();
  virtual ~LaneCenterPoint();

  LaneCenterPoint(const LaneCenterPoint& from);

  inline LaneCenterPoint& operator=(const LaneCenterPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneCenterPoint& default_instance();

  void Swap(LaneCenterPoint* other);

  // implements Message ----------------------------------------------

  LaneCenterPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LaneCenterPoint& from);
  void MergeFrom(const LaneCenterPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .trunk.hadmap.Id id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::trunk::hadmap::Id& id() const;
  inline ::trunk::hadmap::Id* mutable_id();
  inline ::trunk::hadmap::Id* release_id();
  inline void set_allocated_id(::trunk::hadmap::Id* id);

  // optional .trunk.hadmap.Point3D pt = 2;
  inline bool has_pt() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 2;
  inline const ::trunk::hadmap::Point3D& pt() const;
  inline ::trunk::hadmap::Point3D* mutable_pt();
  inline ::trunk::hadmap::Point3D* release_pt();
  inline void set_allocated_pt(::trunk::hadmap::Point3D* pt);

  // optional double heading = 3;
  inline bool has_heading() const;
  inline void clear_heading();
  static const int kHeadingFieldNumber = 3;
  inline double heading() const;
  inline void set_heading(double value);

  // optional double len_integral = 4;
  inline bool has_len_integral() const;
  inline void clear_len_integral();
  static const int kLenIntegralFieldNumber = 4;
  inline double len_integral() const;
  inline void set_len_integral(double value);

  // @@protoc_insertion_point(class_scope:trunk.hadmap.LaneCenterPoint)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pt();
  inline void clear_has_pt();
  inline void set_has_heading();
  inline void clear_has_heading();
  inline void set_has_len_integral();
  inline void clear_has_len_integral();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::trunk::hadmap::Id* id_;
  ::trunk::hadmap::Point3D* pt_;
  double heading_;
  double len_integral_;
  friend void  protobuf_AddDesc_proto_2fmap_5flane_2eproto();
  friend void protobuf_AssignDesc_proto_2fmap_5flane_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmap_5flane_2eproto();

  void InitAsDefaultInstance();
  static LaneCenterPoint* default_instance_;
};
// -------------------------------------------------------------------

class LaneCenter : public ::google::protobuf::Message {
 public:
  LaneCenter();
  virtual ~LaneCenter();

  LaneCenter(const LaneCenter& from);

  inline LaneCenter& operator=(const LaneCenter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneCenter& default_instance();

  void Swap(LaneCenter* other);

  // implements Message ----------------------------------------------

  LaneCenter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LaneCenter& from);
  void MergeFrom(const LaneCenter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double length = 1;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 1;
  inline double length() const;
  inline void set_length(double value);

  // repeated .trunk.hadmap.LaneCenterPoint pt = 2;
  inline int pt_size() const;
  inline void clear_pt();
  static const int kPtFieldNumber = 2;
  inline const ::trunk::hadmap::LaneCenterPoint& pt(int index) const;
  inline ::trunk::hadmap::LaneCenterPoint* mutable_pt(int index);
  inline ::trunk::hadmap::LaneCenterPoint* add_pt();
  inline const ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::LaneCenterPoint >&
      pt() const;
  inline ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::LaneCenterPoint >*
      mutable_pt();

  // @@protoc_insertion_point(class_scope:trunk.hadmap.LaneCenter)
 private:
  inline void set_has_length();
  inline void clear_has_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double length_;
  ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::LaneCenterPoint > pt_;
  friend void  protobuf_AddDesc_proto_2fmap_5flane_2eproto();
  friend void protobuf_AssignDesc_proto_2fmap_5flane_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmap_5flane_2eproto();

  void InitAsDefaultInstance();
  static LaneCenter* default_instance_;
};
// -------------------------------------------------------------------

class Lane : public ::google::protobuf::Message {
 public:
  Lane();
  virtual ~Lane();

  Lane(const Lane& from);

  inline Lane& operator=(const Lane& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Lane& default_instance();

  void Swap(Lane* other);

  // implements Message ----------------------------------------------

  Lane* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Lane& from);
  void MergeFrom(const Lane& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Lane_LaneType LaneType;
  static const LaneType DRIVING = Lane_LaneType_DRIVING;
  static const LaneType SEASIDE = Lane_LaneType_SEASIDE;
  static const LaneType YARD = Lane_LaneType_YARD;
  static const LaneType CROSS = Lane_LaneType_CROSS;
  static const LaneType CONNECTION = Lane_LaneType_CONNECTION;
  static const LaneType LOCKZONE = Lane_LaneType_LOCKZONE;
  static const LaneType HATCHCOVER = Lane_LaneType_HATCHCOVER;
  static const LaneType SIDEWALK = Lane_LaneType_SIDEWALK;
  static const LaneType PARKING = Lane_LaneType_PARKING;
  static const LaneType SHOULDER = Lane_LaneType_SHOULDER;
  static const LaneType EMERGENCY = Lane_LaneType_EMERGENCY;
  static const LaneType JUNCTION = Lane_LaneType_JUNCTION;
  static const LaneType BIKING = Lane_LaneType_BIKING;
  static inline bool LaneType_IsValid(int value) {
    return Lane_LaneType_IsValid(value);
  }
  static const LaneType LaneType_MIN =
    Lane_LaneType_LaneType_MIN;
  static const LaneType LaneType_MAX =
    Lane_LaneType_LaneType_MAX;
  static const int LaneType_ARRAYSIZE =
    Lane_LaneType_LaneType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LaneType_descriptor() {
    return Lane_LaneType_descriptor();
  }
  static inline const ::std::string& LaneType_Name(LaneType value) {
    return Lane_LaneType_Name(value);
  }
  static inline bool LaneType_Parse(const ::std::string& name,
      LaneType* value) {
    return Lane_LaneType_Parse(name, value);
  }

  typedef Lane_LaneTurn LaneTurn;
  static const LaneTurn NO_TURN = Lane_LaneTurn_NO_TURN;
  static const LaneTurn LEFT_TURN = Lane_LaneTurn_LEFT_TURN;
  static const LaneTurn RIGHT_TURN = Lane_LaneTurn_RIGHT_TURN;
  static const LaneTurn U_TURN = Lane_LaneTurn_U_TURN;
  static inline bool LaneTurn_IsValid(int value) {
    return Lane_LaneTurn_IsValid(value);
  }
  static const LaneTurn LaneTurn_MIN =
    Lane_LaneTurn_LaneTurn_MIN;
  static const LaneTurn LaneTurn_MAX =
    Lane_LaneTurn_LaneTurn_MAX;
  static const int LaneTurn_ARRAYSIZE =
    Lane_LaneTurn_LaneTurn_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LaneTurn_descriptor() {
    return Lane_LaneTurn_descriptor();
  }
  static inline const ::std::string& LaneTurn_Name(LaneTurn value) {
    return Lane_LaneTurn_Name(value);
  }
  static inline bool LaneTurn_Parse(const ::std::string& name,
      LaneTurn* value) {
    return Lane_LaneTurn_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .trunk.hadmap.Id id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::trunk::hadmap::Id& id() const;
  inline ::trunk::hadmap::Id* mutable_id();
  inline ::trunk::hadmap::Id* release_id();
  inline void set_allocated_id(::trunk::hadmap::Id* id);

  // repeated .trunk.hadmap.Id predecessor_id = 2;
  inline int predecessor_id_size() const;
  inline void clear_predecessor_id();
  static const int kPredecessorIdFieldNumber = 2;
  inline const ::trunk::hadmap::Id& predecessor_id(int index) const;
  inline ::trunk::hadmap::Id* mutable_predecessor_id(int index);
  inline ::trunk::hadmap::Id* add_predecessor_id();
  inline const ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Id >&
      predecessor_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Id >*
      mutable_predecessor_id();

  // repeated .trunk.hadmap.Id successor_id = 3;
  inline int successor_id_size() const;
  inline void clear_successor_id();
  static const int kSuccessorIdFieldNumber = 3;
  inline const ::trunk::hadmap::Id& successor_id(int index) const;
  inline ::trunk::hadmap::Id* mutable_successor_id(int index);
  inline ::trunk::hadmap::Id* add_successor_id();
  inline const ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Id >&
      successor_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Id >*
      mutable_successor_id();

  // optional .trunk.hadmap.Point3D start_pt = 4;
  inline bool has_start_pt() const;
  inline void clear_start_pt();
  static const int kStartPtFieldNumber = 4;
  inline const ::trunk::hadmap::Point3D& start_pt() const;
  inline ::trunk::hadmap::Point3D* mutable_start_pt();
  inline ::trunk::hadmap::Point3D* release_start_pt();
  inline void set_allocated_start_pt(::trunk::hadmap::Point3D* start_pt);

  // optional .trunk.hadmap.Point3D end_pt = 5;
  inline bool has_end_pt() const;
  inline void clear_end_pt();
  static const int kEndPtFieldNumber = 5;
  inline const ::trunk::hadmap::Point3D& end_pt() const;
  inline ::trunk::hadmap::Point3D* mutable_end_pt();
  inline ::trunk::hadmap::Point3D* release_end_pt();
  inline void set_allocated_end_pt(::trunk::hadmap::Point3D* end_pt);

  // optional .trunk.hadmap.LaneCenter center_line = 6;
  inline bool has_center_line() const;
  inline void clear_center_line();
  static const int kCenterLineFieldNumber = 6;
  inline const ::trunk::hadmap::LaneCenter& center_line() const;
  inline ::trunk::hadmap::LaneCenter* mutable_center_line();
  inline ::trunk::hadmap::LaneCenter* release_center_line();
  inline void set_allocated_center_line(::trunk::hadmap::LaneCenter* center_line);

  // optional .trunk.hadmap.LaneBoundary left_boundary = 7;
  inline bool has_left_boundary() const;
  inline void clear_left_boundary();
  static const int kLeftBoundaryFieldNumber = 7;
  inline const ::trunk::hadmap::LaneBoundary& left_boundary() const;
  inline ::trunk::hadmap::LaneBoundary* mutable_left_boundary();
  inline ::trunk::hadmap::LaneBoundary* release_left_boundary();
  inline void set_allocated_left_boundary(::trunk::hadmap::LaneBoundary* left_boundary);

  // optional .trunk.hadmap.LaneBoundary right_boundary = 8;
  inline bool has_right_boundary() const;
  inline void clear_right_boundary();
  static const int kRightBoundaryFieldNumber = 8;
  inline const ::trunk::hadmap::LaneBoundary& right_boundary() const;
  inline ::trunk::hadmap::LaneBoundary* mutable_right_boundary();
  inline ::trunk::hadmap::LaneBoundary* release_right_boundary();
  inline void set_allocated_right_boundary(::trunk::hadmap::LaneBoundary* right_boundary);

  // optional double speed_limit = 9;
  inline bool has_speed_limit() const;
  inline void clear_speed_limit();
  static const int kSpeedLimitFieldNumber = 9;
  inline double speed_limit() const;
  inline void set_speed_limit(double value);

  // optional double length = 10;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 10;
  inline double length() const;
  inline void set_length(double value);

  // repeated .trunk.hadmap.Id overlap_id = 11;
  inline int overlap_id_size() const;
  inline void clear_overlap_id();
  static const int kOverlapIdFieldNumber = 11;
  inline const ::trunk::hadmap::Id& overlap_id(int index) const;
  inline ::trunk::hadmap::Id* mutable_overlap_id(int index);
  inline ::trunk::hadmap::Id* add_overlap_id();
  inline const ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Id >&
      overlap_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Id >*
      mutable_overlap_id();

  // optional .trunk.hadmap.Lane.LaneType type = 12;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 12;
  inline ::trunk::hadmap::Lane_LaneType type() const;
  inline void set_type(::trunk::hadmap::Lane_LaneType value);

  // optional .trunk.hadmap.Lane.LaneTurn turn = 13;
  inline bool has_turn() const;
  inline void clear_turn();
  static const int kTurnFieldNumber = 13;
  inline ::trunk::hadmap::Lane_LaneTurn turn() const;
  inline void set_turn(::trunk::hadmap::Lane_LaneTurn value);

  // optional .trunk.hadmap.Id junction_id = 14;
  inline bool has_junction_id() const;
  inline void clear_junction_id();
  static const int kJunctionIdFieldNumber = 14;
  inline const ::trunk::hadmap::Id& junction_id() const;
  inline ::trunk::hadmap::Id* mutable_junction_id();
  inline ::trunk::hadmap::Id* release_junction_id();
  inline void set_allocated_junction_id(::trunk::hadmap::Id* junction_id);

  // optional .trunk.hadmap.Id left_neighbor_lane_id = 15;
  inline bool has_left_neighbor_lane_id() const;
  inline void clear_left_neighbor_lane_id();
  static const int kLeftNeighborLaneIdFieldNumber = 15;
  inline const ::trunk::hadmap::Id& left_neighbor_lane_id() const;
  inline ::trunk::hadmap::Id* mutable_left_neighbor_lane_id();
  inline ::trunk::hadmap::Id* release_left_neighbor_lane_id();
  inline void set_allocated_left_neighbor_lane_id(::trunk::hadmap::Id* left_neighbor_lane_id);

  // optional .trunk.hadmap.Id right_neighbor_lane_id = 16;
  inline bool has_right_neighbor_lane_id() const;
  inline void clear_right_neighbor_lane_id();
  static const int kRightNeighborLaneIdFieldNumber = 16;
  inline const ::trunk::hadmap::Id& right_neighbor_lane_id() const;
  inline ::trunk::hadmap::Id* mutable_right_neighbor_lane_id();
  inline ::trunk::hadmap::Id* release_right_neighbor_lane_id();
  inline void set_allocated_right_neighbor_lane_id(::trunk::hadmap::Id* right_neighbor_lane_id);

  // optional int32 resign_id = 17;
  inline bool has_resign_id() const;
  inline void clear_resign_id();
  static const int kResignIdFieldNumber = 17;
  inline ::google::protobuf::int32 resign_id() const;
  inline void set_resign_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:trunk.hadmap.Lane)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_start_pt();
  inline void clear_has_start_pt();
  inline void set_has_end_pt();
  inline void clear_has_end_pt();
  inline void set_has_center_line();
  inline void clear_has_center_line();
  inline void set_has_left_boundary();
  inline void clear_has_left_boundary();
  inline void set_has_right_boundary();
  inline void clear_has_right_boundary();
  inline void set_has_speed_limit();
  inline void clear_has_speed_limit();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_turn();
  inline void clear_has_turn();
  inline void set_has_junction_id();
  inline void clear_has_junction_id();
  inline void set_has_left_neighbor_lane_id();
  inline void clear_has_left_neighbor_lane_id();
  inline void set_has_right_neighbor_lane_id();
  inline void clear_has_right_neighbor_lane_id();
  inline void set_has_resign_id();
  inline void clear_has_resign_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::trunk::hadmap::Id* id_;
  ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Id > predecessor_id_;
  ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Id > successor_id_;
  ::trunk::hadmap::Point3D* start_pt_;
  ::trunk::hadmap::Point3D* end_pt_;
  ::trunk::hadmap::LaneCenter* center_line_;
  ::trunk::hadmap::LaneBoundary* left_boundary_;
  ::trunk::hadmap::LaneBoundary* right_boundary_;
  double speed_limit_;
  double length_;
  ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Id > overlap_id_;
  int type_;
  int turn_;
  ::trunk::hadmap::Id* junction_id_;
  ::trunk::hadmap::Id* left_neighbor_lane_id_;
  ::trunk::hadmap::Id* right_neighbor_lane_id_;
  ::google::protobuf::int32 resign_id_;
  friend void  protobuf_AddDesc_proto_2fmap_5flane_2eproto();
  friend void protobuf_AssignDesc_proto_2fmap_5flane_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmap_5flane_2eproto();

  void InitAsDefaultInstance();
  static Lane* default_instance_;
};
// ===================================================================


// ===================================================================

// LaneBoundaryType

// optional .trunk.hadmap.LaneBoundaryType.Type type = 1;
inline bool LaneBoundaryType::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneBoundaryType::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneBoundaryType::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneBoundaryType::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::trunk::hadmap::LaneBoundaryType_Type LaneBoundaryType::type() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.LaneBoundaryType.type)
  return static_cast< ::trunk::hadmap::LaneBoundaryType_Type >(type_);
}
inline void LaneBoundaryType::set_type(::trunk::hadmap::LaneBoundaryType_Type value) {
  assert(::trunk::hadmap::LaneBoundaryType_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:trunk.hadmap.LaneBoundaryType.type)
}

// -------------------------------------------------------------------

// LaneBoundary

// optional double length = 1;
inline bool LaneBoundary::has_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneBoundary::set_has_length() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneBoundary::clear_has_length() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneBoundary::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double LaneBoundary::length() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.LaneBoundary.length)
  return length_;
}
inline void LaneBoundary::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:trunk.hadmap.LaneBoundary.length)
}

// optional bool virtual = 2;
inline bool LaneBoundary::has_virtual_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneBoundary::set_has_virtual_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneBoundary::clear_has_virtual_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaneBoundary::clear_virtual_() {
  virtual__ = false;
  clear_has_virtual_();
}
inline bool LaneBoundary::virtual_() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.LaneBoundary.virtual)
  return virtual__;
}
inline void LaneBoundary::set_virtual_(bool value) {
  set_has_virtual_();
  virtual__ = value;
  // @@protoc_insertion_point(field_set:trunk.hadmap.LaneBoundary.virtual)
}

// optional .trunk.hadmap.LaneBoundaryType boundary_type = 3;
inline bool LaneBoundary::has_boundary_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneBoundary::set_has_boundary_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaneBoundary::clear_has_boundary_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaneBoundary::clear_boundary_type() {
  if (boundary_type_ != NULL) boundary_type_->::trunk::hadmap::LaneBoundaryType::Clear();
  clear_has_boundary_type();
}
inline const ::trunk::hadmap::LaneBoundaryType& LaneBoundary::boundary_type() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.LaneBoundary.boundary_type)
  return boundary_type_ != NULL ? *boundary_type_ : *default_instance_->boundary_type_;
}
inline ::trunk::hadmap::LaneBoundaryType* LaneBoundary::mutable_boundary_type() {
  set_has_boundary_type();
  if (boundary_type_ == NULL) boundary_type_ = new ::trunk::hadmap::LaneBoundaryType;
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.LaneBoundary.boundary_type)
  return boundary_type_;
}
inline ::trunk::hadmap::LaneBoundaryType* LaneBoundary::release_boundary_type() {
  clear_has_boundary_type();
  ::trunk::hadmap::LaneBoundaryType* temp = boundary_type_;
  boundary_type_ = NULL;
  return temp;
}
inline void LaneBoundary::set_allocated_boundary_type(::trunk::hadmap::LaneBoundaryType* boundary_type) {
  delete boundary_type_;
  boundary_type_ = boundary_type;
  if (boundary_type) {
    set_has_boundary_type();
  } else {
    clear_has_boundary_type();
  }
  // @@protoc_insertion_point(field_set_allocated:trunk.hadmap.LaneBoundary.boundary_type)
}

// optional .trunk.hadmap.Polygon pts = 4;
inline bool LaneBoundary::has_pts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaneBoundary::set_has_pts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LaneBoundary::clear_has_pts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LaneBoundary::clear_pts() {
  if (pts_ != NULL) pts_->::trunk::hadmap::Polygon::Clear();
  clear_has_pts();
}
inline const ::trunk::hadmap::Polygon& LaneBoundary::pts() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.LaneBoundary.pts)
  return pts_ != NULL ? *pts_ : *default_instance_->pts_;
}
inline ::trunk::hadmap::Polygon* LaneBoundary::mutable_pts() {
  set_has_pts();
  if (pts_ == NULL) pts_ = new ::trunk::hadmap::Polygon;
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.LaneBoundary.pts)
  return pts_;
}
inline ::trunk::hadmap::Polygon* LaneBoundary::release_pts() {
  clear_has_pts();
  ::trunk::hadmap::Polygon* temp = pts_;
  pts_ = NULL;
  return temp;
}
inline void LaneBoundary::set_allocated_pts(::trunk::hadmap::Polygon* pts) {
  delete pts_;
  pts_ = pts;
  if (pts) {
    set_has_pts();
  } else {
    clear_has_pts();
  }
  // @@protoc_insertion_point(field_set_allocated:trunk.hadmap.LaneBoundary.pts)
}

// -------------------------------------------------------------------

// LaneCenterPoint

// optional .trunk.hadmap.Id id = 1;
inline bool LaneCenterPoint::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneCenterPoint::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneCenterPoint::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneCenterPoint::clear_id() {
  if (id_ != NULL) id_->::trunk::hadmap::Id::Clear();
  clear_has_id();
}
inline const ::trunk::hadmap::Id& LaneCenterPoint::id() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.LaneCenterPoint.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::trunk::hadmap::Id* LaneCenterPoint::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::trunk::hadmap::Id;
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.LaneCenterPoint.id)
  return id_;
}
inline ::trunk::hadmap::Id* LaneCenterPoint::release_id() {
  clear_has_id();
  ::trunk::hadmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void LaneCenterPoint::set_allocated_id(::trunk::hadmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:trunk.hadmap.LaneCenterPoint.id)
}

// optional .trunk.hadmap.Point3D pt = 2;
inline bool LaneCenterPoint::has_pt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneCenterPoint::set_has_pt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneCenterPoint::clear_has_pt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaneCenterPoint::clear_pt() {
  if (pt_ != NULL) pt_->::trunk::hadmap::Point3D::Clear();
  clear_has_pt();
}
inline const ::trunk::hadmap::Point3D& LaneCenterPoint::pt() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.LaneCenterPoint.pt)
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::trunk::hadmap::Point3D* LaneCenterPoint::mutable_pt() {
  set_has_pt();
  if (pt_ == NULL) pt_ = new ::trunk::hadmap::Point3D;
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.LaneCenterPoint.pt)
  return pt_;
}
inline ::trunk::hadmap::Point3D* LaneCenterPoint::release_pt() {
  clear_has_pt();
  ::trunk::hadmap::Point3D* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void LaneCenterPoint::set_allocated_pt(::trunk::hadmap::Point3D* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    set_has_pt();
  } else {
    clear_has_pt();
  }
  // @@protoc_insertion_point(field_set_allocated:trunk.hadmap.LaneCenterPoint.pt)
}

// optional double heading = 3;
inline bool LaneCenterPoint::has_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneCenterPoint::set_has_heading() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaneCenterPoint::clear_has_heading() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaneCenterPoint::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline double LaneCenterPoint::heading() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.LaneCenterPoint.heading)
  return heading_;
}
inline void LaneCenterPoint::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:trunk.hadmap.LaneCenterPoint.heading)
}

// optional double len_integral = 4;
inline bool LaneCenterPoint::has_len_integral() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaneCenterPoint::set_has_len_integral() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LaneCenterPoint::clear_has_len_integral() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LaneCenterPoint::clear_len_integral() {
  len_integral_ = 0;
  clear_has_len_integral();
}
inline double LaneCenterPoint::len_integral() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.LaneCenterPoint.len_integral)
  return len_integral_;
}
inline void LaneCenterPoint::set_len_integral(double value) {
  set_has_len_integral();
  len_integral_ = value;
  // @@protoc_insertion_point(field_set:trunk.hadmap.LaneCenterPoint.len_integral)
}

// -------------------------------------------------------------------

// LaneCenter

// optional double length = 1;
inline bool LaneCenter::has_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneCenter::set_has_length() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneCenter::clear_has_length() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneCenter::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double LaneCenter::length() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.LaneCenter.length)
  return length_;
}
inline void LaneCenter::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:trunk.hadmap.LaneCenter.length)
}

// repeated .trunk.hadmap.LaneCenterPoint pt = 2;
inline int LaneCenter::pt_size() const {
  return pt_.size();
}
inline void LaneCenter::clear_pt() {
  pt_.Clear();
}
inline const ::trunk::hadmap::LaneCenterPoint& LaneCenter::pt(int index) const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.LaneCenter.pt)
  return pt_.Get(index);
}
inline ::trunk::hadmap::LaneCenterPoint* LaneCenter::mutable_pt(int index) {
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.LaneCenter.pt)
  return pt_.Mutable(index);
}
inline ::trunk::hadmap::LaneCenterPoint* LaneCenter::add_pt() {
  // @@protoc_insertion_point(field_add:trunk.hadmap.LaneCenter.pt)
  return pt_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::LaneCenterPoint >&
LaneCenter::pt() const {
  // @@protoc_insertion_point(field_list:trunk.hadmap.LaneCenter.pt)
  return pt_;
}
inline ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::LaneCenterPoint >*
LaneCenter::mutable_pt() {
  // @@protoc_insertion_point(field_mutable_list:trunk.hadmap.LaneCenter.pt)
  return &pt_;
}

// -------------------------------------------------------------------

// Lane

// optional .trunk.hadmap.Id id = 1;
inline bool Lane::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Lane::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Lane::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Lane::clear_id() {
  if (id_ != NULL) id_->::trunk::hadmap::Id::Clear();
  clear_has_id();
}
inline const ::trunk::hadmap::Id& Lane::id() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Lane.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::trunk::hadmap::Id* Lane::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::trunk::hadmap::Id;
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.Lane.id)
  return id_;
}
inline ::trunk::hadmap::Id* Lane::release_id() {
  clear_has_id();
  ::trunk::hadmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Lane::set_allocated_id(::trunk::hadmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:trunk.hadmap.Lane.id)
}

// repeated .trunk.hadmap.Id predecessor_id = 2;
inline int Lane::predecessor_id_size() const {
  return predecessor_id_.size();
}
inline void Lane::clear_predecessor_id() {
  predecessor_id_.Clear();
}
inline const ::trunk::hadmap::Id& Lane::predecessor_id(int index) const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Lane.predecessor_id)
  return predecessor_id_.Get(index);
}
inline ::trunk::hadmap::Id* Lane::mutable_predecessor_id(int index) {
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.Lane.predecessor_id)
  return predecessor_id_.Mutable(index);
}
inline ::trunk::hadmap::Id* Lane::add_predecessor_id() {
  // @@protoc_insertion_point(field_add:trunk.hadmap.Lane.predecessor_id)
  return predecessor_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Id >&
Lane::predecessor_id() const {
  // @@protoc_insertion_point(field_list:trunk.hadmap.Lane.predecessor_id)
  return predecessor_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Id >*
Lane::mutable_predecessor_id() {
  // @@protoc_insertion_point(field_mutable_list:trunk.hadmap.Lane.predecessor_id)
  return &predecessor_id_;
}

// repeated .trunk.hadmap.Id successor_id = 3;
inline int Lane::successor_id_size() const {
  return successor_id_.size();
}
inline void Lane::clear_successor_id() {
  successor_id_.Clear();
}
inline const ::trunk::hadmap::Id& Lane::successor_id(int index) const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Lane.successor_id)
  return successor_id_.Get(index);
}
inline ::trunk::hadmap::Id* Lane::mutable_successor_id(int index) {
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.Lane.successor_id)
  return successor_id_.Mutable(index);
}
inline ::trunk::hadmap::Id* Lane::add_successor_id() {
  // @@protoc_insertion_point(field_add:trunk.hadmap.Lane.successor_id)
  return successor_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Id >&
Lane::successor_id() const {
  // @@protoc_insertion_point(field_list:trunk.hadmap.Lane.successor_id)
  return successor_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Id >*
Lane::mutable_successor_id() {
  // @@protoc_insertion_point(field_mutable_list:trunk.hadmap.Lane.successor_id)
  return &successor_id_;
}

// optional .trunk.hadmap.Point3D start_pt = 4;
inline bool Lane::has_start_pt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Lane::set_has_start_pt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Lane::clear_has_start_pt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Lane::clear_start_pt() {
  if (start_pt_ != NULL) start_pt_->::trunk::hadmap::Point3D::Clear();
  clear_has_start_pt();
}
inline const ::trunk::hadmap::Point3D& Lane::start_pt() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Lane.start_pt)
  return start_pt_ != NULL ? *start_pt_ : *default_instance_->start_pt_;
}
inline ::trunk::hadmap::Point3D* Lane::mutable_start_pt() {
  set_has_start_pt();
  if (start_pt_ == NULL) start_pt_ = new ::trunk::hadmap::Point3D;
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.Lane.start_pt)
  return start_pt_;
}
inline ::trunk::hadmap::Point3D* Lane::release_start_pt() {
  clear_has_start_pt();
  ::trunk::hadmap::Point3D* temp = start_pt_;
  start_pt_ = NULL;
  return temp;
}
inline void Lane::set_allocated_start_pt(::trunk::hadmap::Point3D* start_pt) {
  delete start_pt_;
  start_pt_ = start_pt;
  if (start_pt) {
    set_has_start_pt();
  } else {
    clear_has_start_pt();
  }
  // @@protoc_insertion_point(field_set_allocated:trunk.hadmap.Lane.start_pt)
}

// optional .trunk.hadmap.Point3D end_pt = 5;
inline bool Lane::has_end_pt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Lane::set_has_end_pt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Lane::clear_has_end_pt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Lane::clear_end_pt() {
  if (end_pt_ != NULL) end_pt_->::trunk::hadmap::Point3D::Clear();
  clear_has_end_pt();
}
inline const ::trunk::hadmap::Point3D& Lane::end_pt() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Lane.end_pt)
  return end_pt_ != NULL ? *end_pt_ : *default_instance_->end_pt_;
}
inline ::trunk::hadmap::Point3D* Lane::mutable_end_pt() {
  set_has_end_pt();
  if (end_pt_ == NULL) end_pt_ = new ::trunk::hadmap::Point3D;
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.Lane.end_pt)
  return end_pt_;
}
inline ::trunk::hadmap::Point3D* Lane::release_end_pt() {
  clear_has_end_pt();
  ::trunk::hadmap::Point3D* temp = end_pt_;
  end_pt_ = NULL;
  return temp;
}
inline void Lane::set_allocated_end_pt(::trunk::hadmap::Point3D* end_pt) {
  delete end_pt_;
  end_pt_ = end_pt;
  if (end_pt) {
    set_has_end_pt();
  } else {
    clear_has_end_pt();
  }
  // @@protoc_insertion_point(field_set_allocated:trunk.hadmap.Lane.end_pt)
}

// optional .trunk.hadmap.LaneCenter center_line = 6;
inline bool Lane::has_center_line() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Lane::set_has_center_line() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Lane::clear_has_center_line() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Lane::clear_center_line() {
  if (center_line_ != NULL) center_line_->::trunk::hadmap::LaneCenter::Clear();
  clear_has_center_line();
}
inline const ::trunk::hadmap::LaneCenter& Lane::center_line() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Lane.center_line)
  return center_line_ != NULL ? *center_line_ : *default_instance_->center_line_;
}
inline ::trunk::hadmap::LaneCenter* Lane::mutable_center_line() {
  set_has_center_line();
  if (center_line_ == NULL) center_line_ = new ::trunk::hadmap::LaneCenter;
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.Lane.center_line)
  return center_line_;
}
inline ::trunk::hadmap::LaneCenter* Lane::release_center_line() {
  clear_has_center_line();
  ::trunk::hadmap::LaneCenter* temp = center_line_;
  center_line_ = NULL;
  return temp;
}
inline void Lane::set_allocated_center_line(::trunk::hadmap::LaneCenter* center_line) {
  delete center_line_;
  center_line_ = center_line;
  if (center_line) {
    set_has_center_line();
  } else {
    clear_has_center_line();
  }
  // @@protoc_insertion_point(field_set_allocated:trunk.hadmap.Lane.center_line)
}

// optional .trunk.hadmap.LaneBoundary left_boundary = 7;
inline bool Lane::has_left_boundary() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Lane::set_has_left_boundary() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Lane::clear_has_left_boundary() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Lane::clear_left_boundary() {
  if (left_boundary_ != NULL) left_boundary_->::trunk::hadmap::LaneBoundary::Clear();
  clear_has_left_boundary();
}
inline const ::trunk::hadmap::LaneBoundary& Lane::left_boundary() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Lane.left_boundary)
  return left_boundary_ != NULL ? *left_boundary_ : *default_instance_->left_boundary_;
}
inline ::trunk::hadmap::LaneBoundary* Lane::mutable_left_boundary() {
  set_has_left_boundary();
  if (left_boundary_ == NULL) left_boundary_ = new ::trunk::hadmap::LaneBoundary;
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.Lane.left_boundary)
  return left_boundary_;
}
inline ::trunk::hadmap::LaneBoundary* Lane::release_left_boundary() {
  clear_has_left_boundary();
  ::trunk::hadmap::LaneBoundary* temp = left_boundary_;
  left_boundary_ = NULL;
  return temp;
}
inline void Lane::set_allocated_left_boundary(::trunk::hadmap::LaneBoundary* left_boundary) {
  delete left_boundary_;
  left_boundary_ = left_boundary;
  if (left_boundary) {
    set_has_left_boundary();
  } else {
    clear_has_left_boundary();
  }
  // @@protoc_insertion_point(field_set_allocated:trunk.hadmap.Lane.left_boundary)
}

// optional .trunk.hadmap.LaneBoundary right_boundary = 8;
inline bool Lane::has_right_boundary() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Lane::set_has_right_boundary() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Lane::clear_has_right_boundary() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Lane::clear_right_boundary() {
  if (right_boundary_ != NULL) right_boundary_->::trunk::hadmap::LaneBoundary::Clear();
  clear_has_right_boundary();
}
inline const ::trunk::hadmap::LaneBoundary& Lane::right_boundary() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Lane.right_boundary)
  return right_boundary_ != NULL ? *right_boundary_ : *default_instance_->right_boundary_;
}
inline ::trunk::hadmap::LaneBoundary* Lane::mutable_right_boundary() {
  set_has_right_boundary();
  if (right_boundary_ == NULL) right_boundary_ = new ::trunk::hadmap::LaneBoundary;
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.Lane.right_boundary)
  return right_boundary_;
}
inline ::trunk::hadmap::LaneBoundary* Lane::release_right_boundary() {
  clear_has_right_boundary();
  ::trunk::hadmap::LaneBoundary* temp = right_boundary_;
  right_boundary_ = NULL;
  return temp;
}
inline void Lane::set_allocated_right_boundary(::trunk::hadmap::LaneBoundary* right_boundary) {
  delete right_boundary_;
  right_boundary_ = right_boundary;
  if (right_boundary) {
    set_has_right_boundary();
  } else {
    clear_has_right_boundary();
  }
  // @@protoc_insertion_point(field_set_allocated:trunk.hadmap.Lane.right_boundary)
}

// optional double speed_limit = 9;
inline bool Lane::has_speed_limit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Lane::set_has_speed_limit() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Lane::clear_has_speed_limit() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Lane::clear_speed_limit() {
  speed_limit_ = 0;
  clear_has_speed_limit();
}
inline double Lane::speed_limit() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Lane.speed_limit)
  return speed_limit_;
}
inline void Lane::set_speed_limit(double value) {
  set_has_speed_limit();
  speed_limit_ = value;
  // @@protoc_insertion_point(field_set:trunk.hadmap.Lane.speed_limit)
}

// optional double length = 10;
inline bool Lane::has_length() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Lane::set_has_length() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Lane::clear_has_length() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Lane::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double Lane::length() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Lane.length)
  return length_;
}
inline void Lane::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:trunk.hadmap.Lane.length)
}

// repeated .trunk.hadmap.Id overlap_id = 11;
inline int Lane::overlap_id_size() const {
  return overlap_id_.size();
}
inline void Lane::clear_overlap_id() {
  overlap_id_.Clear();
}
inline const ::trunk::hadmap::Id& Lane::overlap_id(int index) const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Lane.overlap_id)
  return overlap_id_.Get(index);
}
inline ::trunk::hadmap::Id* Lane::mutable_overlap_id(int index) {
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.Lane.overlap_id)
  return overlap_id_.Mutable(index);
}
inline ::trunk::hadmap::Id* Lane::add_overlap_id() {
  // @@protoc_insertion_point(field_add:trunk.hadmap.Lane.overlap_id)
  return overlap_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Id >&
Lane::overlap_id() const {
  // @@protoc_insertion_point(field_list:trunk.hadmap.Lane.overlap_id)
  return overlap_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Id >*
Lane::mutable_overlap_id() {
  // @@protoc_insertion_point(field_mutable_list:trunk.hadmap.Lane.overlap_id)
  return &overlap_id_;
}

// optional .trunk.hadmap.Lane.LaneType type = 12;
inline bool Lane::has_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Lane::set_has_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Lane::clear_has_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Lane::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::trunk::hadmap::Lane_LaneType Lane::type() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Lane.type)
  return static_cast< ::trunk::hadmap::Lane_LaneType >(type_);
}
inline void Lane::set_type(::trunk::hadmap::Lane_LaneType value) {
  assert(::trunk::hadmap::Lane_LaneType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:trunk.hadmap.Lane.type)
}

// optional .trunk.hadmap.Lane.LaneTurn turn = 13;
inline bool Lane::has_turn() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Lane::set_has_turn() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Lane::clear_has_turn() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Lane::clear_turn() {
  turn_ = 0;
  clear_has_turn();
}
inline ::trunk::hadmap::Lane_LaneTurn Lane::turn() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Lane.turn)
  return static_cast< ::trunk::hadmap::Lane_LaneTurn >(turn_);
}
inline void Lane::set_turn(::trunk::hadmap::Lane_LaneTurn value) {
  assert(::trunk::hadmap::Lane_LaneTurn_IsValid(value));
  set_has_turn();
  turn_ = value;
  // @@protoc_insertion_point(field_set:trunk.hadmap.Lane.turn)
}

// optional .trunk.hadmap.Id junction_id = 14;
inline bool Lane::has_junction_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Lane::set_has_junction_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Lane::clear_has_junction_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Lane::clear_junction_id() {
  if (junction_id_ != NULL) junction_id_->::trunk::hadmap::Id::Clear();
  clear_has_junction_id();
}
inline const ::trunk::hadmap::Id& Lane::junction_id() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Lane.junction_id)
  return junction_id_ != NULL ? *junction_id_ : *default_instance_->junction_id_;
}
inline ::trunk::hadmap::Id* Lane::mutable_junction_id() {
  set_has_junction_id();
  if (junction_id_ == NULL) junction_id_ = new ::trunk::hadmap::Id;
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.Lane.junction_id)
  return junction_id_;
}
inline ::trunk::hadmap::Id* Lane::release_junction_id() {
  clear_has_junction_id();
  ::trunk::hadmap::Id* temp = junction_id_;
  junction_id_ = NULL;
  return temp;
}
inline void Lane::set_allocated_junction_id(::trunk::hadmap::Id* junction_id) {
  delete junction_id_;
  junction_id_ = junction_id;
  if (junction_id) {
    set_has_junction_id();
  } else {
    clear_has_junction_id();
  }
  // @@protoc_insertion_point(field_set_allocated:trunk.hadmap.Lane.junction_id)
}

// optional .trunk.hadmap.Id left_neighbor_lane_id = 15;
inline bool Lane::has_left_neighbor_lane_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Lane::set_has_left_neighbor_lane_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Lane::clear_has_left_neighbor_lane_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Lane::clear_left_neighbor_lane_id() {
  if (left_neighbor_lane_id_ != NULL) left_neighbor_lane_id_->::trunk::hadmap::Id::Clear();
  clear_has_left_neighbor_lane_id();
}
inline const ::trunk::hadmap::Id& Lane::left_neighbor_lane_id() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Lane.left_neighbor_lane_id)
  return left_neighbor_lane_id_ != NULL ? *left_neighbor_lane_id_ : *default_instance_->left_neighbor_lane_id_;
}
inline ::trunk::hadmap::Id* Lane::mutable_left_neighbor_lane_id() {
  set_has_left_neighbor_lane_id();
  if (left_neighbor_lane_id_ == NULL) left_neighbor_lane_id_ = new ::trunk::hadmap::Id;
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.Lane.left_neighbor_lane_id)
  return left_neighbor_lane_id_;
}
inline ::trunk::hadmap::Id* Lane::release_left_neighbor_lane_id() {
  clear_has_left_neighbor_lane_id();
  ::trunk::hadmap::Id* temp = left_neighbor_lane_id_;
  left_neighbor_lane_id_ = NULL;
  return temp;
}
inline void Lane::set_allocated_left_neighbor_lane_id(::trunk::hadmap::Id* left_neighbor_lane_id) {
  delete left_neighbor_lane_id_;
  left_neighbor_lane_id_ = left_neighbor_lane_id;
  if (left_neighbor_lane_id) {
    set_has_left_neighbor_lane_id();
  } else {
    clear_has_left_neighbor_lane_id();
  }
  // @@protoc_insertion_point(field_set_allocated:trunk.hadmap.Lane.left_neighbor_lane_id)
}

// optional .trunk.hadmap.Id right_neighbor_lane_id = 16;
inline bool Lane::has_right_neighbor_lane_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Lane::set_has_right_neighbor_lane_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Lane::clear_has_right_neighbor_lane_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Lane::clear_right_neighbor_lane_id() {
  if (right_neighbor_lane_id_ != NULL) right_neighbor_lane_id_->::trunk::hadmap::Id::Clear();
  clear_has_right_neighbor_lane_id();
}
inline const ::trunk::hadmap::Id& Lane::right_neighbor_lane_id() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Lane.right_neighbor_lane_id)
  return right_neighbor_lane_id_ != NULL ? *right_neighbor_lane_id_ : *default_instance_->right_neighbor_lane_id_;
}
inline ::trunk::hadmap::Id* Lane::mutable_right_neighbor_lane_id() {
  set_has_right_neighbor_lane_id();
  if (right_neighbor_lane_id_ == NULL) right_neighbor_lane_id_ = new ::trunk::hadmap::Id;
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.Lane.right_neighbor_lane_id)
  return right_neighbor_lane_id_;
}
inline ::trunk::hadmap::Id* Lane::release_right_neighbor_lane_id() {
  clear_has_right_neighbor_lane_id();
  ::trunk::hadmap::Id* temp = right_neighbor_lane_id_;
  right_neighbor_lane_id_ = NULL;
  return temp;
}
inline void Lane::set_allocated_right_neighbor_lane_id(::trunk::hadmap::Id* right_neighbor_lane_id) {
  delete right_neighbor_lane_id_;
  right_neighbor_lane_id_ = right_neighbor_lane_id;
  if (right_neighbor_lane_id) {
    set_has_right_neighbor_lane_id();
  } else {
    clear_has_right_neighbor_lane_id();
  }
  // @@protoc_insertion_point(field_set_allocated:trunk.hadmap.Lane.right_neighbor_lane_id)
}

// optional int32 resign_id = 17;
inline bool Lane::has_resign_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Lane::set_has_resign_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Lane::clear_has_resign_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Lane::clear_resign_id() {
  resign_id_ = 0;
  clear_has_resign_id();
}
inline ::google::protobuf::int32 Lane::resign_id() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Lane.resign_id)
  return resign_id_;
}
inline void Lane::set_resign_id(::google::protobuf::int32 value) {
  set_has_resign_id();
  resign_id_ = value;
  // @@protoc_insertion_point(field_set:trunk.hadmap.Lane.resign_id)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hadmap
}  // namespace trunk

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::trunk::hadmap::LaneBoundaryType_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trunk::hadmap::LaneBoundaryType_Type>() {
  return ::trunk::hadmap::LaneBoundaryType_Type_descriptor();
}
template <> struct is_proto_enum< ::trunk::hadmap::Lane_LaneType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trunk::hadmap::Lane_LaneType>() {
  return ::trunk::hadmap::Lane_LaneType_descriptor();
}
template <> struct is_proto_enum< ::trunk::hadmap::Lane_LaneTurn> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trunk::hadmap::Lane_LaneTurn>() {
  return ::trunk::hadmap::Lane_LaneTurn_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fmap_5flane_2eproto__INCLUDED
