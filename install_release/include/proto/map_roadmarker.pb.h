// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/map_roadmarker.proto

#ifndef PROTOBUF_proto_2fmap_5froadmarker_2eproto__INCLUDED
#define PROTOBUF_proto_2fmap_5froadmarker_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/map_id.pb.h"
#include "proto/map_geometry.pb.h"
// @@protoc_insertion_point(includes)

namespace trunk {
namespace hadmap {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2fmap_5froadmarker_2eproto();
void protobuf_AssignDesc_proto_2fmap_5froadmarker_2eproto();
void protobuf_ShutdownFile_proto_2fmap_5froadmarker_2eproto();

class RoadMarker;

enum RoadMarker_MarkerType {
  RoadMarker_MarkerType_NO_TURN = 0,
  RoadMarker_MarkerType_LEFT_TURN = 1,
  RoadMarker_MarkerType_RIGHT_TURN = 2,
  RoadMarker_MarkerType_U_TURN = 3
};
bool RoadMarker_MarkerType_IsValid(int value);
const RoadMarker_MarkerType RoadMarker_MarkerType_MarkerType_MIN = RoadMarker_MarkerType_NO_TURN;
const RoadMarker_MarkerType RoadMarker_MarkerType_MarkerType_MAX = RoadMarker_MarkerType_U_TURN;
const int RoadMarker_MarkerType_MarkerType_ARRAYSIZE = RoadMarker_MarkerType_MarkerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoadMarker_MarkerType_descriptor();
inline const ::std::string& RoadMarker_MarkerType_Name(RoadMarker_MarkerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoadMarker_MarkerType_descriptor(), value);
}
inline bool RoadMarker_MarkerType_Parse(
    const ::std::string& name, RoadMarker_MarkerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoadMarker_MarkerType>(
    RoadMarker_MarkerType_descriptor(), name, value);
}
// ===================================================================

class RoadMarker : public ::google::protobuf::Message {
 public:
  RoadMarker();
  virtual ~RoadMarker();

  RoadMarker(const RoadMarker& from);

  inline RoadMarker& operator=(const RoadMarker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoadMarker& default_instance();

  void Swap(RoadMarker* other);

  // implements Message ----------------------------------------------

  RoadMarker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoadMarker& from);
  void MergeFrom(const RoadMarker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RoadMarker_MarkerType MarkerType;
  static const MarkerType NO_TURN = RoadMarker_MarkerType_NO_TURN;
  static const MarkerType LEFT_TURN = RoadMarker_MarkerType_LEFT_TURN;
  static const MarkerType RIGHT_TURN = RoadMarker_MarkerType_RIGHT_TURN;
  static const MarkerType U_TURN = RoadMarker_MarkerType_U_TURN;
  static inline bool MarkerType_IsValid(int value) {
    return RoadMarker_MarkerType_IsValid(value);
  }
  static const MarkerType MarkerType_MIN =
    RoadMarker_MarkerType_MarkerType_MIN;
  static const MarkerType MarkerType_MAX =
    RoadMarker_MarkerType_MarkerType_MAX;
  static const int MarkerType_ARRAYSIZE =
    RoadMarker_MarkerType_MarkerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MarkerType_descriptor() {
    return RoadMarker_MarkerType_descriptor();
  }
  static inline const ::std::string& MarkerType_Name(MarkerType value) {
    return RoadMarker_MarkerType_Name(value);
  }
  static inline bool MarkerType_Parse(const ::std::string& name,
      MarkerType* value) {
    return RoadMarker_MarkerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .trunk.hadmap.Id id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::trunk::hadmap::Id& id() const;
  inline ::trunk::hadmap::Id* mutable_id();
  inline ::trunk::hadmap::Id* release_id();
  inline void set_allocated_id(::trunk::hadmap::Id* id);

  // optional .trunk.hadmap.RoadMarker.MarkerType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::trunk::hadmap::RoadMarker_MarkerType type() const;
  inline void set_type(::trunk::hadmap::RoadMarker_MarkerType value);

  // optional .trunk.hadmap.Polygon polygon = 3;
  inline bool has_polygon() const;
  inline void clear_polygon();
  static const int kPolygonFieldNumber = 3;
  inline const ::trunk::hadmap::Polygon& polygon() const;
  inline ::trunk::hadmap::Polygon* mutable_polygon();
  inline ::trunk::hadmap::Polygon* release_polygon();
  inline void set_allocated_polygon(::trunk::hadmap::Polygon* polygon);

  // repeated .trunk.hadmap.Id overlap_id = 4;
  inline int overlap_id_size() const;
  inline void clear_overlap_id();
  static const int kOverlapIdFieldNumber = 4;
  inline const ::trunk::hadmap::Id& overlap_id(int index) const;
  inline ::trunk::hadmap::Id* mutable_overlap_id(int index);
  inline ::trunk::hadmap::Id* add_overlap_id();
  inline const ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Id >&
      overlap_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Id >*
      mutable_overlap_id();

  // @@protoc_insertion_point(class_scope:trunk.hadmap.RoadMarker)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_polygon();
  inline void clear_has_polygon();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::trunk::hadmap::Id* id_;
  ::trunk::hadmap::Polygon* polygon_;
  ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Id > overlap_id_;
  int type_;
  friend void  protobuf_AddDesc_proto_2fmap_5froadmarker_2eproto();
  friend void protobuf_AssignDesc_proto_2fmap_5froadmarker_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmap_5froadmarker_2eproto();

  void InitAsDefaultInstance();
  static RoadMarker* default_instance_;
};
// ===================================================================


// ===================================================================

// RoadMarker

// optional .trunk.hadmap.Id id = 1;
inline bool RoadMarker::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoadMarker::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoadMarker::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoadMarker::clear_id() {
  if (id_ != NULL) id_->::trunk::hadmap::Id::Clear();
  clear_has_id();
}
inline const ::trunk::hadmap::Id& RoadMarker::id() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.RoadMarker.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::trunk::hadmap::Id* RoadMarker::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::trunk::hadmap::Id;
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.RoadMarker.id)
  return id_;
}
inline ::trunk::hadmap::Id* RoadMarker::release_id() {
  clear_has_id();
  ::trunk::hadmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void RoadMarker::set_allocated_id(::trunk::hadmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:trunk.hadmap.RoadMarker.id)
}

// optional .trunk.hadmap.RoadMarker.MarkerType type = 2;
inline bool RoadMarker::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoadMarker::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoadMarker::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoadMarker::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::trunk::hadmap::RoadMarker_MarkerType RoadMarker::type() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.RoadMarker.type)
  return static_cast< ::trunk::hadmap::RoadMarker_MarkerType >(type_);
}
inline void RoadMarker::set_type(::trunk::hadmap::RoadMarker_MarkerType value) {
  assert(::trunk::hadmap::RoadMarker_MarkerType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:trunk.hadmap.RoadMarker.type)
}

// optional .trunk.hadmap.Polygon polygon = 3;
inline bool RoadMarker::has_polygon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoadMarker::set_has_polygon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoadMarker::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoadMarker::clear_polygon() {
  if (polygon_ != NULL) polygon_->::trunk::hadmap::Polygon::Clear();
  clear_has_polygon();
}
inline const ::trunk::hadmap::Polygon& RoadMarker::polygon() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.RoadMarker.polygon)
  return polygon_ != NULL ? *polygon_ : *default_instance_->polygon_;
}
inline ::trunk::hadmap::Polygon* RoadMarker::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) polygon_ = new ::trunk::hadmap::Polygon;
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.RoadMarker.polygon)
  return polygon_;
}
inline ::trunk::hadmap::Polygon* RoadMarker::release_polygon() {
  clear_has_polygon();
  ::trunk::hadmap::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
inline void RoadMarker::set_allocated_polygon(::trunk::hadmap::Polygon* polygon) {
  delete polygon_;
  polygon_ = polygon;
  if (polygon) {
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  // @@protoc_insertion_point(field_set_allocated:trunk.hadmap.RoadMarker.polygon)
}

// repeated .trunk.hadmap.Id overlap_id = 4;
inline int RoadMarker::overlap_id_size() const {
  return overlap_id_.size();
}
inline void RoadMarker::clear_overlap_id() {
  overlap_id_.Clear();
}
inline const ::trunk::hadmap::Id& RoadMarker::overlap_id(int index) const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.RoadMarker.overlap_id)
  return overlap_id_.Get(index);
}
inline ::trunk::hadmap::Id* RoadMarker::mutable_overlap_id(int index) {
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.RoadMarker.overlap_id)
  return overlap_id_.Mutable(index);
}
inline ::trunk::hadmap::Id* RoadMarker::add_overlap_id() {
  // @@protoc_insertion_point(field_add:trunk.hadmap.RoadMarker.overlap_id)
  return overlap_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Id >&
RoadMarker::overlap_id() const {
  // @@protoc_insertion_point(field_list:trunk.hadmap.RoadMarker.overlap_id)
  return overlap_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Id >*
RoadMarker::mutable_overlap_id() {
  // @@protoc_insertion_point(field_mutable_list:trunk.hadmap.RoadMarker.overlap_id)
  return &overlap_id_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hadmap
}  // namespace trunk

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::trunk::hadmap::RoadMarker_MarkerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trunk::hadmap::RoadMarker_MarkerType>() {
  return ::trunk::hadmap::RoadMarker_MarkerType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fmap_5froadmarker_2eproto__INCLUDED
