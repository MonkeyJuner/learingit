// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/map_signal.proto

#ifndef PROTOBUF_proto_2fmap_5fsignal_2eproto__INCLUDED
#define PROTOBUF_proto_2fmap_5fsignal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/map_geometry.pb.h"
#include "proto/map_id.pb.h"
// @@protoc_insertion_point(includes)

namespace trunk {
namespace hadmap {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2fmap_5fsignal_2eproto();
void protobuf_AssignDesc_proto_2fmap_5fsignal_2eproto();
void protobuf_ShutdownFile_proto_2fmap_5fsignal_2eproto();

class Subsignal;
class Signal;

enum Subsignal_Type {
  Subsignal_Type_UNKNOWN = 0,
  Subsignal_Type_CIRCLE = 1,
  Subsignal_Type_ARROW_LEFT = 2,
  Subsignal_Type_ARROW_FORWARD = 3,
  Subsignal_Type_ARROW_RIGHT = 4,
  Subsignal_Type_ARROW_LEFT_AND_FORWARD = 5,
  Subsignal_Type_ARROW_RIGHT_AND_FORWARD = 6,
  Subsignal_Type_ARROW_U_TURN = 7
};
bool Subsignal_Type_IsValid(int value);
const Subsignal_Type Subsignal_Type_Type_MIN = Subsignal_Type_UNKNOWN;
const Subsignal_Type Subsignal_Type_Type_MAX = Subsignal_Type_ARROW_U_TURN;
const int Subsignal_Type_Type_ARRAYSIZE = Subsignal_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Subsignal_Type_descriptor();
inline const ::std::string& Subsignal_Type_Name(Subsignal_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Subsignal_Type_descriptor(), value);
}
inline bool Subsignal_Type_Parse(
    const ::std::string& name, Subsignal_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Subsignal_Type>(
    Subsignal_Type_descriptor(), name, value);
}
enum Signal_Type {
  Signal_Type_UNKNOWN = 0,
  Signal_Type_MIX_2_HORIZONTAL = 1,
  Signal_Type_MIX_2_VERTICAL = 2,
  Signal_Type_MIX_3_HORIZONTAL = 3,
  Signal_Type_MIX_3_VERTICAL = 4,
  Signal_Type_SINGLE = 5
};
bool Signal_Type_IsValid(int value);
const Signal_Type Signal_Type_Type_MIN = Signal_Type_UNKNOWN;
const Signal_Type Signal_Type_Type_MAX = Signal_Type_SINGLE;
const int Signal_Type_Type_ARRAYSIZE = Signal_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Signal_Type_descriptor();
inline const ::std::string& Signal_Type_Name(Signal_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Signal_Type_descriptor(), value);
}
inline bool Signal_Type_Parse(
    const ::std::string& name, Signal_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Signal_Type>(
    Signal_Type_descriptor(), name, value);
}
// ===================================================================

class Subsignal : public ::google::protobuf::Message {
 public:
  Subsignal();
  virtual ~Subsignal();

  Subsignal(const Subsignal& from);

  inline Subsignal& operator=(const Subsignal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Subsignal& default_instance();

  void Swap(Subsignal* other);

  // implements Message ----------------------------------------------

  Subsignal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Subsignal& from);
  void MergeFrom(const Subsignal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Subsignal_Type Type;
  static const Type UNKNOWN = Subsignal_Type_UNKNOWN;
  static const Type CIRCLE = Subsignal_Type_CIRCLE;
  static const Type ARROW_LEFT = Subsignal_Type_ARROW_LEFT;
  static const Type ARROW_FORWARD = Subsignal_Type_ARROW_FORWARD;
  static const Type ARROW_RIGHT = Subsignal_Type_ARROW_RIGHT;
  static const Type ARROW_LEFT_AND_FORWARD = Subsignal_Type_ARROW_LEFT_AND_FORWARD;
  static const Type ARROW_RIGHT_AND_FORWARD = Subsignal_Type_ARROW_RIGHT_AND_FORWARD;
  static const Type ARROW_U_TURN = Subsignal_Type_ARROW_U_TURN;
  static inline bool Type_IsValid(int value) {
    return Subsignal_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Subsignal_Type_Type_MIN;
  static const Type Type_MAX =
    Subsignal_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Subsignal_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Subsignal_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Subsignal_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Subsignal_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .trunk.hadmap.Id id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::trunk::hadmap::Id& id() const;
  inline ::trunk::hadmap::Id* mutable_id();
  inline ::trunk::hadmap::Id* release_id();
  inline void set_allocated_id(::trunk::hadmap::Id* id);

  // optional .trunk.hadmap.Subsignal.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::trunk::hadmap::Subsignal_Type type() const;
  inline void set_type(::trunk::hadmap::Subsignal_Type value);

  // optional .trunk.hadmap.Point3D location = 3;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 3;
  inline const ::trunk::hadmap::Point3D& location() const;
  inline ::trunk::hadmap::Point3D* mutable_location();
  inline ::trunk::hadmap::Point3D* release_location();
  inline void set_allocated_location(::trunk::hadmap::Point3D* location);

  // @@protoc_insertion_point(class_scope:trunk.hadmap.Subsignal)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_location();
  inline void clear_has_location();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::trunk::hadmap::Id* id_;
  ::trunk::hadmap::Point3D* location_;
  int type_;
  friend void  protobuf_AddDesc_proto_2fmap_5fsignal_2eproto();
  friend void protobuf_AssignDesc_proto_2fmap_5fsignal_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmap_5fsignal_2eproto();

  void InitAsDefaultInstance();
  static Subsignal* default_instance_;
};
// -------------------------------------------------------------------

class Signal : public ::google::protobuf::Message {
 public:
  Signal();
  virtual ~Signal();

  Signal(const Signal& from);

  inline Signal& operator=(const Signal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Signal& default_instance();

  void Swap(Signal* other);

  // implements Message ----------------------------------------------

  Signal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Signal& from);
  void MergeFrom(const Signal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Signal_Type Type;
  static const Type UNKNOWN = Signal_Type_UNKNOWN;
  static const Type MIX_2_HORIZONTAL = Signal_Type_MIX_2_HORIZONTAL;
  static const Type MIX_2_VERTICAL = Signal_Type_MIX_2_VERTICAL;
  static const Type MIX_3_HORIZONTAL = Signal_Type_MIX_3_HORIZONTAL;
  static const Type MIX_3_VERTICAL = Signal_Type_MIX_3_VERTICAL;
  static const Type SINGLE = Signal_Type_SINGLE;
  static inline bool Type_IsValid(int value) {
    return Signal_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Signal_Type_Type_MIN;
  static const Type Type_MAX =
    Signal_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Signal_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Signal_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Signal_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Signal_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .trunk.hadmap.Id id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::trunk::hadmap::Id& id() const;
  inline ::trunk::hadmap::Id* mutable_id();
  inline ::trunk::hadmap::Id* release_id();
  inline void set_allocated_id(::trunk::hadmap::Id* id);

  // optional .trunk.hadmap.Polygon boundary = 2;
  inline bool has_boundary() const;
  inline void clear_boundary();
  static const int kBoundaryFieldNumber = 2;
  inline const ::trunk::hadmap::Polygon& boundary() const;
  inline ::trunk::hadmap::Polygon* mutable_boundary();
  inline ::trunk::hadmap::Polygon* release_boundary();
  inline void set_allocated_boundary(::trunk::hadmap::Polygon* boundary);

  // repeated .trunk.hadmap.Subsignal subsignal = 3;
  inline int subsignal_size() const;
  inline void clear_subsignal();
  static const int kSubsignalFieldNumber = 3;
  inline const ::trunk::hadmap::Subsignal& subsignal(int index) const;
  inline ::trunk::hadmap::Subsignal* mutable_subsignal(int index);
  inline ::trunk::hadmap::Subsignal* add_subsignal();
  inline const ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Subsignal >&
      subsignal() const;
  inline ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Subsignal >*
      mutable_subsignal();

  // repeated .trunk.hadmap.Id overlap_id = 4;
  inline int overlap_id_size() const;
  inline void clear_overlap_id();
  static const int kOverlapIdFieldNumber = 4;
  inline const ::trunk::hadmap::Id& overlap_id(int index) const;
  inline ::trunk::hadmap::Id* mutable_overlap_id(int index);
  inline ::trunk::hadmap::Id* add_overlap_id();
  inline const ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Id >&
      overlap_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Id >*
      mutable_overlap_id();

  // optional .trunk.hadmap.Signal.Type type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::trunk::hadmap::Signal_Type type() const;
  inline void set_type(::trunk::hadmap::Signal_Type value);

  // repeated .trunk.hadmap.Polygon stop_line = 6;
  inline int stop_line_size() const;
  inline void clear_stop_line();
  static const int kStopLineFieldNumber = 6;
  inline const ::trunk::hadmap::Polygon& stop_line(int index) const;
  inline ::trunk::hadmap::Polygon* mutable_stop_line(int index);
  inline ::trunk::hadmap::Polygon* add_stop_line();
  inline const ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Polygon >&
      stop_line() const;
  inline ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Polygon >*
      mutable_stop_line();

  // @@protoc_insertion_point(class_scope:trunk.hadmap.Signal)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_boundary();
  inline void clear_has_boundary();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::trunk::hadmap::Id* id_;
  ::trunk::hadmap::Polygon* boundary_;
  ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Subsignal > subsignal_;
  ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Id > overlap_id_;
  ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Polygon > stop_line_;
  int type_;
  friend void  protobuf_AddDesc_proto_2fmap_5fsignal_2eproto();
  friend void protobuf_AssignDesc_proto_2fmap_5fsignal_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmap_5fsignal_2eproto();

  void InitAsDefaultInstance();
  static Signal* default_instance_;
};
// ===================================================================


// ===================================================================

// Subsignal

// optional .trunk.hadmap.Id id = 1;
inline bool Subsignal::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Subsignal::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Subsignal::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Subsignal::clear_id() {
  if (id_ != NULL) id_->::trunk::hadmap::Id::Clear();
  clear_has_id();
}
inline const ::trunk::hadmap::Id& Subsignal::id() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Subsignal.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::trunk::hadmap::Id* Subsignal::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::trunk::hadmap::Id;
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.Subsignal.id)
  return id_;
}
inline ::trunk::hadmap::Id* Subsignal::release_id() {
  clear_has_id();
  ::trunk::hadmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Subsignal::set_allocated_id(::trunk::hadmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:trunk.hadmap.Subsignal.id)
}

// optional .trunk.hadmap.Subsignal.Type type = 2;
inline bool Subsignal::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Subsignal::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Subsignal::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Subsignal::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::trunk::hadmap::Subsignal_Type Subsignal::type() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Subsignal.type)
  return static_cast< ::trunk::hadmap::Subsignal_Type >(type_);
}
inline void Subsignal::set_type(::trunk::hadmap::Subsignal_Type value) {
  assert(::trunk::hadmap::Subsignal_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:trunk.hadmap.Subsignal.type)
}

// optional .trunk.hadmap.Point3D location = 3;
inline bool Subsignal::has_location() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Subsignal::set_has_location() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Subsignal::clear_has_location() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Subsignal::clear_location() {
  if (location_ != NULL) location_->::trunk::hadmap::Point3D::Clear();
  clear_has_location();
}
inline const ::trunk::hadmap::Point3D& Subsignal::location() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Subsignal.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
inline ::trunk::hadmap::Point3D* Subsignal::mutable_location() {
  set_has_location();
  if (location_ == NULL) location_ = new ::trunk::hadmap::Point3D;
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.Subsignal.location)
  return location_;
}
inline ::trunk::hadmap::Point3D* Subsignal::release_location() {
  clear_has_location();
  ::trunk::hadmap::Point3D* temp = location_;
  location_ = NULL;
  return temp;
}
inline void Subsignal::set_allocated_location(::trunk::hadmap::Point3D* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:trunk.hadmap.Subsignal.location)
}

// -------------------------------------------------------------------

// Signal

// optional .trunk.hadmap.Id id = 1;
inline bool Signal::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Signal::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Signal::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Signal::clear_id() {
  if (id_ != NULL) id_->::trunk::hadmap::Id::Clear();
  clear_has_id();
}
inline const ::trunk::hadmap::Id& Signal::id() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Signal.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::trunk::hadmap::Id* Signal::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::trunk::hadmap::Id;
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.Signal.id)
  return id_;
}
inline ::trunk::hadmap::Id* Signal::release_id() {
  clear_has_id();
  ::trunk::hadmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Signal::set_allocated_id(::trunk::hadmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:trunk.hadmap.Signal.id)
}

// optional .trunk.hadmap.Polygon boundary = 2;
inline bool Signal::has_boundary() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Signal::set_has_boundary() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Signal::clear_has_boundary() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Signal::clear_boundary() {
  if (boundary_ != NULL) boundary_->::trunk::hadmap::Polygon::Clear();
  clear_has_boundary();
}
inline const ::trunk::hadmap::Polygon& Signal::boundary() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Signal.boundary)
  return boundary_ != NULL ? *boundary_ : *default_instance_->boundary_;
}
inline ::trunk::hadmap::Polygon* Signal::mutable_boundary() {
  set_has_boundary();
  if (boundary_ == NULL) boundary_ = new ::trunk::hadmap::Polygon;
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.Signal.boundary)
  return boundary_;
}
inline ::trunk::hadmap::Polygon* Signal::release_boundary() {
  clear_has_boundary();
  ::trunk::hadmap::Polygon* temp = boundary_;
  boundary_ = NULL;
  return temp;
}
inline void Signal::set_allocated_boundary(::trunk::hadmap::Polygon* boundary) {
  delete boundary_;
  boundary_ = boundary;
  if (boundary) {
    set_has_boundary();
  } else {
    clear_has_boundary();
  }
  // @@protoc_insertion_point(field_set_allocated:trunk.hadmap.Signal.boundary)
}

// repeated .trunk.hadmap.Subsignal subsignal = 3;
inline int Signal::subsignal_size() const {
  return subsignal_.size();
}
inline void Signal::clear_subsignal() {
  subsignal_.Clear();
}
inline const ::trunk::hadmap::Subsignal& Signal::subsignal(int index) const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Signal.subsignal)
  return subsignal_.Get(index);
}
inline ::trunk::hadmap::Subsignal* Signal::mutable_subsignal(int index) {
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.Signal.subsignal)
  return subsignal_.Mutable(index);
}
inline ::trunk::hadmap::Subsignal* Signal::add_subsignal() {
  // @@protoc_insertion_point(field_add:trunk.hadmap.Signal.subsignal)
  return subsignal_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Subsignal >&
Signal::subsignal() const {
  // @@protoc_insertion_point(field_list:trunk.hadmap.Signal.subsignal)
  return subsignal_;
}
inline ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Subsignal >*
Signal::mutable_subsignal() {
  // @@protoc_insertion_point(field_mutable_list:trunk.hadmap.Signal.subsignal)
  return &subsignal_;
}

// repeated .trunk.hadmap.Id overlap_id = 4;
inline int Signal::overlap_id_size() const {
  return overlap_id_.size();
}
inline void Signal::clear_overlap_id() {
  overlap_id_.Clear();
}
inline const ::trunk::hadmap::Id& Signal::overlap_id(int index) const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Signal.overlap_id)
  return overlap_id_.Get(index);
}
inline ::trunk::hadmap::Id* Signal::mutable_overlap_id(int index) {
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.Signal.overlap_id)
  return overlap_id_.Mutable(index);
}
inline ::trunk::hadmap::Id* Signal::add_overlap_id() {
  // @@protoc_insertion_point(field_add:trunk.hadmap.Signal.overlap_id)
  return overlap_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Id >&
Signal::overlap_id() const {
  // @@protoc_insertion_point(field_list:trunk.hadmap.Signal.overlap_id)
  return overlap_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Id >*
Signal::mutable_overlap_id() {
  // @@protoc_insertion_point(field_mutable_list:trunk.hadmap.Signal.overlap_id)
  return &overlap_id_;
}

// optional .trunk.hadmap.Signal.Type type = 5;
inline bool Signal::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Signal::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Signal::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Signal::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::trunk::hadmap::Signal_Type Signal::type() const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Signal.type)
  return static_cast< ::trunk::hadmap::Signal_Type >(type_);
}
inline void Signal::set_type(::trunk::hadmap::Signal_Type value) {
  assert(::trunk::hadmap::Signal_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:trunk.hadmap.Signal.type)
}

// repeated .trunk.hadmap.Polygon stop_line = 6;
inline int Signal::stop_line_size() const {
  return stop_line_.size();
}
inline void Signal::clear_stop_line() {
  stop_line_.Clear();
}
inline const ::trunk::hadmap::Polygon& Signal::stop_line(int index) const {
  // @@protoc_insertion_point(field_get:trunk.hadmap.Signal.stop_line)
  return stop_line_.Get(index);
}
inline ::trunk::hadmap::Polygon* Signal::mutable_stop_line(int index) {
  // @@protoc_insertion_point(field_mutable:trunk.hadmap.Signal.stop_line)
  return stop_line_.Mutable(index);
}
inline ::trunk::hadmap::Polygon* Signal::add_stop_line() {
  // @@protoc_insertion_point(field_add:trunk.hadmap.Signal.stop_line)
  return stop_line_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Polygon >&
Signal::stop_line() const {
  // @@protoc_insertion_point(field_list:trunk.hadmap.Signal.stop_line)
  return stop_line_;
}
inline ::google::protobuf::RepeatedPtrField< ::trunk::hadmap::Polygon >*
Signal::mutable_stop_line() {
  // @@protoc_insertion_point(field_mutable_list:trunk.hadmap.Signal.stop_line)
  return &stop_line_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hadmap
}  // namespace trunk

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::trunk::hadmap::Subsignal_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trunk::hadmap::Subsignal_Type>() {
  return ::trunk::hadmap::Subsignal_Type_descriptor();
}
template <> struct is_proto_enum< ::trunk::hadmap::Signal_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trunk::hadmap::Signal_Type>() {
  return ::trunk::hadmap::Signal_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fmap_5fsignal_2eproto__INCLUDED
