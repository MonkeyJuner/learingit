// Generated by gencpp from file hadmap_msgs/LocalMapPoint.msg
// DO NOT EDIT!


#ifndef HADMAP_MSGS_MESSAGE_LOCALMAPPOINT_H
#define HADMAP_MSGS_MESSAGE_LOCALMAPPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace hadmap_msgs
{
template <class ContainerAllocator>
struct LocalMapPoint_
{
  typedef LocalMapPoint_<ContainerAllocator> Type;

  LocalMapPoint_()
    : point()
    , heading(0.0)
    , type(0)
    , speed_limit(0.0)  {
    }
  LocalMapPoint_(const ContainerAllocator& _alloc)
    : point(_alloc)
    , heading(0.0)
    , type(0)
    , speed_limit(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _point_type;
  _point_type point;

   typedef float _heading_type;
  _heading_type heading;

   typedef uint8_t _type_type;
  _type_type type;

   typedef float _speed_limit_type;
  _speed_limit_type speed_limit;



  enum {
    TYPE_CROSS = 0u,
    TYPE_NOT_CROSS = 1u,
  };


  typedef boost::shared_ptr< ::hadmap_msgs::LocalMapPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hadmap_msgs::LocalMapPoint_<ContainerAllocator> const> ConstPtr;

}; // struct LocalMapPoint_

typedef ::hadmap_msgs::LocalMapPoint_<std::allocator<void> > LocalMapPoint;

typedef boost::shared_ptr< ::hadmap_msgs::LocalMapPoint > LocalMapPointPtr;
typedef boost::shared_ptr< ::hadmap_msgs::LocalMapPoint const> LocalMapPointConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hadmap_msgs::LocalMapPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hadmap_msgs::LocalMapPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hadmap_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'hadmap_msgs': ['/home/wuhaisheng/Workspace/catkin_integration/src/interfaces/ads_internal/ros/map/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hadmap_msgs::LocalMapPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hadmap_msgs::LocalMapPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hadmap_msgs::LocalMapPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hadmap_msgs::LocalMapPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hadmap_msgs::LocalMapPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hadmap_msgs::LocalMapPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hadmap_msgs::LocalMapPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "44cd12dbc0c0b0aceac900ebfe326f30";
  }

  static const char* value(const ::hadmap_msgs::LocalMapPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x44cd12dbc0c0b0acULL;
  static const uint64_t static_value2 = 0xeac900ebfe326f30ULL;
};

template<class ContainerAllocator>
struct DataType< ::hadmap_msgs::LocalMapPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hadmap_msgs/LocalMapPoint";
  }

  static const char* value(const ::hadmap_msgs::LocalMapPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hadmap_msgs::LocalMapPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 TYPE_CROSS = 0\n\
uint8 TYPE_NOT_CROSS = 1\n\
\n\
# lane point localization\n\
geometry_msgs/Point point\n\
# heading angle\n\
float32 heading\n\
# now: cross or not\n\
uint8 type\n\
# speed limit\n\
float32 speed_limit\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::hadmap_msgs::LocalMapPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hadmap_msgs::LocalMapPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point);
      stream.next(m.heading);
      stream.next(m.type);
      stream.next(m.speed_limit);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LocalMapPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hadmap_msgs::LocalMapPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hadmap_msgs::LocalMapPoint_<ContainerAllocator>& v)
  {
    s << indent << "point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "speed_limit: ";
    Printer<float>::stream(s, indent + "  ", v.speed_limit);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HADMAP_MSGS_MESSAGE_LOCALMAPPOINT_H
