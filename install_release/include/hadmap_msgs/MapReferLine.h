// Generated by gencpp from file hadmap_msgs/MapReferLine.msg
// DO NOT EDIT!


#ifndef HADMAP_MSGS_MESSAGE_MAPREFERLINE_H
#define HADMAP_MSGS_MESSAGE_MAPREFERLINE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <hadmap_msgs/MapSplineCoeff.h>

namespace hadmap_msgs
{
template <class ContainerAllocator>
struct MapReferLine_
{
  typedef MapReferLine_<ContainerAllocator> Type;

  MapReferLine_()
    : start_point()
    , heading(0.0)
    , length(0.0)
    , spline_coeff()  {
    }
  MapReferLine_(const ContainerAllocator& _alloc)
    : start_point(_alloc)
    , heading(0.0)
    , length(0.0)
    , spline_coeff(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _start_point_type;
  _start_point_type start_point;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _length_type;
  _length_type length;

   typedef  ::hadmap_msgs::MapSplineCoeff_<ContainerAllocator>  _spline_coeff_type;
  _spline_coeff_type spline_coeff;





  typedef boost::shared_ptr< ::hadmap_msgs::MapReferLine_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hadmap_msgs::MapReferLine_<ContainerAllocator> const> ConstPtr;

}; // struct MapReferLine_

typedef ::hadmap_msgs::MapReferLine_<std::allocator<void> > MapReferLine;

typedef boost::shared_ptr< ::hadmap_msgs::MapReferLine > MapReferLinePtr;
typedef boost::shared_ptr< ::hadmap_msgs::MapReferLine const> MapReferLineConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hadmap_msgs::MapReferLine_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hadmap_msgs::MapReferLine_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hadmap_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'hadmap_msgs': ['/home/wuhaisheng/Workspace/catkin_integration/src/interfaces/ads_internal/ros/map/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hadmap_msgs::MapReferLine_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hadmap_msgs::MapReferLine_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hadmap_msgs::MapReferLine_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hadmap_msgs::MapReferLine_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hadmap_msgs::MapReferLine_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hadmap_msgs::MapReferLine_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hadmap_msgs::MapReferLine_<ContainerAllocator> >
{
  static const char* value()
  {
    return "34d3d1855a2eb9af60516c0b14a979dd";
  }

  static const char* value(const ::hadmap_msgs::MapReferLine_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x34d3d1855a2eb9afULL;
  static const uint64_t static_value2 = 0x60516c0b14a979ddULL;
};

template<class ContainerAllocator>
struct DataType< ::hadmap_msgs::MapReferLine_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hadmap_msgs/MapReferLine";
  }

  static const char* value(const ::hadmap_msgs::MapReferLine_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hadmap_msgs::MapReferLine_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
geometry_msgs/Point start_point\n\
float64 heading\n\
float64 length\n\
MapSplineCoeff spline_coeff\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: hadmap_msgs/MapSplineCoeff\n\
float64 start_offset\n\
uint8 degree\n\
uint8 dimension\n\
float64 scale\n\
float64[] spline_knots\n\
geometry_msgs/Point[] spline_points\n\
";
  }

  static const char* value(const ::hadmap_msgs::MapReferLine_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hadmap_msgs::MapReferLine_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_point);
      stream.next(m.heading);
      stream.next(m.length);
      stream.next(m.spline_coeff);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MapReferLine_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hadmap_msgs::MapReferLine_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hadmap_msgs::MapReferLine_<ContainerAllocator>& v)
  {
    s << indent << "start_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.start_point);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "spline_coeff: ";
    s << std::endl;
    Printer< ::hadmap_msgs::MapSplineCoeff_<ContainerAllocator> >::stream(s, indent + "  ", v.spline_coeff);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HADMAP_MSGS_MESSAGE_MAPREFERLINE_H
