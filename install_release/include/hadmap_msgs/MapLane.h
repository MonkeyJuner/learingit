// Generated by gencpp from file hadmap_msgs/MapLane.msg
// DO NOT EDIT!


#ifndef HADMAP_MSGS_MESSAGE_MAPLANE_H
#define HADMAP_MSGS_MESSAGE_MAPLANE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <hadmap_msgs/MapPolyCoeff.h>

namespace hadmap_msgs
{
template <class ContainerAllocator>
struct MapLane_
{
  typedef MapLane_<ContainerAllocator> Type;

  MapLane_()
    : lane_type(0)
    , poly_coeffs()
    , predecessor(0)
    , successor(0)
    , lane_residual_len(0.0)
    , speed_limit(0.0)  {
    }
  MapLane_(const ContainerAllocator& _alloc)
    : lane_type(0)
    , poly_coeffs(_alloc)
    , predecessor(0)
    , successor(0)
    , lane_residual_len(0.0)
    , speed_limit(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _lane_type_type;
  _lane_type_type lane_type;

   typedef std::vector< ::hadmap_msgs::MapPolyCoeff_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hadmap_msgs::MapPolyCoeff_<ContainerAllocator> >::other >  _poly_coeffs_type;
  _poly_coeffs_type poly_coeffs;

   typedef int16_t _predecessor_type;
  _predecessor_type predecessor;

   typedef int16_t _successor_type;
  _successor_type successor;

   typedef float _lane_residual_len_type;
  _lane_residual_len_type lane_residual_len;

   typedef float _speed_limit_type;
  _speed_limit_type speed_limit;





  typedef boost::shared_ptr< ::hadmap_msgs::MapLane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hadmap_msgs::MapLane_<ContainerAllocator> const> ConstPtr;

}; // struct MapLane_

typedef ::hadmap_msgs::MapLane_<std::allocator<void> > MapLane;

typedef boost::shared_ptr< ::hadmap_msgs::MapLane > MapLanePtr;
typedef boost::shared_ptr< ::hadmap_msgs::MapLane const> MapLaneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hadmap_msgs::MapLane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hadmap_msgs::MapLane_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hadmap_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'hadmap_msgs': ['/home/wuhaisheng/Workspace/catkin_integration/src/interfaces/ads_internal/ros/map/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hadmap_msgs::MapLane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hadmap_msgs::MapLane_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hadmap_msgs::MapLane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hadmap_msgs::MapLane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hadmap_msgs::MapLane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hadmap_msgs::MapLane_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hadmap_msgs::MapLane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1afa43e53ccebe2d6ea6280b4380157c";
  }

  static const char* value(const ::hadmap_msgs::MapLane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1afa43e53ccebe2dULL;
  static const uint64_t static_value2 = 0x6ea6280b4380157cULL;
};

template<class ContainerAllocator>
struct DataType< ::hadmap_msgs::MapLane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hadmap_msgs/MapLane";
  }

  static const char* value(const ::hadmap_msgs::MapLane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hadmap_msgs::MapLane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 lane_type\n\
\n\
MapPolyCoeff[] poly_coeffs\n\
\n\
int16 predecessor\n\
int16 successor\n\
\n\
float32 lane_residual_len\n\
float32 speed_limit\n\
\n\
================================================================================\n\
MSG: hadmap_msgs/MapPolyCoeff\n\
float64 offset\n\
float64[] poly_parameters\n\
";
  }

  static const char* value(const ::hadmap_msgs::MapLane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hadmap_msgs::MapLane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lane_type);
      stream.next(m.poly_coeffs);
      stream.next(m.predecessor);
      stream.next(m.successor);
      stream.next(m.lane_residual_len);
      stream.next(m.speed_limit);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MapLane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hadmap_msgs::MapLane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hadmap_msgs::MapLane_<ContainerAllocator>& v)
  {
    s << indent << "lane_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lane_type);
    s << indent << "poly_coeffs[]" << std::endl;
    for (size_t i = 0; i < v.poly_coeffs.size(); ++i)
    {
      s << indent << "  poly_coeffs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hadmap_msgs::MapPolyCoeff_<ContainerAllocator> >::stream(s, indent + "    ", v.poly_coeffs[i]);
    }
    s << indent << "predecessor: ";
    Printer<int16_t>::stream(s, indent + "  ", v.predecessor);
    s << indent << "successor: ";
    Printer<int16_t>::stream(s, indent + "  ", v.successor);
    s << indent << "lane_residual_len: ";
    Printer<float>::stream(s, indent + "  ", v.lane_residual_len);
    s << indent << "speed_limit: ";
    Printer<float>::stream(s, indent + "  ", v.speed_limit);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HADMAP_MSGS_MESSAGE_MAPLANE_H
