// Generated by gencpp from file hadmap_msgs/LocalMapLane.msg
// DO NOT EDIT!


#ifndef HADMAP_MSGS_MESSAGE_LOCALMAPLANE_H
#define HADMAP_MSGS_MESSAGE_LOCALMAPLANE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <hadmap_msgs/LocalMapPoint.h>
#include <hadmap_msgs/LocalMapPoint.h>
#include <hadmap_msgs/LocalMapPoint.h>

namespace hadmap_msgs
{
template <class ContainerAllocator>
struct LocalMapLane_
{
  typedef LocalMapLane_<ContainerAllocator> Type;

  LocalMapLane_()
    : id(0)
    , residual_len(0.0)
    , stopline_distance(0.0)
    , stopline()
    , center()
    , left()
    , right()  {
    }
  LocalMapLane_(const ContainerAllocator& _alloc)
    : id(0)
    , residual_len(0.0)
    , stopline_distance(0.0)
    , stopline(_alloc)
    , center(_alloc)
    , left(_alloc)
    , right(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef float _residual_len_type;
  _residual_len_type residual_len;

   typedef float _stopline_distance_type;
  _stopline_distance_type stopline_distance;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _stopline_type;
  _stopline_type stopline;

   typedef std::vector< ::hadmap_msgs::LocalMapPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hadmap_msgs::LocalMapPoint_<ContainerAllocator> >::other >  _center_type;
  _center_type center;

   typedef std::vector< ::hadmap_msgs::LocalMapPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hadmap_msgs::LocalMapPoint_<ContainerAllocator> >::other >  _left_type;
  _left_type left;

   typedef std::vector< ::hadmap_msgs::LocalMapPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hadmap_msgs::LocalMapPoint_<ContainerAllocator> >::other >  _right_type;
  _right_type right;





  typedef boost::shared_ptr< ::hadmap_msgs::LocalMapLane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hadmap_msgs::LocalMapLane_<ContainerAllocator> const> ConstPtr;

}; // struct LocalMapLane_

typedef ::hadmap_msgs::LocalMapLane_<std::allocator<void> > LocalMapLane;

typedef boost::shared_ptr< ::hadmap_msgs::LocalMapLane > LocalMapLanePtr;
typedef boost::shared_ptr< ::hadmap_msgs::LocalMapLane const> LocalMapLaneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hadmap_msgs::LocalMapLane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hadmap_msgs::LocalMapLane_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hadmap_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'hadmap_msgs': ['/home/wuhaisheng/Workspace/catkin_integration/src/interfaces/ads_internal/ros/map/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hadmap_msgs::LocalMapLane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hadmap_msgs::LocalMapLane_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hadmap_msgs::LocalMapLane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hadmap_msgs::LocalMapLane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hadmap_msgs::LocalMapLane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hadmap_msgs::LocalMapLane_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hadmap_msgs::LocalMapLane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f3a9c307847eb3878abedcf1188d3601";
  }

  static const char* value(const ::hadmap_msgs::LocalMapLane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf3a9c307847eb387ULL;
  static const uint64_t static_value2 = 0x8abedcf1188d3601ULL;
};

template<class ContainerAllocator>
struct DataType< ::hadmap_msgs::LocalMapLane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hadmap_msgs/LocalMapLane";
  }

  static const char* value(const ::hadmap_msgs::LocalMapLane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hadmap_msgs::LocalMapLane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# lane id\n\
int32 id\n\
# residual length\n\
float32 residual_len\n\
\n\
float32 stopline_distance\n\
geometry_msgs/Point stopline\n\
\n\
# central planning points\n\
LocalMapPoint[] center\n\
# left boundary\n\
LocalMapPoint[] left\n\
# right boundary\n\
LocalMapPoint[] right\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: hadmap_msgs/LocalMapPoint\n\
uint8 TYPE_CROSS = 0\n\
uint8 TYPE_NOT_CROSS = 1\n\
\n\
# lane point localization\n\
geometry_msgs/Point point\n\
# heading angle\n\
float32 heading\n\
# now: cross or not\n\
uint8 type\n\
# speed limit\n\
float32 speed_limit\n\
";
  }

  static const char* value(const ::hadmap_msgs::LocalMapLane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hadmap_msgs::LocalMapLane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.residual_len);
      stream.next(m.stopline_distance);
      stream.next(m.stopline);
      stream.next(m.center);
      stream.next(m.left);
      stream.next(m.right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LocalMapLane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hadmap_msgs::LocalMapLane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hadmap_msgs::LocalMapLane_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "residual_len: ";
    Printer<float>::stream(s, indent + "  ", v.residual_len);
    s << indent << "stopline_distance: ";
    Printer<float>::stream(s, indent + "  ", v.stopline_distance);
    s << indent << "stopline: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.stopline);
    s << indent << "center[]" << std::endl;
    for (size_t i = 0; i < v.center.size(); ++i)
    {
      s << indent << "  center[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hadmap_msgs::LocalMapPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.center[i]);
    }
    s << indent << "left[]" << std::endl;
    for (size_t i = 0; i < v.left.size(); ++i)
    {
      s << indent << "  left[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hadmap_msgs::LocalMapPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.left[i]);
    }
    s << indent << "right[]" << std::endl;
    for (size_t i = 0; i < v.right.size(); ++i)
    {
      s << indent << "  right[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hadmap_msgs::LocalMapPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.right[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HADMAP_MSGS_MESSAGE_LOCALMAPLANE_H
