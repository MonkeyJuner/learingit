// Generated by gencpp from file simulator_msgs/Rate.msg
// DO NOT EDIT!


#ifndef SIMULATOR_MSGS_MESSAGE_RATE_H
#define SIMULATOR_MSGS_MESSAGE_RATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace simulator_msgs
{
template <class ContainerAllocator>
struct Rate_
{
  typedef Rate_<ContainerAllocator> Type;

  Rate_()
    : cycle_us(0.0)
    , time_rate(0.0)  {
    }
  Rate_(const ContainerAllocator& _alloc)
    : cycle_us(0.0)
    , time_rate(0.0)  {
  (void)_alloc;
    }



   typedef double _cycle_us_type;
  _cycle_us_type cycle_us;

   typedef double _time_rate_type;
  _time_rate_type time_rate;





  typedef boost::shared_ptr< ::simulator_msgs::Rate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simulator_msgs::Rate_<ContainerAllocator> const> ConstPtr;

}; // struct Rate_

typedef ::simulator_msgs::Rate_<std::allocator<void> > Rate;

typedef boost::shared_ptr< ::simulator_msgs::Rate > RatePtr;
typedef boost::shared_ptr< ::simulator_msgs::Rate const> RateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simulator_msgs::Rate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simulator_msgs::Rate_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace simulator_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'simulator_msgs': ['/home/wuhaisheng/Workspace/catkin_integration/src/interfaces/ads_internal/ros/simulator_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::simulator_msgs::Rate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulator_msgs::Rate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simulator_msgs::Rate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simulator_msgs::Rate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator_msgs::Rate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator_msgs::Rate_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simulator_msgs::Rate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "785d8d6cbab03eef8403afc2fa066006";
  }

  static const char* value(const ::simulator_msgs::Rate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x785d8d6cbab03eefULL;
  static const uint64_t static_value2 = 0x8403afc2fa066006ULL;
};

template<class ContainerAllocator>
struct DataType< ::simulator_msgs::Rate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simulator_msgs/Rate";
  }

  static const char* value(const ::simulator_msgs::Rate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simulator_msgs::Rate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 cycle_us\n\
float64 time_rate\n\
";
  }

  static const char* value(const ::simulator_msgs::Rate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simulator_msgs::Rate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cycle_us);
      stream.next(m.time_rate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Rate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simulator_msgs::Rate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simulator_msgs::Rate_<ContainerAllocator>& v)
  {
    s << indent << "cycle_us: ";
    Printer<double>::stream(s, indent + "  ", v.cycle_us);
    s << indent << "time_rate: ";
    Printer<double>::stream(s, indent + "  ", v.time_rate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMULATOR_MSGS_MESSAGE_RATE_H
