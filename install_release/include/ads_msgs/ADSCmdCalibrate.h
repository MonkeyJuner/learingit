// Generated by gencpp from file ads_msgs/ADSCmdCalibrate.msg
// DO NOT EDIT!


#ifndef ADS_MSGS_MESSAGE_ADSCMDCALIBRATE_H
#define ADS_MSGS_MESSAGE_ADSCMDCALIBRATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ads_msgs
{
template <class ContainerAllocator>
struct ADSCmdCalibrate_
{
  typedef ADSCmdCalibrate_<ContainerAllocator> Type;

  ADSCmdCalibrate_()
    : header()
    , id(0)
    , count(0)
    , longitude_dist(0.0)
    , lateral_dist(0.0)
    , longitude_thr(0.0)
    , lateral_thr(0.0)  {
    }
  ADSCmdCalibrate_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(0)
    , count(0)
    , longitude_dist(0.0)
    , lateral_dist(0.0)
    , longitude_thr(0.0)
    , lateral_thr(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _id_type;
  _id_type id;

   typedef uint32_t _count_type;
  _count_type count;

   typedef double _longitude_dist_type;
  _longitude_dist_type longitude_dist;

   typedef double _lateral_dist_type;
  _lateral_dist_type lateral_dist;

   typedef double _longitude_thr_type;
  _longitude_thr_type longitude_thr;

   typedef double _lateral_thr_type;
  _lateral_thr_type lateral_thr;





  typedef boost::shared_ptr< ::ads_msgs::ADSCmdCalibrate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ads_msgs::ADSCmdCalibrate_<ContainerAllocator> const> ConstPtr;

}; // struct ADSCmdCalibrate_

typedef ::ads_msgs::ADSCmdCalibrate_<std::allocator<void> > ADSCmdCalibrate;

typedef boost::shared_ptr< ::ads_msgs::ADSCmdCalibrate > ADSCmdCalibratePtr;
typedef boost::shared_ptr< ::ads_msgs::ADSCmdCalibrate const> ADSCmdCalibrateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ads_msgs::ADSCmdCalibrate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ads_msgs::ADSCmdCalibrate_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ads_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ads_msgs': ['/home/wuhaisheng/Workspace/catkin_integration/src/interfaces/ads/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ads_msgs::ADSCmdCalibrate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ads_msgs::ADSCmdCalibrate_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ads_msgs::ADSCmdCalibrate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ads_msgs::ADSCmdCalibrate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ads_msgs::ADSCmdCalibrate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ads_msgs::ADSCmdCalibrate_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ads_msgs::ADSCmdCalibrate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae168eb424739dfee5633c98c176c140";
  }

  static const char* value(const ::ads_msgs::ADSCmdCalibrate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae168eb424739dfeULL;
  static const uint64_t static_value2 = 0xe5633c98c176c140ULL;
};

template<class ContainerAllocator>
struct DataType< ::ads_msgs::ADSCmdCalibrate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ads_msgs/ADSCmdCalibrate";
  }

  static const char* value(const ::ads_msgs::ADSCmdCalibrate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ads_msgs::ADSCmdCalibrate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
uint32 id\n\
\n\
uint32 count\n\
\n\
# measure by m, longitudinal distance from target position\n\
float64 longitude_dist\n\
\n\
# meausre by m, lateral distance from target position\n\
float64 lateral_dist\n\
\n\
float64 longitude_thr\n\
\n\
float64 lateral_thr\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::ads_msgs::ADSCmdCalibrate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ads_msgs::ADSCmdCalibrate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.count);
      stream.next(m.longitude_dist);
      stream.next(m.lateral_dist);
      stream.next(m.longitude_thr);
      stream.next(m.lateral_thr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ADSCmdCalibrate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ads_msgs::ADSCmdCalibrate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ads_msgs::ADSCmdCalibrate_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.count);
    s << indent << "longitude_dist: ";
    Printer<double>::stream(s, indent + "  ", v.longitude_dist);
    s << indent << "lateral_dist: ";
    Printer<double>::stream(s, indent + "  ", v.lateral_dist);
    s << indent << "longitude_thr: ";
    Printer<double>::stream(s, indent + "  ", v.longitude_thr);
    s << indent << "lateral_thr: ";
    Printer<double>::stream(s, indent + "  ", v.lateral_thr);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ADS_MSGS_MESSAGE_ADSCMDCALIBRATE_H
