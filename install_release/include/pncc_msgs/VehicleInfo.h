// Generated by gencpp from file pncc_msgs/VehicleInfo.msg
// DO NOT EDIT!


#ifndef PNCC_MSGS_MESSAGE_VEHICLEINFO_H
#define PNCC_MSGS_MESSAGE_VEHICLEINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <pncc_msgs/Gear.h>

namespace pncc_msgs
{
template <class ContainerAllocator>
struct VehicleInfo_
{
  typedef VehicleInfo_<ContainerAllocator> Type;

  VehicleInfo_()
    : header()
    , vehicle_speed(0.0)
    , odometer(0.0)
    , wheel_speed()
    , wheel_odometer()
    , wheel_angle_left(0.0)
    , wheel_angle_right(0.0)
    , yaw_rate(0.0)
    , gx(0.0)
    , gy(0.0)
    , steering_mode(0)
    , steering_angle(0.0)
    , throttle_mode(0)
    , throttle(0.0)
    , brake_mode(0)
    , brake(0.0)
    , acceleration_mode(0)
    , acceleration(0.0)
    , gear_mode(0)
    , gear()
    , turn_light_status(0)
    , door_status(0)
    , wiper_status(0)
    , horn_status(0)
    , light_status(0)
    , dump_energy_status(0)
    , auto_driver_status(0)
    , vehicle_error_status(0)
    , emergency_stop_status(0)
    , brake_air_pressure_0(0.0)
    , brake_air_pressure_1(0.0)  {
    }
  VehicleInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , vehicle_speed(0.0)
    , odometer(0.0)
    , wheel_speed(_alloc)
    , wheel_odometer(_alloc)
    , wheel_angle_left(0.0)
    , wheel_angle_right(0.0)
    , yaw_rate(0.0)
    , gx(0.0)
    , gy(0.0)
    , steering_mode(0)
    , steering_angle(0.0)
    , throttle_mode(0)
    , throttle(0.0)
    , brake_mode(0)
    , brake(0.0)
    , acceleration_mode(0)
    , acceleration(0.0)
    , gear_mode(0)
    , gear(_alloc)
    , turn_light_status(0)
    , door_status(0)
    , wiper_status(0)
    , horn_status(0)
    , light_status(0)
    , dump_energy_status(0)
    , auto_driver_status(0)
    , vehicle_error_status(0)
    , emergency_stop_status(0)
    , brake_air_pressure_0(0.0)
    , brake_air_pressure_1(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _vehicle_speed_type;
  _vehicle_speed_type vehicle_speed;

   typedef double _odometer_type;
  _odometer_type odometer;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _wheel_speed_type;
  _wheel_speed_type wheel_speed;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _wheel_odometer_type;
  _wheel_odometer_type wheel_odometer;

   typedef double _wheel_angle_left_type;
  _wheel_angle_left_type wheel_angle_left;

   typedef double _wheel_angle_right_type;
  _wheel_angle_right_type wheel_angle_right;

   typedef double _yaw_rate_type;
  _yaw_rate_type yaw_rate;

   typedef double _gx_type;
  _gx_type gx;

   typedef double _gy_type;
  _gy_type gy;

   typedef uint8_t _steering_mode_type;
  _steering_mode_type steering_mode;

   typedef double _steering_angle_type;
  _steering_angle_type steering_angle;

   typedef uint8_t _throttle_mode_type;
  _throttle_mode_type throttle_mode;

   typedef double _throttle_type;
  _throttle_type throttle;

   typedef uint8_t _brake_mode_type;
  _brake_mode_type brake_mode;

   typedef double _brake_type;
  _brake_type brake;

   typedef uint8_t _acceleration_mode_type;
  _acceleration_mode_type acceleration_mode;

   typedef double _acceleration_type;
  _acceleration_type acceleration;

   typedef uint8_t _gear_mode_type;
  _gear_mode_type gear_mode;

   typedef  ::pncc_msgs::Gear_<ContainerAllocator>  _gear_type;
  _gear_type gear;

   typedef uint8_t _turn_light_status_type;
  _turn_light_status_type turn_light_status;

   typedef uint8_t _door_status_type;
  _door_status_type door_status;

   typedef uint8_t _wiper_status_type;
  _wiper_status_type wiper_status;

   typedef uint8_t _horn_status_type;
  _horn_status_type horn_status;

   typedef uint8_t _light_status_type;
  _light_status_type light_status;

   typedef uint8_t _dump_energy_status_type;
  _dump_energy_status_type dump_energy_status;

   typedef uint8_t _auto_driver_status_type;
  _auto_driver_status_type auto_driver_status;

   typedef uint16_t _vehicle_error_status_type;
  _vehicle_error_status_type vehicle_error_status;

   typedef uint8_t _emergency_stop_status_type;
  _emergency_stop_status_type emergency_stop_status;

   typedef double _brake_air_pressure_0_type;
  _brake_air_pressure_0_type brake_air_pressure_0;

   typedef double _brake_air_pressure_1_type;
  _brake_air_pressure_1_type brake_air_pressure_1;



  enum {
    MODE_MANUAL = 70u,
    MODE_AUTO = 71u,
    MODE_INTERVENED = 72u,
  };


  typedef boost::shared_ptr< ::pncc_msgs::VehicleInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pncc_msgs::VehicleInfo_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleInfo_

typedef ::pncc_msgs::VehicleInfo_<std::allocator<void> > VehicleInfo;

typedef boost::shared_ptr< ::pncc_msgs::VehicleInfo > VehicleInfoPtr;
typedef boost::shared_ptr< ::pncc_msgs::VehicleInfo const> VehicleInfoConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pncc_msgs::VehicleInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pncc_msgs::VehicleInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pncc_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'pncc_msgs': ['/home/wuhaisheng/Workspace/catkin_integration/src/interfaces/ads_internal/ros/pncc/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pncc_msgs::VehicleInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pncc_msgs::VehicleInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pncc_msgs::VehicleInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pncc_msgs::VehicleInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pncc_msgs::VehicleInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pncc_msgs::VehicleInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pncc_msgs::VehicleInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5250ff1105cef33cd8779a4c67c998f2";
  }

  static const char* value(const ::pncc_msgs::VehicleInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5250ff1105cef33cULL;
  static const uint64_t static_value2 = 0xd8779a4c67c998f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::pncc_msgs::VehicleInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pncc_msgs/VehicleInfo";
  }

  static const char* value(const ::pncc_msgs::VehicleInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pncc_msgs::VehicleInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 MODE_MANUAL = 70\n\
uint8 MODE_AUTO = 71\n\
uint8 MODE_INTERVENED = 72\n\
\n\
Header header\n\
\n\
float64 vehicle_speed    # m/s\n\
float64 odometer         # m\n\
\n\
float64[] wheel_speed    # m/s, start from FL, clockwise.\n\
float64[] wheel_odometer # m, start from FL, clockwise.\n\
\n\
float64 wheel_angle_left # degree\n\
float64 wheel_angle_right# degree\n\
\n\
float64 yaw_rate         # rad/s\n\
float64 gx               # m/s2\n\
float64 gy               # m/s2\n\
\n\
uint8 steering_mode\n\
float64 steering_angle   # degree\n\
\n\
uint8 throttle_mode\n\
float64 throttle         # 0.0 ~ 1.0; -1.0 for unavailable.\n\
\n\
uint8 brake_mode\n\
float64 brake            # 0.0 ~ 1.0; -1.0 for unavailable.\n\
\n\
uint8 acceleration_mode\n\
float64 acceleration     # m/s2\n\
\n\
uint8 gear_mode\n\
Gear gear\n\
\n\
uint8 turn_light_status\n\
uint8 door_status\n\
uint8 wiper_status\n\
uint8 horn_status\n\
uint8 light_status\n\
uint8 dump_energy_status\n\
\n\
uint8 auto_driver_status           #0:auto_driver          1:human intervention 2:udp lost 3:can lost 5:cdc lost\n\
uint16 vehicle_error_status        #contain eight status, each status takes 2 bits          steering_error/gear_error/throttle_error/brake_error/vehicle_error\n\
\n\
uint8 emergency_stop_status        #0:normal 1:stop_status\n\
\n\
float64 brake_air_pressure_0 # air pressure\n\
float64 brake_air_pressure_1\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: pncc_msgs/Gear\n\
uint8 GEAR_P = 0\n\
uint8 GEAR_R = 1\n\
uint8 GEAR_N = 2\n\
uint8 GEAR_D = 3\n\
uint8 GEAR_1 = 4\n\
uint8 GEAR_2 = 5\n\
uint8 GEAR_3 = 6\n\
uint8 GEAR_4 = 7\n\
uint8 GEAR_5 = 8\n\
uint8 GEAR_6 = 9\n\
uint8 GEAR_7 = 10\n\
uint8 GEAR_8 = 11\n\
uint8 GEAR_9 = 12\n\
uint8 GEAR_10 = 13\n\
uint8 GEAR_11 = 14\n\
uint8 GEAR_12 = 15\n\
\n\
\n\
uint8 value\n\
";
  }

  static const char* value(const ::pncc_msgs::VehicleInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pncc_msgs::VehicleInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.vehicle_speed);
      stream.next(m.odometer);
      stream.next(m.wheel_speed);
      stream.next(m.wheel_odometer);
      stream.next(m.wheel_angle_left);
      stream.next(m.wheel_angle_right);
      stream.next(m.yaw_rate);
      stream.next(m.gx);
      stream.next(m.gy);
      stream.next(m.steering_mode);
      stream.next(m.steering_angle);
      stream.next(m.throttle_mode);
      stream.next(m.throttle);
      stream.next(m.brake_mode);
      stream.next(m.brake);
      stream.next(m.acceleration_mode);
      stream.next(m.acceleration);
      stream.next(m.gear_mode);
      stream.next(m.gear);
      stream.next(m.turn_light_status);
      stream.next(m.door_status);
      stream.next(m.wiper_status);
      stream.next(m.horn_status);
      stream.next(m.light_status);
      stream.next(m.dump_energy_status);
      stream.next(m.auto_driver_status);
      stream.next(m.vehicle_error_status);
      stream.next(m.emergency_stop_status);
      stream.next(m.brake_air_pressure_0);
      stream.next(m.brake_air_pressure_1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pncc_msgs::VehicleInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pncc_msgs::VehicleInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "vehicle_speed: ";
    Printer<double>::stream(s, indent + "  ", v.vehicle_speed);
    s << indent << "odometer: ";
    Printer<double>::stream(s, indent + "  ", v.odometer);
    s << indent << "wheel_speed[]" << std::endl;
    for (size_t i = 0; i < v.wheel_speed.size(); ++i)
    {
      s << indent << "  wheel_speed[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.wheel_speed[i]);
    }
    s << indent << "wheel_odometer[]" << std::endl;
    for (size_t i = 0; i < v.wheel_odometer.size(); ++i)
    {
      s << indent << "  wheel_odometer[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.wheel_odometer[i]);
    }
    s << indent << "wheel_angle_left: ";
    Printer<double>::stream(s, indent + "  ", v.wheel_angle_left);
    s << indent << "wheel_angle_right: ";
    Printer<double>::stream(s, indent + "  ", v.wheel_angle_right);
    s << indent << "yaw_rate: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_rate);
    s << indent << "gx: ";
    Printer<double>::stream(s, indent + "  ", v.gx);
    s << indent << "gy: ";
    Printer<double>::stream(s, indent + "  ", v.gy);
    s << indent << "steering_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.steering_mode);
    s << indent << "steering_angle: ";
    Printer<double>::stream(s, indent + "  ", v.steering_angle);
    s << indent << "throttle_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.throttle_mode);
    s << indent << "throttle: ";
    Printer<double>::stream(s, indent + "  ", v.throttle);
    s << indent << "brake_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake_mode);
    s << indent << "brake: ";
    Printer<double>::stream(s, indent + "  ", v.brake);
    s << indent << "acceleration_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.acceleration_mode);
    s << indent << "acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration);
    s << indent << "gear_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear_mode);
    s << indent << "gear: ";
    s << std::endl;
    Printer< ::pncc_msgs::Gear_<ContainerAllocator> >::stream(s, indent + "  ", v.gear);
    s << indent << "turn_light_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.turn_light_status);
    s << indent << "door_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.door_status);
    s << indent << "wiper_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wiper_status);
    s << indent << "horn_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.horn_status);
    s << indent << "light_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.light_status);
    s << indent << "dump_energy_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dump_energy_status);
    s << indent << "auto_driver_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_driver_status);
    s << indent << "vehicle_error_status: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.vehicle_error_status);
    s << indent << "emergency_stop_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergency_stop_status);
    s << indent << "brake_air_pressure_0: ";
    Printer<double>::stream(s, indent + "  ", v.brake_air_pressure_0);
    s << indent << "brake_air_pressure_1: ";
    Printer<double>::stream(s, indent + "  ", v.brake_air_pressure_1);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PNCC_MSGS_MESSAGE_VEHICLEINFO_H
