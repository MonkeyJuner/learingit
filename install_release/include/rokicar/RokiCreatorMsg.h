// Generated by gencpp from file rokicar/RokiCreatorMsg.msg
// DO NOT EDIT!


#ifndef ROKICAR_MESSAGE_ROKICREATORMSG_H
#define ROKICAR_MESSAGE_ROKICREATORMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/PoseStamped.h>

namespace rokicar
{
template <class ContainerAllocator>
struct RokiCreatorMsg_
{
  typedef RokiCreatorMsg_<ContainerAllocator> Type;

  RokiCreatorMsg_()
    : ai_name()
    , simu_name()
    , box()
    , pos()
    , quat()
    , speed(0.0)
    , ax(0.0)
    , ROKI_FLAG(0)
    , duration(0.0)
    , map_model(false)
    , roki_info()  {
    }
  RokiCreatorMsg_(const ContainerAllocator& _alloc)
    : ai_name(_alloc)
    , simu_name(_alloc)
    , box(_alloc)
    , pos(_alloc)
    , quat(_alloc)
    , speed(0.0)
    , ax(0.0)
    , ROKI_FLAG(0)
    , duration(0.0)
    , map_model(false)
    , roki_info(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ai_name_type;
  _ai_name_type ai_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _simu_name_type;
  _simu_name_type simu_name;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _box_type;
  _box_type box;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pos_type;
  _pos_type pos;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _quat_type;
  _quat_type quat;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _ax_type;
  _ax_type ax;

   typedef int8_t _ROKI_FLAG_type;
  _ROKI_FLAG_type ROKI_FLAG;

   typedef double _duration_type;
  _duration_type duration;

   typedef uint8_t _map_model_type;
  _map_model_type map_model;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _roki_info_type;
  _roki_info_type roki_info;





  typedef boost::shared_ptr< ::rokicar::RokiCreatorMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rokicar::RokiCreatorMsg_<ContainerAllocator> const> ConstPtr;

}; // struct RokiCreatorMsg_

typedef ::rokicar::RokiCreatorMsg_<std::allocator<void> > RokiCreatorMsg;

typedef boost::shared_ptr< ::rokicar::RokiCreatorMsg > RokiCreatorMsgPtr;
typedef boost::shared_ptr< ::rokicar::RokiCreatorMsg const> RokiCreatorMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rokicar::RokiCreatorMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rokicar::RokiCreatorMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rokicar

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'rokicar': ['/home/xjm/pncc_ws/src/rokicar/rokicar/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rokicar::RokiCreatorMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rokicar::RokiCreatorMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rokicar::RokiCreatorMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rokicar::RokiCreatorMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rokicar::RokiCreatorMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rokicar::RokiCreatorMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rokicar::RokiCreatorMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eee654350412f87280e1c84b5265c5fc";
  }

  static const char* value(const ::rokicar::RokiCreatorMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeee654350412f872ULL;
  static const uint64_t static_value2 = 0x80e1c84b5265c5fcULL;
};

template<class ContainerAllocator>
struct DataType< ::rokicar::RokiCreatorMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rokicar/RokiCreatorMsg";
  }

  static const char* value(const ::rokicar::RokiCreatorMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rokicar::RokiCreatorMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
string ai_name\n\
string simu_name\n\
geometry_msgs/Point box\n\
geometry_msgs/Point pos\n\
geometry_msgs/Quaternion quat\n\
\n\
float64 speed\n\
\n\
# add ax by sun.hao\n\
\n\
float64 ax\n\
int8 ROKI_FLAG\n\
float64 duration\n\
bool map_model\n\
geometry_msgs/PoseStamped  roki_info\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
";
  }

  static const char* value(const ::rokicar::RokiCreatorMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rokicar::RokiCreatorMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ai_name);
      stream.next(m.simu_name);
      stream.next(m.box);
      stream.next(m.pos);
      stream.next(m.quat);
      stream.next(m.speed);
      stream.next(m.ax);
      stream.next(m.ROKI_FLAG);
      stream.next(m.duration);
      stream.next(m.map_model);
      stream.next(m.roki_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RokiCreatorMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rokicar::RokiCreatorMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rokicar::RokiCreatorMsg_<ContainerAllocator>& v)
  {
    s << indent << "ai_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ai_name);
    s << indent << "simu_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.simu_name);
    s << indent << "box: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.box);
    s << indent << "pos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pos);
    s << indent << "quat: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.quat);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "ax: ";
    Printer<double>::stream(s, indent + "  ", v.ax);
    s << indent << "ROKI_FLAG: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ROKI_FLAG);
    s << indent << "duration: ";
    Printer<double>::stream(s, indent + "  ", v.duration);
    s << indent << "map_model: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.map_model);
    s << indent << "roki_info: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.roki_info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROKICAR_MESSAGE_ROKICREATORMSG_H
