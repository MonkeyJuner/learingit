// Generated by gencpp from file gnss_msgs/GnssImuInfo.msg
// DO NOT EDIT!


#ifndef GNSS_MSGS_MESSAGE_GNSSIMUINFO_H
#define GNSS_MSGS_MESSAGE_GNSSIMUINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace gnss_msgs
{
template <class ContainerAllocator>
struct GnssImuInfo_
{
  typedef GnssImuInfo_<ContainerAllocator> Type;

  GnssImuInfo_()
    : header()
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , utm_east(0.0)
    , utm_north(0.0)
    , latitude_std(0.0)
    , longitude_std(0.0)
    , altitude_std(0.0)
    , north_velocity(0.0)
    , east_velocity(0.0)
    , up_velocity(0.0)
    , north_velocity_std(0.0)
    , east_velocity_std(0.0)
    , up_velocity_std(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , w(0.0)
    , roll_std(0.0)
    , pitch_std(0.0)
    , yaw_std(0.0)
    , roll_rate(0.0)
    , pitch_rate(0.0)
    , yaw_rate(0.0)
    , ax(0.0)
    , ay(0.0)
    , az(0.0)
    , init_position(0)
    , init_velocity(0)
    , init_pitchroll(0)
    , init_yaw(0)
    , gps_status(0)
    , gps_satellitenum(0)
    , wheelspeed_status(0)
    , temperature(0.0)  {
    }
  GnssImuInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , utm_east(0.0)
    , utm_north(0.0)
    , latitude_std(0.0)
    , longitude_std(0.0)
    , altitude_std(0.0)
    , north_velocity(0.0)
    , east_velocity(0.0)
    , up_velocity(0.0)
    , north_velocity_std(0.0)
    , east_velocity_std(0.0)
    , up_velocity_std(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , w(0.0)
    , roll_std(0.0)
    , pitch_std(0.0)
    , yaw_std(0.0)
    , roll_rate(0.0)
    , pitch_rate(0.0)
    , yaw_rate(0.0)
    , ax(0.0)
    , ay(0.0)
    , az(0.0)
    , init_position(0)
    , init_velocity(0)
    , init_pitchroll(0)
    , init_yaw(0)
    , gps_status(0)
    , gps_satellitenum(0)
    , wheelspeed_status(0)
    , temperature(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef double _utm_east_type;
  _utm_east_type utm_east;

   typedef double _utm_north_type;
  _utm_north_type utm_north;

   typedef float _latitude_std_type;
  _latitude_std_type latitude_std;

   typedef float _longitude_std_type;
  _longitude_std_type longitude_std;

   typedef float _altitude_std_type;
  _altitude_std_type altitude_std;

   typedef double _north_velocity_type;
  _north_velocity_type north_velocity;

   typedef double _east_velocity_type;
  _east_velocity_type east_velocity;

   typedef double _up_velocity_type;
  _up_velocity_type up_velocity;

   typedef float _north_velocity_std_type;
  _north_velocity_std_type north_velocity_std;

   typedef float _east_velocity_std_type;
  _east_velocity_std_type east_velocity_std;

   typedef float _up_velocity_std_type;
  _up_velocity_std_type up_velocity_std;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _w_type;
  _w_type w;

   typedef float _roll_std_type;
  _roll_std_type roll_std;

   typedef float _pitch_std_type;
  _pitch_std_type pitch_std;

   typedef float _yaw_std_type;
  _yaw_std_type yaw_std;

   typedef double _roll_rate_type;
  _roll_rate_type roll_rate;

   typedef double _pitch_rate_type;
  _pitch_rate_type pitch_rate;

   typedef double _yaw_rate_type;
  _yaw_rate_type yaw_rate;

   typedef double _ax_type;
  _ax_type ax;

   typedef double _ay_type;
  _ay_type ay;

   typedef double _az_type;
  _az_type az;

   typedef uint8_t _init_position_type;
  _init_position_type init_position;

   typedef uint8_t _init_velocity_type;
  _init_velocity_type init_velocity;

   typedef uint8_t _init_pitchroll_type;
  _init_pitchroll_type init_pitchroll;

   typedef uint8_t _init_yaw_type;
  _init_yaw_type init_yaw;

   typedef int32_t _gps_status_type;
  _gps_status_type gps_status;

   typedef int32_t _gps_satellitenum_type;
  _gps_satellitenum_type gps_satellitenum;

   typedef int32_t _wheelspeed_status_type;
  _wheelspeed_status_type wheelspeed_status;

   typedef double _temperature_type;
  _temperature_type temperature;



  enum {
    POSITION_TYPE_NONE = 0,
    POSITION_TYPE_FIXEDPOS = 1,
    POSITION_TYPE_FIXEDHEIGHT = 2,
    POSITION_TYPE_DOPPLER_VELOCITY = 8,
    POSITION_TYPE_SINGLE = 16,
    POSITION_TYPE_PSRDIFF = 17,
    POSITION_TYPE_SBAS = 18,
    POSITION_TYPE_PROPAGATED = 19,
    POSITION_TYPE_OMNISTAR = 20,
    POSITION_TYPE_L1_FLOAT = 32,
    POSITION_TYPE_IONOFREE_FLOAT = 33,
    POSITION_TYPE_NARROW_FLOAT = 34,
    POSITION_TYPE_L1_INT = 48,
    POSITION_TYPE_WIDE_INT = 49,
    POSITION_TYPE_NARROW_INT = 50,
    POSITION_TYPE_OMNISTAR_HP = 64,
    POSITION_TYPE_OMNISTAR_XP = 65,
  };


  typedef boost::shared_ptr< ::gnss_msgs::GnssImuInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gnss_msgs::GnssImuInfo_<ContainerAllocator> const> ConstPtr;

}; // struct GnssImuInfo_

typedef ::gnss_msgs::GnssImuInfo_<std::allocator<void> > GnssImuInfo;

typedef boost::shared_ptr< ::gnss_msgs::GnssImuInfo > GnssImuInfoPtr;
typedef boost::shared_ptr< ::gnss_msgs::GnssImuInfo const> GnssImuInfoConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gnss_msgs::GnssImuInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gnss_msgs::GnssImuInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gnss_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'gnss_msgs': ['/home/wuhaisheng/Workspace/catkin_integration/src/localization/msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gnss_msgs::GnssImuInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gnss_msgs::GnssImuInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gnss_msgs::GnssImuInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gnss_msgs::GnssImuInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_msgs::GnssImuInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_msgs::GnssImuInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gnss_msgs::GnssImuInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "11dc712d4d164c4b214a63c633cf7ef7";
  }

  static const char* value(const ::gnss_msgs::GnssImuInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x11dc712d4d164c4bULL;
  static const uint64_t static_value2 = 0x214a63c633cf7ef7ULL;
};

template<class ContainerAllocator>
struct DataType< ::gnss_msgs::GnssImuInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gnss_msgs/GnssImuInfo";
  }

  static const char* value(const ::gnss_msgs::GnssImuInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gnss_msgs::GnssImuInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 POSITION_TYPE_NONE = 0\n\
int32 POSITION_TYPE_FIXEDPOS = 1\n\
int32 POSITION_TYPE_FIXEDHEIGHT = 2\n\
int32 POSITION_TYPE_DOPPLER_VELOCITY = 8\n\
int32 POSITION_TYPE_SINGLE = 16\n\
int32 POSITION_TYPE_PSRDIFF = 17\n\
int32 POSITION_TYPE_SBAS = 18\n\
#int32 POSITION_TYPE_WAAS = 18\n\
int32 POSITION_TYPE_PROPAGATED = 19\n\
int32 POSITION_TYPE_OMNISTAR = 20\n\
int32 POSITION_TYPE_L1_FLOAT = 32\n\
int32 POSITION_TYPE_IONOFREE_FLOAT = 33\n\
int32 POSITION_TYPE_NARROW_FLOAT = 34\n\
int32 POSITION_TYPE_L1_INT = 48\n\
int32 POSITION_TYPE_WIDE_INT = 49\n\
int32 POSITION_TYPE_NARROW_INT = 50\n\
int32 POSITION_TYPE_OMNISTAR_HP = 64\n\
int32 POSITION_TYPE_OMNISTAR_XP = 65\n\
#int32 POSITION_TYPE_PPP_CONVERGING = 68\n\
#int32 POSITION_TYPE_PPP = 69\n\
#int32 POSITION_TYPE_OPERATIONAL = 70\n\
#int32 POSITION_TYPE_WARNING = 71\n\
#int32 POSITION_TYPE_OUT_OF_BOUNDS = 72\n\
\n\
Header header\n\
\n\
# position\n\
float64 latitude\n\
float64 longitude\n\
float64 altitude\n\
\n\
float64 utm_east\n\
float64 utm_north\n\
\n\
float32 latitude_std\n\
float32 longitude_std\n\
float32 altitude_std\n\
\n\
# velocity\n\
float64 north_velocity\n\
float64 east_velocity\n\
float64 up_velocity\n\
\n\
float32 north_velocity_std\n\
float32 east_velocity_std\n\
float32 up_velocity_std\n\
\n\
# attitude\n\
float64 roll\n\
float64 pitch\n\
float64 yaw\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
float32 roll_std\n\
float32 pitch_std\n\
float32 yaw_std\n\
\n\
#angular velocity\n\
float64 roll_rate\n\
float64 pitch_rate\n\
float64 yaw_rate\n\
\n\
#acceleration\n\
float64 ax\n\
float64 ay\n\
float64 az\n\
\n\
#INS550D status\n\
#initialization status\n\
uint8 init_position\n\
uint8 init_velocity\n\
uint8 init_pitchroll\n\
uint8 init_yaw\n\
\n\
#gps status\n\
int32 gps_status\n\
int32 gps_satellitenum\n\
\n\
#wheel speed status\n\
int32 wheelspeed_status\n\
\n\
#device status\n\
float64 temperature\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::gnss_msgs::GnssImuInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gnss_msgs::GnssImuInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.utm_east);
      stream.next(m.utm_north);
      stream.next(m.latitude_std);
      stream.next(m.longitude_std);
      stream.next(m.altitude_std);
      stream.next(m.north_velocity);
      stream.next(m.east_velocity);
      stream.next(m.up_velocity);
      stream.next(m.north_velocity_std);
      stream.next(m.east_velocity_std);
      stream.next(m.up_velocity_std);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.w);
      stream.next(m.roll_std);
      stream.next(m.pitch_std);
      stream.next(m.yaw_std);
      stream.next(m.roll_rate);
      stream.next(m.pitch_rate);
      stream.next(m.yaw_rate);
      stream.next(m.ax);
      stream.next(m.ay);
      stream.next(m.az);
      stream.next(m.init_position);
      stream.next(m.init_velocity);
      stream.next(m.init_pitchroll);
      stream.next(m.init_yaw);
      stream.next(m.gps_status);
      stream.next(m.gps_satellitenum);
      stream.next(m.wheelspeed_status);
      stream.next(m.temperature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GnssImuInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gnss_msgs::GnssImuInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gnss_msgs::GnssImuInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "utm_east: ";
    Printer<double>::stream(s, indent + "  ", v.utm_east);
    s << indent << "utm_north: ";
    Printer<double>::stream(s, indent + "  ", v.utm_north);
    s << indent << "latitude_std: ";
    Printer<float>::stream(s, indent + "  ", v.latitude_std);
    s << indent << "longitude_std: ";
    Printer<float>::stream(s, indent + "  ", v.longitude_std);
    s << indent << "altitude_std: ";
    Printer<float>::stream(s, indent + "  ", v.altitude_std);
    s << indent << "north_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.north_velocity);
    s << indent << "east_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.east_velocity);
    s << indent << "up_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.up_velocity);
    s << indent << "north_velocity_std: ";
    Printer<float>::stream(s, indent + "  ", v.north_velocity_std);
    s << indent << "east_velocity_std: ";
    Printer<float>::stream(s, indent + "  ", v.east_velocity_std);
    s << indent << "up_velocity_std: ";
    Printer<float>::stream(s, indent + "  ", v.up_velocity_std);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "w: ";
    Printer<double>::stream(s, indent + "  ", v.w);
    s << indent << "roll_std: ";
    Printer<float>::stream(s, indent + "  ", v.roll_std);
    s << indent << "pitch_std: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_std);
    s << indent << "yaw_std: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_std);
    s << indent << "roll_rate: ";
    Printer<double>::stream(s, indent + "  ", v.roll_rate);
    s << indent << "pitch_rate: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_rate);
    s << indent << "yaw_rate: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_rate);
    s << indent << "ax: ";
    Printer<double>::stream(s, indent + "  ", v.ax);
    s << indent << "ay: ";
    Printer<double>::stream(s, indent + "  ", v.ay);
    s << indent << "az: ";
    Printer<double>::stream(s, indent + "  ", v.az);
    s << indent << "init_position: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.init_position);
    s << indent << "init_velocity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.init_velocity);
    s << indent << "init_pitchroll: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.init_pitchroll);
    s << indent << "init_yaw: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.init_yaw);
    s << indent << "gps_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gps_status);
    s << indent << "gps_satellitenum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gps_satellitenum);
    s << indent << "wheelspeed_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.wheelspeed_status);
    s << indent << "temperature: ";
    Printer<double>::stream(s, indent + "  ", v.temperature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GNSS_MSGS_MESSAGE_GNSSIMUINFO_H
