// Generated by gencpp from file gnss_msgs/GnssInfo.msg
// DO NOT EDIT!


#ifndef GNSS_MSGS_MESSAGE_GNSSINFO_H
#define GNSS_MSGS_MESSAGE_GNSSINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <sensor_msgs/NavSatFix.h>

namespace gnss_msgs
{
template <class ContainerAllocator>
struct GnssInfo_
{
  typedef GnssInfo_<ContainerAllocator> Type;

  GnssInfo_()
    : header()
    , gnss_velocity()
    , gnss_orientation()
    , gnss_position()
    , utm_east(0.0)
    , utm_north(0.0)
    , latitude_std(0.0)
    , longitude_std(0.0)
    , altitude_std(0.0)
    , north_velocity_std(0.0)
    , east_velocity_std(0.0)
    , up_velocity_std(0.0)
    , roll_std(0.0)
    , pitch_std(0.0)
    , yaw_std(0.0)
    , gps_status(0)
    , sate_num(0)
    , year(0)
    , month(0)
    , day(0)
    , hour(0)
    , minuter(0)
    , second(0.0)  {
    }
  GnssInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , gnss_velocity(_alloc)
    , gnss_orientation(_alloc)
    , gnss_position(_alloc)
    , utm_east(0.0)
    , utm_north(0.0)
    , latitude_std(0.0)
    , longitude_std(0.0)
    , altitude_std(0.0)
    , north_velocity_std(0.0)
    , east_velocity_std(0.0)
    , up_velocity_std(0.0)
    , roll_std(0.0)
    , pitch_std(0.0)
    , yaw_std(0.0)
    , gps_status(0)
    , sate_num(0)
    , year(0)
    , month(0)
    , day(0)
    , hour(0)
    , minuter(0)
    , second(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _gnss_velocity_type;
  _gnss_velocity_type gnss_velocity;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _gnss_orientation_type;
  _gnss_orientation_type gnss_orientation;

   typedef  ::sensor_msgs::NavSatFix_<ContainerAllocator>  _gnss_position_type;
  _gnss_position_type gnss_position;

   typedef double _utm_east_type;
  _utm_east_type utm_east;

   typedef double _utm_north_type;
  _utm_north_type utm_north;

   typedef float _latitude_std_type;
  _latitude_std_type latitude_std;

   typedef float _longitude_std_type;
  _longitude_std_type longitude_std;

   typedef float _altitude_std_type;
  _altitude_std_type altitude_std;

   typedef float _north_velocity_std_type;
  _north_velocity_std_type north_velocity_std;

   typedef float _east_velocity_std_type;
  _east_velocity_std_type east_velocity_std;

   typedef float _up_velocity_std_type;
  _up_velocity_std_type up_velocity_std;

   typedef float _roll_std_type;
  _roll_std_type roll_std;

   typedef float _pitch_std_type;
  _pitch_std_type pitch_std;

   typedef float _yaw_std_type;
  _yaw_std_type yaw_std;

   typedef uint8_t _gps_status_type;
  _gps_status_type gps_status;

   typedef uint8_t _sate_num_type;
  _sate_num_type sate_num;

   typedef uint16_t _year_type;
  _year_type year;

   typedef uint8_t _month_type;
  _month_type month;

   typedef uint8_t _day_type;
  _day_type day;

   typedef uint8_t _hour_type;
  _hour_type hour;

   typedef uint8_t _minuter_type;
  _minuter_type minuter;

   typedef float _second_type;
  _second_type second;





  typedef boost::shared_ptr< ::gnss_msgs::GnssInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gnss_msgs::GnssInfo_<ContainerAllocator> const> ConstPtr;

}; // struct GnssInfo_

typedef ::gnss_msgs::GnssInfo_<std::allocator<void> > GnssInfo;

typedef boost::shared_ptr< ::gnss_msgs::GnssInfo > GnssInfoPtr;
typedef boost::shared_ptr< ::gnss_msgs::GnssInfo const> GnssInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gnss_msgs::GnssInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gnss_msgs::GnssInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gnss_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'gnss_msgs': ['/home/wuhaisheng/Workspace/catkin_integration/src/localization/msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gnss_msgs::GnssInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gnss_msgs::GnssInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gnss_msgs::GnssInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gnss_msgs::GnssInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_msgs::GnssInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_msgs::GnssInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gnss_msgs::GnssInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "29d5c65ea6c74ae8feb75899be012a37";
  }

  static const char* value(const ::gnss_msgs::GnssInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x29d5c65ea6c74ae8ULL;
  static const uint64_t static_value2 = 0xfeb75899be012a37ULL;
};

template<class ContainerAllocator>
struct DataType< ::gnss_msgs::GnssInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gnss_msgs/GnssInfo";
  }

  static const char* value(const ::gnss_msgs::GnssInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gnss_msgs::GnssInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
geometry_msgs/Vector3 gnss_velocity\n\
geometry_msgs/Vector3 gnss_orientation\n\
sensor_msgs/NavSatFix gnss_position\n\
\n\
float64 utm_east\n\
float64 utm_north\n\
\n\
float32 latitude_std\n\
float32 longitude_std\n\
float32 altitude_std\n\
\n\
float32 north_velocity_std\n\
float32 east_velocity_std\n\
float32 up_velocity_std\n\
\n\
float32 roll_std\n\
float32 pitch_std\n\
float32 yaw_std\n\
\n\
uint8 gps_status\n\
uint8 sate_num\n\
\n\
# utc time\n\
uint16 year\n\
uint8 month\n\
uint8 day\n\
uint8 hour\n\
uint8 minuter\n\
float32 second\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: sensor_msgs/NavSatFix\n\
# Navigation Satellite fix for any Global Navigation Satellite System\n\
#\n\
# Specified using the WGS 84 reference ellipsoid\n\
\n\
# header.stamp specifies the ROS time for this measurement (the\n\
#        corresponding satellite time may be reported using the\n\
#        sensor_msgs/TimeReference message).\n\
#\n\
# header.frame_id is the frame of reference reported by the satellite\n\
#        receiver, usually the location of the antenna.  This is a\n\
#        Euclidean frame relative to the vehicle, not a reference\n\
#        ellipsoid.\n\
Header header\n\
\n\
# satellite fix status information\n\
NavSatStatus status\n\
\n\
# Latitude [degrees]. Positive is north of equator; negative is south.\n\
float64 latitude\n\
\n\
# Longitude [degrees]. Positive is east of prime meridian; negative is west.\n\
float64 longitude\n\
\n\
# Altitude [m]. Positive is above the WGS 84 ellipsoid\n\
# (quiet NaN if no altitude is available).\n\
float64 altitude\n\
\n\
# Position covariance [m^2] defined relative to a tangential plane\n\
# through the reported position. The components are East, North, and\n\
# Up (ENU), in row-major order.\n\
#\n\
# Beware: this coordinate system exhibits singularities at the poles.\n\
\n\
float64[9] position_covariance\n\
\n\
# If the covariance of the fix is known, fill it in completely. If the\n\
# GPS receiver provides the variance of each measurement, put them\n\
# along the diagonal. If only Dilution of Precision is available,\n\
# estimate an approximate covariance from that.\n\
\n\
uint8 COVARIANCE_TYPE_UNKNOWN = 0\n\
uint8 COVARIANCE_TYPE_APPROXIMATED = 1\n\
uint8 COVARIANCE_TYPE_DIAGONAL_KNOWN = 2\n\
uint8 COVARIANCE_TYPE_KNOWN = 3\n\
\n\
uint8 position_covariance_type\n\
\n\
================================================================================\n\
MSG: sensor_msgs/NavSatStatus\n\
# Navigation Satellite fix status for any Global Navigation Satellite System\n\
\n\
# Whether to output an augmented fix is determined by both the fix\n\
# type and the last time differential corrections were received.  A\n\
# fix is valid when status >= STATUS_FIX.\n\
\n\
int8 STATUS_NO_FIX =  -1        # unable to fix position\n\
int8 STATUS_FIX =      0        # unaugmented fix\n\
int8 STATUS_SBAS_FIX = 1        # with satellite-based augmentation\n\
int8 STATUS_GBAS_FIX = 2        # with ground-based augmentation\n\
\n\
int8 status\n\
\n\
# Bits defining which Global Navigation Satellite System signals were\n\
# used by the receiver.\n\
\n\
uint16 SERVICE_GPS =     1\n\
uint16 SERVICE_GLONASS = 2\n\
uint16 SERVICE_COMPASS = 4      # includes BeiDou.\n\
uint16 SERVICE_GALILEO = 8\n\
\n\
uint16 service\n\
";
  }

  static const char* value(const ::gnss_msgs::GnssInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gnss_msgs::GnssInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.gnss_velocity);
      stream.next(m.gnss_orientation);
      stream.next(m.gnss_position);
      stream.next(m.utm_east);
      stream.next(m.utm_north);
      stream.next(m.latitude_std);
      stream.next(m.longitude_std);
      stream.next(m.altitude_std);
      stream.next(m.north_velocity_std);
      stream.next(m.east_velocity_std);
      stream.next(m.up_velocity_std);
      stream.next(m.roll_std);
      stream.next(m.pitch_std);
      stream.next(m.yaw_std);
      stream.next(m.gps_status);
      stream.next(m.sate_num);
      stream.next(m.year);
      stream.next(m.month);
      stream.next(m.day);
      stream.next(m.hour);
      stream.next(m.minuter);
      stream.next(m.second);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GnssInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gnss_msgs::GnssInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gnss_msgs::GnssInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "gnss_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.gnss_velocity);
    s << indent << "gnss_orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.gnss_orientation);
    s << indent << "gnss_position: ";
    s << std::endl;
    Printer< ::sensor_msgs::NavSatFix_<ContainerAllocator> >::stream(s, indent + "  ", v.gnss_position);
    s << indent << "utm_east: ";
    Printer<double>::stream(s, indent + "  ", v.utm_east);
    s << indent << "utm_north: ";
    Printer<double>::stream(s, indent + "  ", v.utm_north);
    s << indent << "latitude_std: ";
    Printer<float>::stream(s, indent + "  ", v.latitude_std);
    s << indent << "longitude_std: ";
    Printer<float>::stream(s, indent + "  ", v.longitude_std);
    s << indent << "altitude_std: ";
    Printer<float>::stream(s, indent + "  ", v.altitude_std);
    s << indent << "north_velocity_std: ";
    Printer<float>::stream(s, indent + "  ", v.north_velocity_std);
    s << indent << "east_velocity_std: ";
    Printer<float>::stream(s, indent + "  ", v.east_velocity_std);
    s << indent << "up_velocity_std: ";
    Printer<float>::stream(s, indent + "  ", v.up_velocity_std);
    s << indent << "roll_std: ";
    Printer<float>::stream(s, indent + "  ", v.roll_std);
    s << indent << "pitch_std: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_std);
    s << indent << "yaw_std: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_std);
    s << indent << "gps_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps_status);
    s << indent << "sate_num: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sate_num);
    s << indent << "year: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.year);
    s << indent << "month: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.month);
    s << indent << "day: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.day);
    s << indent << "hour: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hour);
    s << indent << "minuter: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.minuter);
    s << indent << "second: ";
    Printer<float>::stream(s, indent + "  ", v.second);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GNSS_MSGS_MESSAGE_GNSSINFO_H
