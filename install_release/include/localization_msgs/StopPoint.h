// Generated by gencpp from file localization_msgs/StopPoint.msg
// DO NOT EDIT!


#ifndef LOCALIZATION_MSGS_MESSAGE_STOPPOINT_H
#define LOCALIZATION_MSGS_MESSAGE_STOPPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace localization_msgs
{
template <class ContainerAllocator>
struct StopPoint_
{
  typedef StopPoint_<ContainerAllocator> Type;

  StopPoint_()
    : id(0)
    , distance_shift(0.0)
    , angle(0.0)
    , distance_vertical(0.0)
    , type(0)
    , decelerate(false)  {
    }
  StopPoint_(const ContainerAllocator& _alloc)
    : id(0)
    , distance_shift(0.0)
    , angle(0.0)
    , distance_vertical(0.0)
    , type(0)
    , decelerate(false)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef double _distance_shift_type;
  _distance_shift_type distance_shift;

   typedef double _angle_type;
  _angle_type angle;

   typedef double _distance_vertical_type;
  _distance_vertical_type distance_vertical;

   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _decelerate_type;
  _decelerate_type decelerate;



  enum {
    TYPE_CRANE = 0u,
    TYPE_YARD = 1u,
    TYPE_OTHER = 2u,
  };


  typedef boost::shared_ptr< ::localization_msgs::StopPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::localization_msgs::StopPoint_<ContainerAllocator> const> ConstPtr;

}; // struct StopPoint_

typedef ::localization_msgs::StopPoint_<std::allocator<void> > StopPoint;

typedef boost::shared_ptr< ::localization_msgs::StopPoint > StopPointPtr;
typedef boost::shared_ptr< ::localization_msgs::StopPoint const> StopPointConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::localization_msgs::StopPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::localization_msgs::StopPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace localization_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'localization_msgs': ['/home/xjm/catkin_ws/src/interfaces/ros/localization/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::localization_msgs::StopPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::localization_msgs::StopPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localization_msgs::StopPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localization_msgs::StopPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization_msgs::StopPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization_msgs::StopPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::localization_msgs::StopPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "857da375e16b789899f14886149cb405";
  }

  static const char* value(const ::localization_msgs::StopPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x857da375e16b7898ULL;
  static const uint64_t static_value2 = 0x99f14886149cb405ULL;
};

template<class ContainerAllocator>
struct DataType< ::localization_msgs::StopPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "localization_msgs/StopPoint";
  }

  static const char* value(const ::localization_msgs::StopPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::localization_msgs::StopPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# main key\n\
int32 id\n\
\n\
# distance, [0, unlimit]\n\
float64 distance_shift\n\
\n\
\n\
float64 angle # rad\n\
float64 distance_vertical\n\
\n\
\n\
\n\
uint8 TYPE_CRANE = 0\n\
uint8 TYPE_YARD = 1\n\
uint8 TYPE_OTHER = 2\n\
\n\
# type\n\
uint8 type\n\
\n\
# decelerate flag\n\
bool decelerate # true\n\
\n\
\n\
";
  }

  static const char* value(const ::localization_msgs::StopPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::localization_msgs::StopPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.distance_shift);
      stream.next(m.angle);
      stream.next(m.distance_vertical);
      stream.next(m.type);
      stream.next(m.decelerate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StopPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::localization_msgs::StopPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::localization_msgs::StopPoint_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "distance_shift: ";
    Printer<double>::stream(s, indent + "  ", v.distance_shift);
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
    s << indent << "distance_vertical: ";
    Printer<double>::stream(s, indent + "  ", v.distance_vertical);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "decelerate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.decelerate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCALIZATION_MSGS_MESSAGE_STOPPOINT_H
