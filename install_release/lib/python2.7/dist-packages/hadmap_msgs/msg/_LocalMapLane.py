# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hadmap_msgs/LocalMapLane.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import hadmap_msgs.msg

class LocalMapLane(genpy.Message):
  _md5sum = "f3a9c307847eb3878abedcf1188d3601"
  _type = "hadmap_msgs/LocalMapLane"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# lane id
int32 id
# residual length
float32 residual_len

float32 stopline_distance
geometry_msgs/Point stopline

# central planning points
LocalMapPoint[] center
# left boundary
LocalMapPoint[] left
# right boundary
LocalMapPoint[] right



================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: hadmap_msgs/LocalMapPoint
uint8 TYPE_CROSS = 0
uint8 TYPE_NOT_CROSS = 1

# lane point localization
geometry_msgs/Point point
# heading angle
float32 heading
# now: cross or not
uint8 type
# speed limit
float32 speed_limit
"""
  __slots__ = ['id','residual_len','stopline_distance','stopline','center','left','right']
  _slot_types = ['int32','float32','float32','geometry_msgs/Point','hadmap_msgs/LocalMapPoint[]','hadmap_msgs/LocalMapPoint[]','hadmap_msgs/LocalMapPoint[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,residual_len,stopline_distance,stopline,center,left,right

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LocalMapLane, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.residual_len is None:
        self.residual_len = 0.
      if self.stopline_distance is None:
        self.stopline_distance = 0.
      if self.stopline is None:
        self.stopline = geometry_msgs.msg.Point()
      if self.center is None:
        self.center = []
      if self.left is None:
        self.left = []
      if self.right is None:
        self.right = []
    else:
      self.id = 0
      self.residual_len = 0.
      self.stopline_distance = 0.
      self.stopline = geometry_msgs.msg.Point()
      self.center = []
      self.left = []
      self.right = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i2f3d().pack(_x.id, _x.residual_len, _x.stopline_distance, _x.stopline.x, _x.stopline.y, _x.stopline.z))
      length = len(self.center)
      buff.write(_struct_I.pack(length))
      for val1 in self.center:
        _v1 = val1.point
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_fBf().pack(_x.heading, _x.type, _x.speed_limit))
      length = len(self.left)
      buff.write(_struct_I.pack(length))
      for val1 in self.left:
        _v2 = val1.point
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_fBf().pack(_x.heading, _x.type, _x.speed_limit))
      length = len(self.right)
      buff.write(_struct_I.pack(length))
      for val1 in self.right:
        _v3 = val1.point
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_fBf().pack(_x.heading, _x.type, _x.speed_limit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stopline is None:
        self.stopline = geometry_msgs.msg.Point()
      if self.center is None:
        self.center = None
      if self.left is None:
        self.left = None
      if self.right is None:
        self.right = None
      end = 0
      _x = self
      start = end
      end += 36
      (_x.id, _x.residual_len, _x.stopline_distance, _x.stopline.x, _x.stopline.y, _x.stopline.z,) = _get_struct_i2f3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.center = []
      for i in range(0, length):
        val1 = hadmap_msgs.msg.LocalMapPoint()
        _v4 = val1.point
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 9
        (_x.heading, _x.type, _x.speed_limit,) = _get_struct_fBf().unpack(str[start:end])
        self.center.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left = []
      for i in range(0, length):
        val1 = hadmap_msgs.msg.LocalMapPoint()
        _v5 = val1.point
        _x = _v5
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 9
        (_x.heading, _x.type, _x.speed_limit,) = _get_struct_fBf().unpack(str[start:end])
        self.left.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right = []
      for i in range(0, length):
        val1 = hadmap_msgs.msg.LocalMapPoint()
        _v6 = val1.point
        _x = _v6
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 9
        (_x.heading, _x.type, _x.speed_limit,) = _get_struct_fBf().unpack(str[start:end])
        self.right.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i2f3d().pack(_x.id, _x.residual_len, _x.stopline_distance, _x.stopline.x, _x.stopline.y, _x.stopline.z))
      length = len(self.center)
      buff.write(_struct_I.pack(length))
      for val1 in self.center:
        _v7 = val1.point
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_fBf().pack(_x.heading, _x.type, _x.speed_limit))
      length = len(self.left)
      buff.write(_struct_I.pack(length))
      for val1 in self.left:
        _v8 = val1.point
        _x = _v8
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_fBf().pack(_x.heading, _x.type, _x.speed_limit))
      length = len(self.right)
      buff.write(_struct_I.pack(length))
      for val1 in self.right:
        _v9 = val1.point
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_fBf().pack(_x.heading, _x.type, _x.speed_limit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stopline is None:
        self.stopline = geometry_msgs.msg.Point()
      if self.center is None:
        self.center = None
      if self.left is None:
        self.left = None
      if self.right is None:
        self.right = None
      end = 0
      _x = self
      start = end
      end += 36
      (_x.id, _x.residual_len, _x.stopline_distance, _x.stopline.x, _x.stopline.y, _x.stopline.z,) = _get_struct_i2f3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.center = []
      for i in range(0, length):
        val1 = hadmap_msgs.msg.LocalMapPoint()
        _v10 = val1.point
        _x = _v10
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 9
        (_x.heading, _x.type, _x.speed_limit,) = _get_struct_fBf().unpack(str[start:end])
        self.center.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left = []
      for i in range(0, length):
        val1 = hadmap_msgs.msg.LocalMapPoint()
        _v11 = val1.point
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 9
        (_x.heading, _x.type, _x.speed_limit,) = _get_struct_fBf().unpack(str[start:end])
        self.left.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right = []
      for i in range(0, length):
        val1 = hadmap_msgs.msg.LocalMapPoint()
        _v12 = val1.point
        _x = _v12
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 9
        (_x.heading, _x.type, _x.speed_limit,) = _get_struct_fBf().unpack(str[start:end])
        self.right.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_fBf = None
def _get_struct_fBf():
    global _struct_fBf
    if _struct_fBf is None:
        _struct_fBf = struct.Struct("<fBf")
    return _struct_fBf
_struct_i2f3d = None
def _get_struct_i2f3d():
    global _struct_i2f3d
    if _struct_i2f3d is None:
        _struct_i2f3d = struct.Struct("<i2f3d")
    return _struct_i2f3d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
