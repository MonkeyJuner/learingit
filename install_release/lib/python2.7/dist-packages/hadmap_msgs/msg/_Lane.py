# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hadmap_msgs/Lane.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import hadmap_msgs.msg

class Lane(genpy.Message):
  _md5sum = "b50505f45a3b08e2ee38ee2c2f0b9f41"
  _type = "hadmap_msgs/Lane"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 id

Point pt_start
Point pt_end

int32[] predecessors
int32[] successors

Point[] pts_center
Point[] pts_left
Point[] pts_right

float64[] len_integral

float64 speed_limit

## not used
uint8 line_left_type
uint8 line_right_type

## dynamic
int32 resign_id
float32 residual_len

================================================================================
MSG: hadmap_msgs/Point
int32 id

geometry_msgs/Point point

## not used

float32 heading
float64 delta_s
uint8 property

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['id','pt_start','pt_end','predecessors','successors','pts_center','pts_left','pts_right','len_integral','speed_limit','line_left_type','line_right_type','resign_id','residual_len']
  _slot_types = ['int32','hadmap_msgs/Point','hadmap_msgs/Point','int32[]','int32[]','hadmap_msgs/Point[]','hadmap_msgs/Point[]','hadmap_msgs/Point[]','float64[]','float64','uint8','uint8','int32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,pt_start,pt_end,predecessors,successors,pts_center,pts_left,pts_right,len_integral,speed_limit,line_left_type,line_right_type,resign_id,residual_len

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Lane, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.pt_start is None:
        self.pt_start = hadmap_msgs.msg.Point()
      if self.pt_end is None:
        self.pt_end = hadmap_msgs.msg.Point()
      if self.predecessors is None:
        self.predecessors = []
      if self.successors is None:
        self.successors = []
      if self.pts_center is None:
        self.pts_center = []
      if self.pts_left is None:
        self.pts_left = []
      if self.pts_right is None:
        self.pts_right = []
      if self.len_integral is None:
        self.len_integral = []
      if self.speed_limit is None:
        self.speed_limit = 0.
      if self.line_left_type is None:
        self.line_left_type = 0
      if self.line_right_type is None:
        self.line_right_type = 0
      if self.resign_id is None:
        self.resign_id = 0
      if self.residual_len is None:
        self.residual_len = 0.
    else:
      self.id = 0
      self.pt_start = hadmap_msgs.msg.Point()
      self.pt_end = hadmap_msgs.msg.Point()
      self.predecessors = []
      self.successors = []
      self.pts_center = []
      self.pts_left = []
      self.pts_right = []
      self.len_integral = []
      self.speed_limit = 0.
      self.line_left_type = 0
      self.line_right_type = 0
      self.resign_id = 0
      self.residual_len = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i3dfdBi3dfdB().pack(_x.id, _x.pt_start.id, _x.pt_start.point.x, _x.pt_start.point.y, _x.pt_start.point.z, _x.pt_start.heading, _x.pt_start.delta_s, _x.pt_start.property, _x.pt_end.id, _x.pt_end.point.x, _x.pt_end.point.y, _x.pt_end.point.z, _x.pt_end.heading, _x.pt_end.delta_s, _x.pt_end.property))
      length = len(self.predecessors)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.predecessors))
      length = len(self.successors)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.successors))
      length = len(self.pts_center)
      buff.write(_struct_I.pack(length))
      for val1 in self.pts_center:
        buff.write(_get_struct_i().pack(val1.id))
        _v1 = val1.point
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_fdB().pack(_x.heading, _x.delta_s, _x.property))
      length = len(self.pts_left)
      buff.write(_struct_I.pack(length))
      for val1 in self.pts_left:
        buff.write(_get_struct_i().pack(val1.id))
        _v2 = val1.point
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_fdB().pack(_x.heading, _x.delta_s, _x.property))
      length = len(self.pts_right)
      buff.write(_struct_I.pack(length))
      for val1 in self.pts_right:
        buff.write(_get_struct_i().pack(val1.id))
        _v3 = val1.point
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_fdB().pack(_x.heading, _x.delta_s, _x.property))
      length = len(self.len_integral)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.len_integral))
      _x = self
      buff.write(_get_struct_d2Bif().pack(_x.speed_limit, _x.line_left_type, _x.line_right_type, _x.resign_id, _x.residual_len))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pt_start is None:
        self.pt_start = hadmap_msgs.msg.Point()
      if self.pt_end is None:
        self.pt_end = hadmap_msgs.msg.Point()
      if self.pts_center is None:
        self.pts_center = None
      if self.pts_left is None:
        self.pts_left = None
      if self.pts_right is None:
        self.pts_right = None
      end = 0
      _x = self
      start = end
      end += 86
      (_x.id, _x.pt_start.id, _x.pt_start.point.x, _x.pt_start.point.y, _x.pt_start.point.z, _x.pt_start.heading, _x.pt_start.delta_s, _x.pt_start.property, _x.pt_end.id, _x.pt_end.point.x, _x.pt_end.point.y, _x.pt_end.point.z, _x.pt_end.heading, _x.pt_end.delta_s, _x.pt_end.property,) = _get_struct_2i3dfdBi3dfdB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.predecessors = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.successors = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pts_center = []
      for i in range(0, length):
        val1 = hadmap_msgs.msg.Point()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        _v4 = val1.point
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 13
        (_x.heading, _x.delta_s, _x.property,) = _get_struct_fdB().unpack(str[start:end])
        self.pts_center.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pts_left = []
      for i in range(0, length):
        val1 = hadmap_msgs.msg.Point()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        _v5 = val1.point
        _x = _v5
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 13
        (_x.heading, _x.delta_s, _x.property,) = _get_struct_fdB().unpack(str[start:end])
        self.pts_left.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pts_right = []
      for i in range(0, length):
        val1 = hadmap_msgs.msg.Point()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        _v6 = val1.point
        _x = _v6
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 13
        (_x.heading, _x.delta_s, _x.property,) = _get_struct_fdB().unpack(str[start:end])
        self.pts_right.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.len_integral = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 18
      (_x.speed_limit, _x.line_left_type, _x.line_right_type, _x.resign_id, _x.residual_len,) = _get_struct_d2Bif().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i3dfdBi3dfdB().pack(_x.id, _x.pt_start.id, _x.pt_start.point.x, _x.pt_start.point.y, _x.pt_start.point.z, _x.pt_start.heading, _x.pt_start.delta_s, _x.pt_start.property, _x.pt_end.id, _x.pt_end.point.x, _x.pt_end.point.y, _x.pt_end.point.z, _x.pt_end.heading, _x.pt_end.delta_s, _x.pt_end.property))
      length = len(self.predecessors)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.predecessors.tostring())
      length = len(self.successors)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.successors.tostring())
      length = len(self.pts_center)
      buff.write(_struct_I.pack(length))
      for val1 in self.pts_center:
        buff.write(_get_struct_i().pack(val1.id))
        _v7 = val1.point
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_fdB().pack(_x.heading, _x.delta_s, _x.property))
      length = len(self.pts_left)
      buff.write(_struct_I.pack(length))
      for val1 in self.pts_left:
        buff.write(_get_struct_i().pack(val1.id))
        _v8 = val1.point
        _x = _v8
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_fdB().pack(_x.heading, _x.delta_s, _x.property))
      length = len(self.pts_right)
      buff.write(_struct_I.pack(length))
      for val1 in self.pts_right:
        buff.write(_get_struct_i().pack(val1.id))
        _v9 = val1.point
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_fdB().pack(_x.heading, _x.delta_s, _x.property))
      length = len(self.len_integral)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.len_integral.tostring())
      _x = self
      buff.write(_get_struct_d2Bif().pack(_x.speed_limit, _x.line_left_type, _x.line_right_type, _x.resign_id, _x.residual_len))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pt_start is None:
        self.pt_start = hadmap_msgs.msg.Point()
      if self.pt_end is None:
        self.pt_end = hadmap_msgs.msg.Point()
      if self.pts_center is None:
        self.pts_center = None
      if self.pts_left is None:
        self.pts_left = None
      if self.pts_right is None:
        self.pts_right = None
      end = 0
      _x = self
      start = end
      end += 86
      (_x.id, _x.pt_start.id, _x.pt_start.point.x, _x.pt_start.point.y, _x.pt_start.point.z, _x.pt_start.heading, _x.pt_start.delta_s, _x.pt_start.property, _x.pt_end.id, _x.pt_end.point.x, _x.pt_end.point.y, _x.pt_end.point.z, _x.pt_end.heading, _x.pt_end.delta_s, _x.pt_end.property,) = _get_struct_2i3dfdBi3dfdB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.predecessors = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.successors = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pts_center = []
      for i in range(0, length):
        val1 = hadmap_msgs.msg.Point()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        _v10 = val1.point
        _x = _v10
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 13
        (_x.heading, _x.delta_s, _x.property,) = _get_struct_fdB().unpack(str[start:end])
        self.pts_center.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pts_left = []
      for i in range(0, length):
        val1 = hadmap_msgs.msg.Point()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        _v11 = val1.point
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 13
        (_x.heading, _x.delta_s, _x.property,) = _get_struct_fdB().unpack(str[start:end])
        self.pts_left.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pts_right = []
      for i in range(0, length):
        val1 = hadmap_msgs.msg.Point()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        _v12 = val1.point
        _x = _v12
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 13
        (_x.heading, _x.delta_s, _x.property,) = _get_struct_fdB().unpack(str[start:end])
        self.pts_right.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.len_integral = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 18
      (_x.speed_limit, _x.line_left_type, _x.line_right_type, _x.resign_id, _x.residual_len,) = _get_struct_d2Bif().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_d2Bif = None
def _get_struct_d2Bif():
    global _struct_d2Bif
    if _struct_d2Bif is None:
        _struct_d2Bif = struct.Struct("<d2Bif")
    return _struct_d2Bif
_struct_fdB = None
def _get_struct_fdB():
    global _struct_fdB
    if _struct_fdB is None:
        _struct_fdB = struct.Struct("<fdB")
    return _struct_fdB
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_2i3dfdBi3dfdB = None
def _get_struct_2i3dfdBi3dfdB():
    global _struct_2i3dfdBi3dfdB
    if _struct_2i3dfdBi3dfdB is None:
        _struct_2i3dfdBi3dfdB = struct.Struct("<2i3dfdBi3dfdB")
    return _struct_2i3dfdBi3dfdB
