# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hadmap_msgs/Map.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import hadmap_msgs.msg
import std_msgs.msg

class Map(genpy.Message):
  _md5sum = "a662a7aab241551bdda9dfc4dc1570e1"
  _type = "hadmap_msgs/Map"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
Section[] sections
uint32 task_id

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: hadmap_msgs/Section
uint8 TYPE_NORMAL = 0
uint8 TYPE_CROSS_BEFORE = 1
uint8 TYPE_CROSS_AFTER = 2
uint8 TYPE_CROSS_BEFORE_AND_AFTER = 3

int32 id
Lane[] lanes
int32[] predecessors
int32[] successors
uint8 type # 

float64[] stop_distances

================================================================================
MSG: hadmap_msgs/Lane
int32 id

Point pt_start
Point pt_end

int32[] predecessors
int32[] successors

Point[] pts_center
Point[] pts_left
Point[] pts_right

float64[] len_integral

float64 speed_limit

## not used
uint8 line_left_type
uint8 line_right_type

## dynamic
int32 resign_id
float32 residual_len

================================================================================
MSG: hadmap_msgs/Point
int32 id

geometry_msgs/Point point

## not used

float32 heading
float64 delta_s
uint8 property

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['header','sections','task_id']
  _slot_types = ['std_msgs/Header','hadmap_msgs/Section[]','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,sections,task_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Map, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sections is None:
        self.sections = []
      if self.task_id is None:
        self.task_id = 0
    else:
      self.header = std_msgs.msg.Header()
      self.sections = []
      self.task_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.sections)
      buff.write(_struct_I.pack(length))
      for val1 in self.sections:
        buff.write(_get_struct_i().pack(val1.id))
        length = len(val1.lanes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.lanes:
          buff.write(_get_struct_i().pack(val2.id))
          _v1 = val2.pt_start
          buff.write(_get_struct_i().pack(_v1.id))
          _v2 = _v1.point
          _x = _v2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v1
          buff.write(_get_struct_fdB().pack(_x.heading, _x.delta_s, _x.property))
          _v3 = val2.pt_end
          buff.write(_get_struct_i().pack(_v3.id))
          _v4 = _v3.point
          _x = _v4
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v3
          buff.write(_get_struct_fdB().pack(_x.heading, _x.delta_s, _x.property))
          length = len(val2.predecessors)
          buff.write(_struct_I.pack(length))
          pattern = '<%si'%length
          buff.write(struct.pack(pattern, *val2.predecessors))
          length = len(val2.successors)
          buff.write(_struct_I.pack(length))
          pattern = '<%si'%length
          buff.write(struct.pack(pattern, *val2.successors))
          length = len(val2.pts_center)
          buff.write(_struct_I.pack(length))
          for val3 in val2.pts_center:
            buff.write(_get_struct_i().pack(val3.id))
            _v5 = val3.point
            _x = _v5
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _x = val3
            buff.write(_get_struct_fdB().pack(_x.heading, _x.delta_s, _x.property))
          length = len(val2.pts_left)
          buff.write(_struct_I.pack(length))
          for val3 in val2.pts_left:
            buff.write(_get_struct_i().pack(val3.id))
            _v6 = val3.point
            _x = _v6
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _x = val3
            buff.write(_get_struct_fdB().pack(_x.heading, _x.delta_s, _x.property))
          length = len(val2.pts_right)
          buff.write(_struct_I.pack(length))
          for val3 in val2.pts_right:
            buff.write(_get_struct_i().pack(val3.id))
            _v7 = val3.point
            _x = _v7
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _x = val3
            buff.write(_get_struct_fdB().pack(_x.heading, _x.delta_s, _x.property))
          length = len(val2.len_integral)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.len_integral))
          _x = val2
          buff.write(_get_struct_d2Bif().pack(_x.speed_limit, _x.line_left_type, _x.line_right_type, _x.resign_id, _x.residual_len))
        length = len(val1.predecessors)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.pack(pattern, *val1.predecessors))
        length = len(val1.successors)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.pack(pattern, *val1.successors))
        buff.write(_get_struct_B().pack(val1.type))
        length = len(val1.stop_distances)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.stop_distances))
      buff.write(_get_struct_I().pack(self.task_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sections is None:
        self.sections = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sections = []
      for i in range(0, length):
        val1 = hadmap_msgs.msg.Section()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.lanes = []
        for i in range(0, length):
          val2 = hadmap_msgs.msg.Lane()
          start = end
          end += 4
          (val2.id,) = _get_struct_i().unpack(str[start:end])
          _v8 = val2.pt_start
          start = end
          end += 4
          (_v8.id,) = _get_struct_i().unpack(str[start:end])
          _v9 = _v8.point
          _x = _v9
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v8
          start = end
          end += 13
          (_x.heading, _x.delta_s, _x.property,) = _get_struct_fdB().unpack(str[start:end])
          _v10 = val2.pt_end
          start = end
          end += 4
          (_v10.id,) = _get_struct_i().unpack(str[start:end])
          _v11 = _v10.point
          _x = _v11
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v10
          start = end
          end += 13
          (_x.heading, _x.delta_s, _x.property,) = _get_struct_fdB().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%si'%length
          start = end
          end += struct.calcsize(pattern)
          val2.predecessors = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%si'%length
          start = end
          end += struct.calcsize(pattern)
          val2.successors = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.pts_center = []
          for i in range(0, length):
            val3 = hadmap_msgs.msg.Point()
            start = end
            end += 4
            (val3.id,) = _get_struct_i().unpack(str[start:end])
            _v12 = val3.point
            _x = _v12
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _x = val3
            start = end
            end += 13
            (_x.heading, _x.delta_s, _x.property,) = _get_struct_fdB().unpack(str[start:end])
            val2.pts_center.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.pts_left = []
          for i in range(0, length):
            val3 = hadmap_msgs.msg.Point()
            start = end
            end += 4
            (val3.id,) = _get_struct_i().unpack(str[start:end])
            _v13 = val3.point
            _x = _v13
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _x = val3
            start = end
            end += 13
            (_x.heading, _x.delta_s, _x.property,) = _get_struct_fdB().unpack(str[start:end])
            val2.pts_left.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.pts_right = []
          for i in range(0, length):
            val3 = hadmap_msgs.msg.Point()
            start = end
            end += 4
            (val3.id,) = _get_struct_i().unpack(str[start:end])
            _v14 = val3.point
            _x = _v14
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _x = val3
            start = end
            end += 13
            (_x.heading, _x.delta_s, _x.property,) = _get_struct_fdB().unpack(str[start:end])
            val2.pts_right.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.len_integral = struct.unpack(pattern, str[start:end])
          _x = val2
          start = end
          end += 18
          (_x.speed_limit, _x.line_left_type, _x.line_right_type, _x.resign_id, _x.residual_len,) = _get_struct_d2Bif().unpack(str[start:end])
          val1.lanes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        val1.predecessors = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        val1.successors = struct.unpack(pattern, str[start:end])
        start = end
        end += 1
        (val1.type,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.stop_distances = struct.unpack(pattern, str[start:end])
        self.sections.append(val1)
      start = end
      end += 4
      (self.task_id,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.sections)
      buff.write(_struct_I.pack(length))
      for val1 in self.sections:
        buff.write(_get_struct_i().pack(val1.id))
        length = len(val1.lanes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.lanes:
          buff.write(_get_struct_i().pack(val2.id))
          _v15 = val2.pt_start
          buff.write(_get_struct_i().pack(_v15.id))
          _v16 = _v15.point
          _x = _v16
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v15
          buff.write(_get_struct_fdB().pack(_x.heading, _x.delta_s, _x.property))
          _v17 = val2.pt_end
          buff.write(_get_struct_i().pack(_v17.id))
          _v18 = _v17.point
          _x = _v18
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v17
          buff.write(_get_struct_fdB().pack(_x.heading, _x.delta_s, _x.property))
          length = len(val2.predecessors)
          buff.write(_struct_I.pack(length))
          pattern = '<%si'%length
          buff.write(val2.predecessors.tostring())
          length = len(val2.successors)
          buff.write(_struct_I.pack(length))
          pattern = '<%si'%length
          buff.write(val2.successors.tostring())
          length = len(val2.pts_center)
          buff.write(_struct_I.pack(length))
          for val3 in val2.pts_center:
            buff.write(_get_struct_i().pack(val3.id))
            _v19 = val3.point
            _x = _v19
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _x = val3
            buff.write(_get_struct_fdB().pack(_x.heading, _x.delta_s, _x.property))
          length = len(val2.pts_left)
          buff.write(_struct_I.pack(length))
          for val3 in val2.pts_left:
            buff.write(_get_struct_i().pack(val3.id))
            _v20 = val3.point
            _x = _v20
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _x = val3
            buff.write(_get_struct_fdB().pack(_x.heading, _x.delta_s, _x.property))
          length = len(val2.pts_right)
          buff.write(_struct_I.pack(length))
          for val3 in val2.pts_right:
            buff.write(_get_struct_i().pack(val3.id))
            _v21 = val3.point
            _x = _v21
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _x = val3
            buff.write(_get_struct_fdB().pack(_x.heading, _x.delta_s, _x.property))
          length = len(val2.len_integral)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.len_integral.tostring())
          _x = val2
          buff.write(_get_struct_d2Bif().pack(_x.speed_limit, _x.line_left_type, _x.line_right_type, _x.resign_id, _x.residual_len))
        length = len(val1.predecessors)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.predecessors.tostring())
        length = len(val1.successors)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.successors.tostring())
        buff.write(_get_struct_B().pack(val1.type))
        length = len(val1.stop_distances)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.stop_distances.tostring())
      buff.write(_get_struct_I().pack(self.task_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sections is None:
        self.sections = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sections = []
      for i in range(0, length):
        val1 = hadmap_msgs.msg.Section()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.lanes = []
        for i in range(0, length):
          val2 = hadmap_msgs.msg.Lane()
          start = end
          end += 4
          (val2.id,) = _get_struct_i().unpack(str[start:end])
          _v22 = val2.pt_start
          start = end
          end += 4
          (_v22.id,) = _get_struct_i().unpack(str[start:end])
          _v23 = _v22.point
          _x = _v23
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v22
          start = end
          end += 13
          (_x.heading, _x.delta_s, _x.property,) = _get_struct_fdB().unpack(str[start:end])
          _v24 = val2.pt_end
          start = end
          end += 4
          (_v24.id,) = _get_struct_i().unpack(str[start:end])
          _v25 = _v24.point
          _x = _v25
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v24
          start = end
          end += 13
          (_x.heading, _x.delta_s, _x.property,) = _get_struct_fdB().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%si'%length
          start = end
          end += struct.calcsize(pattern)
          val2.predecessors = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%si'%length
          start = end
          end += struct.calcsize(pattern)
          val2.successors = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.pts_center = []
          for i in range(0, length):
            val3 = hadmap_msgs.msg.Point()
            start = end
            end += 4
            (val3.id,) = _get_struct_i().unpack(str[start:end])
            _v26 = val3.point
            _x = _v26
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _x = val3
            start = end
            end += 13
            (_x.heading, _x.delta_s, _x.property,) = _get_struct_fdB().unpack(str[start:end])
            val2.pts_center.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.pts_left = []
          for i in range(0, length):
            val3 = hadmap_msgs.msg.Point()
            start = end
            end += 4
            (val3.id,) = _get_struct_i().unpack(str[start:end])
            _v27 = val3.point
            _x = _v27
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _x = val3
            start = end
            end += 13
            (_x.heading, _x.delta_s, _x.property,) = _get_struct_fdB().unpack(str[start:end])
            val2.pts_left.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.pts_right = []
          for i in range(0, length):
            val3 = hadmap_msgs.msg.Point()
            start = end
            end += 4
            (val3.id,) = _get_struct_i().unpack(str[start:end])
            _v28 = val3.point
            _x = _v28
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _x = val3
            start = end
            end += 13
            (_x.heading, _x.delta_s, _x.property,) = _get_struct_fdB().unpack(str[start:end])
            val2.pts_right.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.len_integral = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _x = val2
          start = end
          end += 18
          (_x.speed_limit, _x.line_left_type, _x.line_right_type, _x.resign_id, _x.residual_len,) = _get_struct_d2Bif().unpack(str[start:end])
          val1.lanes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        val1.predecessors = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        val1.successors = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        start = end
        end += 1
        (val1.type,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.stop_distances = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.sections.append(val1)
      start = end
      end += 4
      (self.task_id,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d2Bif = None
def _get_struct_d2Bif():
    global _struct_d2Bif
    if _struct_d2Bif is None:
        _struct_d2Bif = struct.Struct("<d2Bif")
    return _struct_d2Bif
_struct_fdB = None
def _get_struct_fdB():
    global _struct_fdB
    if _struct_fdB is None:
        _struct_fdB = struct.Struct("<fdB")
    return _struct_fdB
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
