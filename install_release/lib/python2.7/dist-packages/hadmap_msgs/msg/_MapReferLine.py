# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hadmap_msgs/MapReferLine.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import hadmap_msgs.msg

class MapReferLine(genpy.Message):
  _md5sum = "34d3d1855a2eb9af60516c0b14a979dd"
  _type = "hadmap_msgs/MapReferLine"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
geometry_msgs/Point start_point
float64 heading
float64 length
MapSplineCoeff spline_coeff

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: hadmap_msgs/MapSplineCoeff
float64 start_offset
uint8 degree
uint8 dimension
float64 scale
float64[] spline_knots
geometry_msgs/Point[] spline_points
"""
  __slots__ = ['start_point','heading','length','spline_coeff']
  _slot_types = ['geometry_msgs/Point','float64','float64','hadmap_msgs/MapSplineCoeff']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       start_point,heading,length,spline_coeff

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MapReferLine, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.start_point is None:
        self.start_point = geometry_msgs.msg.Point()
      if self.heading is None:
        self.heading = 0.
      if self.length is None:
        self.length = 0.
      if self.spline_coeff is None:
        self.spline_coeff = hadmap_msgs.msg.MapSplineCoeff()
    else:
      self.start_point = geometry_msgs.msg.Point()
      self.heading = 0.
      self.length = 0.
      self.spline_coeff = hadmap_msgs.msg.MapSplineCoeff()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6d2Bd().pack(_x.start_point.x, _x.start_point.y, _x.start_point.z, _x.heading, _x.length, _x.spline_coeff.start_offset, _x.spline_coeff.degree, _x.spline_coeff.dimension, _x.spline_coeff.scale))
      length = len(self.spline_coeff.spline_knots)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.spline_coeff.spline_knots))
      length = len(self.spline_coeff.spline_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.spline_coeff.spline_points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.start_point is None:
        self.start_point = geometry_msgs.msg.Point()
      if self.spline_coeff is None:
        self.spline_coeff = hadmap_msgs.msg.MapSplineCoeff()
      end = 0
      _x = self
      start = end
      end += 58
      (_x.start_point.x, _x.start_point.y, _x.start_point.z, _x.heading, _x.length, _x.spline_coeff.start_offset, _x.spline_coeff.degree, _x.spline_coeff.dimension, _x.spline_coeff.scale,) = _get_struct_6d2Bd().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.spline_coeff.spline_knots = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.spline_coeff.spline_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.spline_coeff.spline_points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6d2Bd().pack(_x.start_point.x, _x.start_point.y, _x.start_point.z, _x.heading, _x.length, _x.spline_coeff.start_offset, _x.spline_coeff.degree, _x.spline_coeff.dimension, _x.spline_coeff.scale))
      length = len(self.spline_coeff.spline_knots)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.spline_coeff.spline_knots.tostring())
      length = len(self.spline_coeff.spline_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.spline_coeff.spline_points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.start_point is None:
        self.start_point = geometry_msgs.msg.Point()
      if self.spline_coeff is None:
        self.spline_coeff = hadmap_msgs.msg.MapSplineCoeff()
      end = 0
      _x = self
      start = end
      end += 58
      (_x.start_point.x, _x.start_point.y, _x.start_point.z, _x.heading, _x.length, _x.spline_coeff.start_offset, _x.spline_coeff.degree, _x.spline_coeff.dimension, _x.spline_coeff.scale,) = _get_struct_6d2Bd().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.spline_coeff.spline_knots = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.spline_coeff.spline_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.spline_coeff.spline_points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_6d2Bd = None
def _get_struct_6d2Bd():
    global _struct_6d2Bd
    if _struct_6d2Bd is None:
        _struct_6d2Bd = struct.Struct("<6d2Bd")
    return _struct_6d2Bd
