# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hadmap_msgs/MapSection.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import hadmap_msgs.msg
import std_msgs.msg

class MapSection(genpy.Message):
  _md5sum = "c157895ff86d00b131821caeb238419d"
  _type = "hadmap_msgs/MapSection"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

uint32 id
float64 s

MapReferLine refer_line
MapPolyCoeff[] z_coeffs
MapLane[] lanes

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: hadmap_msgs/MapReferLine

geometry_msgs/Point start_point
float64 heading
float64 length
MapSplineCoeff spline_coeff

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: hadmap_msgs/MapSplineCoeff
float64 start_offset
uint8 degree
uint8 dimension
float64 scale
float64[] spline_knots
geometry_msgs/Point[] spline_points

================================================================================
MSG: hadmap_msgs/MapPolyCoeff
float64 offset
float64[] poly_parameters

================================================================================
MSG: hadmap_msgs/MapLane
uint8 lane_type

MapPolyCoeff[] poly_coeffs

int16 predecessor
int16 successor

float32 lane_residual_len
float32 speed_limit
"""
  __slots__ = ['header','id','s','refer_line','z_coeffs','lanes']
  _slot_types = ['std_msgs/Header','uint32','float64','hadmap_msgs/MapReferLine','hadmap_msgs/MapPolyCoeff[]','hadmap_msgs/MapLane[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,id,s,refer_line,z_coeffs,lanes

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MapSection, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.id is None:
        self.id = 0
      if self.s is None:
        self.s = 0.
      if self.refer_line is None:
        self.refer_line = hadmap_msgs.msg.MapReferLine()
      if self.z_coeffs is None:
        self.z_coeffs = []
      if self.lanes is None:
        self.lanes = []
    else:
      self.header = std_msgs.msg.Header()
      self.id = 0
      self.s = 0.
      self.refer_line = hadmap_msgs.msg.MapReferLine()
      self.z_coeffs = []
      self.lanes = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I7d2Bd().pack(_x.id, _x.s, _x.refer_line.start_point.x, _x.refer_line.start_point.y, _x.refer_line.start_point.z, _x.refer_line.heading, _x.refer_line.length, _x.refer_line.spline_coeff.start_offset, _x.refer_line.spline_coeff.degree, _x.refer_line.spline_coeff.dimension, _x.refer_line.spline_coeff.scale))
      length = len(self.refer_line.spline_coeff.spline_knots)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.refer_line.spline_coeff.spline_knots))
      length = len(self.refer_line.spline_coeff.spline_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.refer_line.spline_coeff.spline_points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.z_coeffs)
      buff.write(_struct_I.pack(length))
      for val1 in self.z_coeffs:
        buff.write(_get_struct_d().pack(val1.offset))
        length = len(val1.poly_parameters)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.poly_parameters))
      length = len(self.lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.lanes:
        buff.write(_get_struct_B().pack(val1.lane_type))
        length = len(val1.poly_coeffs)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poly_coeffs:
          buff.write(_get_struct_d().pack(val2.offset))
          length = len(val2.poly_parameters)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.poly_parameters))
        _x = val1
        buff.write(_get_struct_2h2f().pack(_x.predecessor, _x.successor, _x.lane_residual_len, _x.speed_limit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.refer_line is None:
        self.refer_line = hadmap_msgs.msg.MapReferLine()
      if self.z_coeffs is None:
        self.z_coeffs = None
      if self.lanes is None:
        self.lanes = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 70
      (_x.id, _x.s, _x.refer_line.start_point.x, _x.refer_line.start_point.y, _x.refer_line.start_point.z, _x.refer_line.heading, _x.refer_line.length, _x.refer_line.spline_coeff.start_offset, _x.refer_line.spline_coeff.degree, _x.refer_line.spline_coeff.dimension, _x.refer_line.spline_coeff.scale,) = _get_struct_I7d2Bd().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.refer_line.spline_coeff.spline_knots = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.refer_line.spline_coeff.spline_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.refer_line.spline_coeff.spline_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.z_coeffs = []
      for i in range(0, length):
        val1 = hadmap_msgs.msg.MapPolyCoeff()
        start = end
        end += 8
        (val1.offset,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.poly_parameters = struct.unpack(pattern, str[start:end])
        self.z_coeffs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lanes = []
      for i in range(0, length):
        val1 = hadmap_msgs.msg.MapLane()
        start = end
        end += 1
        (val1.lane_type,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poly_coeffs = []
        for i in range(0, length):
          val2 = hadmap_msgs.msg.MapPolyCoeff()
          start = end
          end += 8
          (val2.offset,) = _get_struct_d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.poly_parameters = struct.unpack(pattern, str[start:end])
          val1.poly_coeffs.append(val2)
        _x = val1
        start = end
        end += 12
        (_x.predecessor, _x.successor, _x.lane_residual_len, _x.speed_limit,) = _get_struct_2h2f().unpack(str[start:end])
        self.lanes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I7d2Bd().pack(_x.id, _x.s, _x.refer_line.start_point.x, _x.refer_line.start_point.y, _x.refer_line.start_point.z, _x.refer_line.heading, _x.refer_line.length, _x.refer_line.spline_coeff.start_offset, _x.refer_line.spline_coeff.degree, _x.refer_line.spline_coeff.dimension, _x.refer_line.spline_coeff.scale))
      length = len(self.refer_line.spline_coeff.spline_knots)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.refer_line.spline_coeff.spline_knots.tostring())
      length = len(self.refer_line.spline_coeff.spline_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.refer_line.spline_coeff.spline_points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.z_coeffs)
      buff.write(_struct_I.pack(length))
      for val1 in self.z_coeffs:
        buff.write(_get_struct_d().pack(val1.offset))
        length = len(val1.poly_parameters)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.poly_parameters.tostring())
      length = len(self.lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.lanes:
        buff.write(_get_struct_B().pack(val1.lane_type))
        length = len(val1.poly_coeffs)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poly_coeffs:
          buff.write(_get_struct_d().pack(val2.offset))
          length = len(val2.poly_parameters)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.poly_parameters.tostring())
        _x = val1
        buff.write(_get_struct_2h2f().pack(_x.predecessor, _x.successor, _x.lane_residual_len, _x.speed_limit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.refer_line is None:
        self.refer_line = hadmap_msgs.msg.MapReferLine()
      if self.z_coeffs is None:
        self.z_coeffs = None
      if self.lanes is None:
        self.lanes = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 70
      (_x.id, _x.s, _x.refer_line.start_point.x, _x.refer_line.start_point.y, _x.refer_line.start_point.z, _x.refer_line.heading, _x.refer_line.length, _x.refer_line.spline_coeff.start_offset, _x.refer_line.spline_coeff.degree, _x.refer_line.spline_coeff.dimension, _x.refer_line.spline_coeff.scale,) = _get_struct_I7d2Bd().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.refer_line.spline_coeff.spline_knots = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.refer_line.spline_coeff.spline_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.refer_line.spline_coeff.spline_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.z_coeffs = []
      for i in range(0, length):
        val1 = hadmap_msgs.msg.MapPolyCoeff()
        start = end
        end += 8
        (val1.offset,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.poly_parameters = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.z_coeffs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lanes = []
      for i in range(0, length):
        val1 = hadmap_msgs.msg.MapLane()
        start = end
        end += 1
        (val1.lane_type,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poly_coeffs = []
        for i in range(0, length):
          val2 = hadmap_msgs.msg.MapPolyCoeff()
          start = end
          end += 8
          (val2.offset,) = _get_struct_d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.poly_parameters = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          val1.poly_coeffs.append(val2)
        _x = val1
        start = end
        end += 12
        (_x.predecessor, _x.successor, _x.lane_residual_len, _x.speed_limit,) = _get_struct_2h2f().unpack(str[start:end])
        self.lanes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2h2f = None
def _get_struct_2h2f():
    global _struct_2h2f
    if _struct_2h2f is None:
        _struct_2h2f = struct.Struct("<2h2f")
    return _struct_2h2f
_struct_I7d2Bd = None
def _get_struct_I7d2Bd():
    global _struct_I7d2Bd
    if _struct_I7d2Bd is None:
        _struct_I7d2Bd = struct.Struct("<I7d2Bd")
    return _struct_I7d2Bd
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
