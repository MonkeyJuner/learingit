# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hadmap_msgs/LocalMapSection.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import hadmap_msgs.msg
import std_msgs.msg

class LocalMapSection(genpy.Message):
  _md5sum = "2e2581a2675681ccfe2f2c202442f570"
  _type = "hadmap_msgs/LocalMapSection"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
LocalMapLane[] lanes



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: hadmap_msgs/LocalMapLane
# lane id
int32 id
# residual length
float32 residual_len

float32 stopline_distance
geometry_msgs/Point stopline

# central planning points
LocalMapPoint[] center
# left boundary
LocalMapPoint[] left
# right boundary
LocalMapPoint[] right



================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: hadmap_msgs/LocalMapPoint
uint8 TYPE_CROSS = 0
uint8 TYPE_NOT_CROSS = 1

# lane point localization
geometry_msgs/Point point
# heading angle
float32 heading
# now: cross or not
uint8 type
# speed limit
float32 speed_limit
"""
  __slots__ = ['header','lanes']
  _slot_types = ['std_msgs/Header','hadmap_msgs/LocalMapLane[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,lanes

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LocalMapSection, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lanes is None:
        self.lanes = []
    else:
      self.header = std_msgs.msg.Header()
      self.lanes = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.lanes:
        _x = val1
        buff.write(_get_struct_i2f().pack(_x.id, _x.residual_len, _x.stopline_distance))
        _v1 = val1.stopline
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.center)
        buff.write(_struct_I.pack(length))
        for val2 in val1.center:
          _v2 = val2.point
          _x = _v2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2
          buff.write(_get_struct_fBf().pack(_x.heading, _x.type, _x.speed_limit))
        length = len(val1.left)
        buff.write(_struct_I.pack(length))
        for val2 in val1.left:
          _v3 = val2.point
          _x = _v3
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2
          buff.write(_get_struct_fBf().pack(_x.heading, _x.type, _x.speed_limit))
        length = len(val1.right)
        buff.write(_struct_I.pack(length))
        for val2 in val1.right:
          _v4 = val2.point
          _x = _v4
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2
          buff.write(_get_struct_fBf().pack(_x.heading, _x.type, _x.speed_limit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lanes is None:
        self.lanes = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lanes = []
      for i in range(0, length):
        val1 = hadmap_msgs.msg.LocalMapLane()
        _x = val1
        start = end
        end += 12
        (_x.id, _x.residual_len, _x.stopline_distance,) = _get_struct_i2f().unpack(str[start:end])
        _v5 = val1.stopline
        _x = _v5
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.center = []
        for i in range(0, length):
          val2 = hadmap_msgs.msg.LocalMapPoint()
          _v6 = val2.point
          _x = _v6
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = val2
          start = end
          end += 9
          (_x.heading, _x.type, _x.speed_limit,) = _get_struct_fBf().unpack(str[start:end])
          val1.center.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.left = []
        for i in range(0, length):
          val2 = hadmap_msgs.msg.LocalMapPoint()
          _v7 = val2.point
          _x = _v7
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = val2
          start = end
          end += 9
          (_x.heading, _x.type, _x.speed_limit,) = _get_struct_fBf().unpack(str[start:end])
          val1.left.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.right = []
        for i in range(0, length):
          val2 = hadmap_msgs.msg.LocalMapPoint()
          _v8 = val2.point
          _x = _v8
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = val2
          start = end
          end += 9
          (_x.heading, _x.type, _x.speed_limit,) = _get_struct_fBf().unpack(str[start:end])
          val1.right.append(val2)
        self.lanes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.lanes:
        _x = val1
        buff.write(_get_struct_i2f().pack(_x.id, _x.residual_len, _x.stopline_distance))
        _v9 = val1.stopline
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.center)
        buff.write(_struct_I.pack(length))
        for val2 in val1.center:
          _v10 = val2.point
          _x = _v10
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2
          buff.write(_get_struct_fBf().pack(_x.heading, _x.type, _x.speed_limit))
        length = len(val1.left)
        buff.write(_struct_I.pack(length))
        for val2 in val1.left:
          _v11 = val2.point
          _x = _v11
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2
          buff.write(_get_struct_fBf().pack(_x.heading, _x.type, _x.speed_limit))
        length = len(val1.right)
        buff.write(_struct_I.pack(length))
        for val2 in val1.right:
          _v12 = val2.point
          _x = _v12
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2
          buff.write(_get_struct_fBf().pack(_x.heading, _x.type, _x.speed_limit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lanes is None:
        self.lanes = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lanes = []
      for i in range(0, length):
        val1 = hadmap_msgs.msg.LocalMapLane()
        _x = val1
        start = end
        end += 12
        (_x.id, _x.residual_len, _x.stopline_distance,) = _get_struct_i2f().unpack(str[start:end])
        _v13 = val1.stopline
        _x = _v13
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.center = []
        for i in range(0, length):
          val2 = hadmap_msgs.msg.LocalMapPoint()
          _v14 = val2.point
          _x = _v14
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = val2
          start = end
          end += 9
          (_x.heading, _x.type, _x.speed_limit,) = _get_struct_fBf().unpack(str[start:end])
          val1.center.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.left = []
        for i in range(0, length):
          val2 = hadmap_msgs.msg.LocalMapPoint()
          _v15 = val2.point
          _x = _v15
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = val2
          start = end
          end += 9
          (_x.heading, _x.type, _x.speed_limit,) = _get_struct_fBf().unpack(str[start:end])
          val1.left.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.right = []
        for i in range(0, length):
          val2 = hadmap_msgs.msg.LocalMapPoint()
          _v16 = val2.point
          _x = _v16
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = val2
          start = end
          end += 9
          (_x.heading, _x.type, _x.speed_limit,) = _get_struct_fBf().unpack(str[start:end])
          val1.right.append(val2)
        self.lanes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_fBf = None
def _get_struct_fBf():
    global _struct_fBf
    if _struct_fBf is None:
        _struct_fBf = struct.Struct("<fBf")
    return _struct_fBf
_struct_i2f = None
def _get_struct_i2f():
    global _struct_i2f
    if _struct_i2f is None:
        _struct_i2f = struct.Struct("<i2f")
    return _struct_i2f
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
