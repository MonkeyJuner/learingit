# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hadmap_msgs/MapLane.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import hadmap_msgs.msg

class MapLane(genpy.Message):
  _md5sum = "1afa43e53ccebe2d6ea6280b4380157c"
  _type = "hadmap_msgs/MapLane"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 lane_type

MapPolyCoeff[] poly_coeffs

int16 predecessor
int16 successor

float32 lane_residual_len
float32 speed_limit

================================================================================
MSG: hadmap_msgs/MapPolyCoeff
float64 offset
float64[] poly_parameters
"""
  __slots__ = ['lane_type','poly_coeffs','predecessor','successor','lane_residual_len','speed_limit']
  _slot_types = ['uint8','hadmap_msgs/MapPolyCoeff[]','int16','int16','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lane_type,poly_coeffs,predecessor,successor,lane_residual_len,speed_limit

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MapLane, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.lane_type is None:
        self.lane_type = 0
      if self.poly_coeffs is None:
        self.poly_coeffs = []
      if self.predecessor is None:
        self.predecessor = 0
      if self.successor is None:
        self.successor = 0
      if self.lane_residual_len is None:
        self.lane_residual_len = 0.
      if self.speed_limit is None:
        self.speed_limit = 0.
    else:
      self.lane_type = 0
      self.poly_coeffs = []
      self.predecessor = 0
      self.successor = 0
      self.lane_residual_len = 0.
      self.speed_limit = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.lane_type))
      length = len(self.poly_coeffs)
      buff.write(_struct_I.pack(length))
      for val1 in self.poly_coeffs:
        buff.write(_get_struct_d().pack(val1.offset))
        length = len(val1.poly_parameters)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.poly_parameters))
      _x = self
      buff.write(_get_struct_2h2f().pack(_x.predecessor, _x.successor, _x.lane_residual_len, _x.speed_limit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.poly_coeffs is None:
        self.poly_coeffs = None
      end = 0
      start = end
      end += 1
      (self.lane_type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poly_coeffs = []
      for i in range(0, length):
        val1 = hadmap_msgs.msg.MapPolyCoeff()
        start = end
        end += 8
        (val1.offset,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.poly_parameters = struct.unpack(pattern, str[start:end])
        self.poly_coeffs.append(val1)
      _x = self
      start = end
      end += 12
      (_x.predecessor, _x.successor, _x.lane_residual_len, _x.speed_limit,) = _get_struct_2h2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.lane_type))
      length = len(self.poly_coeffs)
      buff.write(_struct_I.pack(length))
      for val1 in self.poly_coeffs:
        buff.write(_get_struct_d().pack(val1.offset))
        length = len(val1.poly_parameters)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.poly_parameters.tostring())
      _x = self
      buff.write(_get_struct_2h2f().pack(_x.predecessor, _x.successor, _x.lane_residual_len, _x.speed_limit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.poly_coeffs is None:
        self.poly_coeffs = None
      end = 0
      start = end
      end += 1
      (self.lane_type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poly_coeffs = []
      for i in range(0, length):
        val1 = hadmap_msgs.msg.MapPolyCoeff()
        start = end
        end += 8
        (val1.offset,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.poly_parameters = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.poly_coeffs.append(val1)
      _x = self
      start = end
      end += 12
      (_x.predecessor, _x.successor, _x.lane_residual_len, _x.speed_limit,) = _get_struct_2h2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2h2f = None
def _get_struct_2h2f():
    global _struct_2h2f
    if _struct_2h2f is None:
        _struct_2h2f = struct.Struct("<2h2f")
    return _struct_2h2f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
