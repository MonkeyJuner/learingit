# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tos_msgs/ShadowTargetRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import tos_msgs.msg
import std_msgs.msg

class ShadowTargetRequest(genpy.Message):
  _md5sum = "b7dbdabb95200fe85e191f164fd27ae8"
  _type = "tos_msgs/ShadowTargetRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """TruckTarget truck_target


================================================================================
MSG: tos_msgs/TruckTarget
# command type
uint8 START_FROM      = 0
uint8 ARRIVE_AT       = 1

# operate type
uint8 LOAD	= 0
uint8 UNLOAD	= 1


Header header

# truck id
string cheid

# task id
uint32 task_id
uint16 sub_task_id

# taget info
TargetInfo[] targets

# display message
string display_msg

# operate
uint8 operate_type

# for test
uint8 command_type
int32 send_packet_id

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: tos_msgs/TargetInfo
# target type
uint8 NORMAL_YARD_CRANE         = 0
uint8 AUTOMATIC_YARD_CRANE      = 1
uint8 GANTRY_CRANE      	= 2
uint8 TRANSFER_ZONE      	= 3

# target
uint8 target_type

# target info
string section
string bay
string transfer_zone

string gantry_crane_id
string lane_id

# container
Container container

# move stage
string move_stage

# for test
string ppos

================================================================================
MSG: tos_msgs/Container
string container_id
uint8 container_size
int32 container_weight
uint8 container_pos 
"""
  __slots__ = ['truck_target']
  _slot_types = ['tos_msgs/TruckTarget']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       truck_target

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ShadowTargetRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.truck_target is None:
        self.truck_target = tos_msgs.msg.TruckTarget()
    else:
      self.truck_target = tos_msgs.msg.TruckTarget()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.truck_target.header.seq, _x.truck_target.header.stamp.secs, _x.truck_target.header.stamp.nsecs))
      _x = self.truck_target.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.truck_target.cheid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_IH().pack(_x.truck_target.task_id, _x.truck_target.sub_task_id))
      length = len(self.truck_target.targets)
      buff.write(_struct_I.pack(length))
      for val1 in self.truck_target.targets:
        buff.write(_get_struct_B().pack(val1.target_type))
        _x = val1.section
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.bay
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.transfer_zone
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.gantry_crane_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.lane_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v1 = val1.container
        _x = _v1.container_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v1
        buff.write(_get_struct_BiB().pack(_x.container_size, _x.container_weight, _x.container_pos))
        _x = val1.move_stage
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.ppos
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.truck_target.display_msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2Bi().pack(_x.truck_target.operate_type, _x.truck_target.command_type, _x.truck_target.send_packet_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.truck_target is None:
        self.truck_target = tos_msgs.msg.TruckTarget()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.truck_target.header.seq, _x.truck_target.header.stamp.secs, _x.truck_target.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.truck_target.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.truck_target.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.truck_target.cheid = str[start:end].decode('utf-8')
      else:
        self.truck_target.cheid = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.truck_target.task_id, _x.truck_target.sub_task_id,) = _get_struct_IH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.truck_target.targets = []
      for i in range(0, length):
        val1 = tos_msgs.msg.TargetInfo()
        start = end
        end += 1
        (val1.target_type,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.section = str[start:end].decode('utf-8')
        else:
          val1.section = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.bay = str[start:end].decode('utf-8')
        else:
          val1.bay = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.transfer_zone = str[start:end].decode('utf-8')
        else:
          val1.transfer_zone = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.gantry_crane_id = str[start:end].decode('utf-8')
        else:
          val1.gantry_crane_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.lane_id = str[start:end].decode('utf-8')
        else:
          val1.lane_id = str[start:end]
        _v2 = val1.container
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v2.container_id = str[start:end].decode('utf-8')
        else:
          _v2.container_id = str[start:end]
        _x = _v2
        start = end
        end += 6
        (_x.container_size, _x.container_weight, _x.container_pos,) = _get_struct_BiB().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.move_stage = str[start:end].decode('utf-8')
        else:
          val1.move_stage = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.ppos = str[start:end].decode('utf-8')
        else:
          val1.ppos = str[start:end]
        self.truck_target.targets.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.truck_target.display_msg = str[start:end].decode('utf-8')
      else:
        self.truck_target.display_msg = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.truck_target.operate_type, _x.truck_target.command_type, _x.truck_target.send_packet_id,) = _get_struct_2Bi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.truck_target.header.seq, _x.truck_target.header.stamp.secs, _x.truck_target.header.stamp.nsecs))
      _x = self.truck_target.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.truck_target.cheid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_IH().pack(_x.truck_target.task_id, _x.truck_target.sub_task_id))
      length = len(self.truck_target.targets)
      buff.write(_struct_I.pack(length))
      for val1 in self.truck_target.targets:
        buff.write(_get_struct_B().pack(val1.target_type))
        _x = val1.section
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.bay
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.transfer_zone
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.gantry_crane_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.lane_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v3 = val1.container
        _x = _v3.container_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v3
        buff.write(_get_struct_BiB().pack(_x.container_size, _x.container_weight, _x.container_pos))
        _x = val1.move_stage
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.ppos
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.truck_target.display_msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2Bi().pack(_x.truck_target.operate_type, _x.truck_target.command_type, _x.truck_target.send_packet_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.truck_target is None:
        self.truck_target = tos_msgs.msg.TruckTarget()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.truck_target.header.seq, _x.truck_target.header.stamp.secs, _x.truck_target.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.truck_target.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.truck_target.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.truck_target.cheid = str[start:end].decode('utf-8')
      else:
        self.truck_target.cheid = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.truck_target.task_id, _x.truck_target.sub_task_id,) = _get_struct_IH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.truck_target.targets = []
      for i in range(0, length):
        val1 = tos_msgs.msg.TargetInfo()
        start = end
        end += 1
        (val1.target_type,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.section = str[start:end].decode('utf-8')
        else:
          val1.section = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.bay = str[start:end].decode('utf-8')
        else:
          val1.bay = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.transfer_zone = str[start:end].decode('utf-8')
        else:
          val1.transfer_zone = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.gantry_crane_id = str[start:end].decode('utf-8')
        else:
          val1.gantry_crane_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.lane_id = str[start:end].decode('utf-8')
        else:
          val1.lane_id = str[start:end]
        _v4 = val1.container
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v4.container_id = str[start:end].decode('utf-8')
        else:
          _v4.container_id = str[start:end]
        _x = _v4
        start = end
        end += 6
        (_x.container_size, _x.container_weight, _x.container_pos,) = _get_struct_BiB().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.move_stage = str[start:end].decode('utf-8')
        else:
          val1.move_stage = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.ppos = str[start:end].decode('utf-8')
        else:
          val1.ppos = str[start:end]
        self.truck_target.targets.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.truck_target.display_msg = str[start:end].decode('utf-8')
      else:
        self.truck_target.display_msg = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.truck_target.operate_type, _x.truck_target.command_type, _x.truck_target.send_packet_id,) = _get_struct_2Bi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_IH = None
def _get_struct_IH():
    global _struct_IH
    if _struct_IH is None:
        _struct_IH = struct.Struct("<IH")
    return _struct_IH
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_BiB = None
def _get_struct_BiB():
    global _struct_BiB
    if _struct_BiB is None:
        _struct_BiB = struct.Struct("<BiB")
    return _struct_BiB
_struct_2Bi = None
def _get_struct_2Bi():
    global _struct_2Bi
    if _struct_2Bi is None:
        _struct_2Bi = struct.Struct("<2Bi")
    return _struct_2Bi
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tos_msgs/ShadowTargetResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ShadowTargetResponse(genpy.Message):
  _md5sum = "284aa12dd9e9e760802ac9f38036ea5e"
  _type = "tos_msgs/ShadowTargetResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
uint8 status

"""
  __slots__ = ['status']
  _slot_types = ['uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ShadowTargetResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = 0
    else:
      self.status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.status,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.status,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class ShadowTarget(object):
  _type          = 'tos_msgs/ShadowTarget'
  _md5sum = 'c8f1f473ae1dd2b6970b5ebd559b96a3'
  _request_class  = ShadowTargetRequest
  _response_class = ShadowTargetResponse
