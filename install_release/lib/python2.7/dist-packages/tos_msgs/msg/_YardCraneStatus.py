# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tos_msgs/YardCraneStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class YardCraneStatus(genpy.Message):
  _md5sum = "6bc9a1eb677c70a420a1ae553255debf"
  _type = "tos_msgs/YardCraneStatus"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

string WorkOrder
int32 CraneNBR
string TruckNBR
string Time
float64 GantryPosition
uint8 GantryMove
float64 TrolleyPosition
float64 HositPosition
uint8 SpreadLock
float64 SpreadLoad
int32 SpreadWorkType
uint8 VasStatus
uint8 TruckLoad
uint8 TruckInPosition
uint8 SpreadOnChassis
uint8 TruckLeave
int32 Distance

int32 send_packet_id


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','WorkOrder','CraneNBR','TruckNBR','Time','GantryPosition','GantryMove','TrolleyPosition','HositPosition','SpreadLock','SpreadLoad','SpreadWorkType','VasStatus','TruckLoad','TruckInPosition','SpreadOnChassis','TruckLeave','Distance','send_packet_id']
  _slot_types = ['std_msgs/Header','string','int32','string','string','float64','uint8','float64','float64','uint8','float64','int32','uint8','uint8','uint8','uint8','uint8','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,WorkOrder,CraneNBR,TruckNBR,Time,GantryPosition,GantryMove,TrolleyPosition,HositPosition,SpreadLock,SpreadLoad,SpreadWorkType,VasStatus,TruckLoad,TruckInPosition,SpreadOnChassis,TruckLeave,Distance,send_packet_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(YardCraneStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.WorkOrder is None:
        self.WorkOrder = ''
      if self.CraneNBR is None:
        self.CraneNBR = 0
      if self.TruckNBR is None:
        self.TruckNBR = ''
      if self.Time is None:
        self.Time = ''
      if self.GantryPosition is None:
        self.GantryPosition = 0.
      if self.GantryMove is None:
        self.GantryMove = 0
      if self.TrolleyPosition is None:
        self.TrolleyPosition = 0.
      if self.HositPosition is None:
        self.HositPosition = 0.
      if self.SpreadLock is None:
        self.SpreadLock = 0
      if self.SpreadLoad is None:
        self.SpreadLoad = 0.
      if self.SpreadWorkType is None:
        self.SpreadWorkType = 0
      if self.VasStatus is None:
        self.VasStatus = 0
      if self.TruckLoad is None:
        self.TruckLoad = 0
      if self.TruckInPosition is None:
        self.TruckInPosition = 0
      if self.SpreadOnChassis is None:
        self.SpreadOnChassis = 0
      if self.TruckLeave is None:
        self.TruckLeave = 0
      if self.Distance is None:
        self.Distance = 0
      if self.send_packet_id is None:
        self.send_packet_id = 0
    else:
      self.header = std_msgs.msg.Header()
      self.WorkOrder = ''
      self.CraneNBR = 0
      self.TruckNBR = ''
      self.Time = ''
      self.GantryPosition = 0.
      self.GantryMove = 0
      self.TrolleyPosition = 0.
      self.HositPosition = 0.
      self.SpreadLock = 0
      self.SpreadLoad = 0.
      self.SpreadWorkType = 0
      self.VasStatus = 0
      self.TruckLoad = 0
      self.TruckInPosition = 0
      self.SpreadOnChassis = 0
      self.TruckLeave = 0
      self.Distance = 0
      self.send_packet_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.WorkOrder
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.CraneNBR))
      _x = self.TruckNBR
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.Time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_dB2dBdi5B2i().pack(_x.GantryPosition, _x.GantryMove, _x.TrolleyPosition, _x.HositPosition, _x.SpreadLock, _x.SpreadLoad, _x.SpreadWorkType, _x.VasStatus, _x.TruckLoad, _x.TruckInPosition, _x.SpreadOnChassis, _x.TruckLeave, _x.Distance, _x.send_packet_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.WorkOrder = str[start:end].decode('utf-8')
      else:
        self.WorkOrder = str[start:end]
      start = end
      end += 4
      (self.CraneNBR,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.TruckNBR = str[start:end].decode('utf-8')
      else:
        self.TruckNBR = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Time = str[start:end].decode('utf-8')
      else:
        self.Time = str[start:end]
      _x = self
      start = end
      end += 51
      (_x.GantryPosition, _x.GantryMove, _x.TrolleyPosition, _x.HositPosition, _x.SpreadLock, _x.SpreadLoad, _x.SpreadWorkType, _x.VasStatus, _x.TruckLoad, _x.TruckInPosition, _x.SpreadOnChassis, _x.TruckLeave, _x.Distance, _x.send_packet_id,) = _get_struct_dB2dBdi5B2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.WorkOrder
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.CraneNBR))
      _x = self.TruckNBR
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.Time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_dB2dBdi5B2i().pack(_x.GantryPosition, _x.GantryMove, _x.TrolleyPosition, _x.HositPosition, _x.SpreadLock, _x.SpreadLoad, _x.SpreadWorkType, _x.VasStatus, _x.TruckLoad, _x.TruckInPosition, _x.SpreadOnChassis, _x.TruckLeave, _x.Distance, _x.send_packet_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.WorkOrder = str[start:end].decode('utf-8')
      else:
        self.WorkOrder = str[start:end]
      start = end
      end += 4
      (self.CraneNBR,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.TruckNBR = str[start:end].decode('utf-8')
      else:
        self.TruckNBR = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Time = str[start:end].decode('utf-8')
      else:
        self.Time = str[start:end]
      _x = self
      start = end
      end += 51
      (_x.GantryPosition, _x.GantryMove, _x.TrolleyPosition, _x.HositPosition, _x.SpreadLock, _x.SpreadLoad, _x.SpreadWorkType, _x.VasStatus, _x.TruckLoad, _x.TruckInPosition, _x.SpreadOnChassis, _x.TruckLeave, _x.Distance, _x.send_packet_id,) = _get_struct_dB2dBdi5B2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_dB2dBdi5B2i = None
def _get_struct_dB2dBdi5B2i():
    global _struct_dB2dBdi5B2i
    if _struct_dB2dBdi5B2i is None:
        _struct_dB2dBdi5B2i = struct.Struct("<dB2dBdi5B2i")
    return _struct_dB2dBdi5B2i
