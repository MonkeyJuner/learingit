# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tos_msgs/Container.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Container(genpy.Message):
  _md5sum = "fd22eca006ec43bbf4e6912d6c115e28"
  _type = "tos_msgs/Container"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string container_id
uint8 container_size
int32 container_weight
uint8 container_pos 
"""
  __slots__ = ['container_id','container_size','container_weight','container_pos']
  _slot_types = ['string','uint8','int32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       container_id,container_size,container_weight,container_pos

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Container, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.container_id is None:
        self.container_id = ''
      if self.container_size is None:
        self.container_size = 0
      if self.container_weight is None:
        self.container_weight = 0
      if self.container_pos is None:
        self.container_pos = 0
    else:
      self.container_id = ''
      self.container_size = 0
      self.container_weight = 0
      self.container_pos = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.container_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BiB().pack(_x.container_size, _x.container_weight, _x.container_pos))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.container_id = str[start:end].decode('utf-8')
      else:
        self.container_id = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.container_size, _x.container_weight, _x.container_pos,) = _get_struct_BiB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.container_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BiB().pack(_x.container_size, _x.container_weight, _x.container_pos))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.container_id = str[start:end].decode('utf-8')
      else:
        self.container_id = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.container_size, _x.container_weight, _x.container_pos,) = _get_struct_BiB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BiB = None
def _get_struct_BiB():
    global _struct_BiB
    if _struct_BiB is None:
        _struct_BiB = struct.Struct("<BiB")
    return _struct_BiB
