# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pnc_msgs/VehicleCmd.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import pncc_msgs.msg
import std_msgs.msg

class VehicleCmd(genpy.Message):
  _md5sum = "d13944380411e88decad84bf9d937781"
  _type = "pnc_msgs/VehicleCmd"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """uint8 MODE_MANUAL = 100
uint8 MODE_AUTO = 101

uint8 OFF = 150              # For horn, left_light and right_light
uint8 ON = 151               # For horn, left_light and right_light

uint8 TURN_LIGHT_LEFT = 0
uint8 TURN_LIGHT_RIGHT = 1
uint8 TURN_LIGHT_BOTH = 2
uint8 TURN_LIGHT_INVALID = 3

uint8 LIGHT_CLOSE = 0
uint8 LIGHT_NEAR = 1
uint8 LIGHT_FAR = 2
uint8 LIGHT_INVALID = 3

uint8 WIPER_CLOSE = 0
uint8 WIPER_RUN = 1
uint8 WIPER_RESERVE = 2
uint8 WIPER_INVALID = 3

uint8 DOOR_NO_CONTROL = 0
uint8 DOOR_NORMAL_OPEN = 1
uint8 DOOR_EMERGENCY_OPEN = 2
uint8 DOOR_RESERVE = 3

uint8 HORN_NO_CONTROL = 0
uint8 HORN_OPEN = 1

Header header

uint8 steering_mode
float64 steering_angle     # -1.0 ~ 1.0, positive number on the right side
float64 steering_speed     # 0.0 ~ 1.0

uint8 throttle_mode
float64 throttle           # 0.0 ~ 1.0
uint8 brake_mode
float64 brake              # 0.0 ~ 1.0

float64 acceleration_request   # m/s2
uint8 acceleration_mode

pncc_msgs/Gear gear
uint8 gear_mode

uint8 turn_light_mode
uint8 turn_light            #0:left  1:right  2:both  3:invalid

uint8 light_mode
uint8 light                 #front light    0:close  1:near light   2:far light  3:invalid

uint8 wiper_mode
uint8 wiper                 #0:wiper close  1:run wiper  2:reserve  3:invalid

uint8 door_mode
uint8 door                  #0:no control  1:normal open  2:emergency open  3:reserve

uint8 horn_mode
uint8 horn               #0:no control  1:open

uint8 auto_driver_cmd
uint8 e_stop_cmd



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: pncc_msgs/Gear
uint8 GEAR_P = 0
uint8 GEAR_R = 1
uint8 GEAR_N = 2
uint8 GEAR_D = 3
uint8 GEAR_1 = 4
uint8 GEAR_2 = 5
uint8 GEAR_3 = 6
uint8 GEAR_4 = 7
uint8 GEAR_5 = 8
uint8 GEAR_6 = 9
uint8 GEAR_7 = 10
uint8 GEAR_8 = 11
uint8 GEAR_9 = 12
uint8 GEAR_10 = 13
uint8 GEAR_11 = 14
uint8 GEAR_12 = 15


uint8 value
"""
  # Pseudo-constants
  MODE_MANUAL = 100
  MODE_AUTO = 101
  OFF = 150
  ON = 151
  TURN_LIGHT_LEFT = 0
  TURN_LIGHT_RIGHT = 1
  TURN_LIGHT_BOTH = 2
  TURN_LIGHT_INVALID = 3
  LIGHT_CLOSE = 0
  LIGHT_NEAR = 1
  LIGHT_FAR = 2
  LIGHT_INVALID = 3
  WIPER_CLOSE = 0
  WIPER_RUN = 1
  WIPER_RESERVE = 2
  WIPER_INVALID = 3
  DOOR_NO_CONTROL = 0
  DOOR_NORMAL_OPEN = 1
  DOOR_EMERGENCY_OPEN = 2
  DOOR_RESERVE = 3
  HORN_NO_CONTROL = 0
  HORN_OPEN = 1

  __slots__ = ['header','steering_mode','steering_angle','steering_speed','throttle_mode','throttle','brake_mode','brake','acceleration_request','acceleration_mode','gear','gear_mode','turn_light_mode','turn_light','light_mode','light','wiper_mode','wiper','door_mode','door','horn_mode','horn','auto_driver_cmd','e_stop_cmd']
  _slot_types = ['std_msgs/Header','uint8','float64','float64','uint8','float64','uint8','float64','float64','uint8','pncc_msgs/Gear','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,steering_mode,steering_angle,steering_speed,throttle_mode,throttle,brake_mode,brake,acceleration_request,acceleration_mode,gear,gear_mode,turn_light_mode,turn_light,light_mode,light,wiper_mode,wiper,door_mode,door,horn_mode,horn,auto_driver_cmd,e_stop_cmd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehicleCmd, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.steering_mode is None:
        self.steering_mode = 0
      if self.steering_angle is None:
        self.steering_angle = 0.
      if self.steering_speed is None:
        self.steering_speed = 0.
      if self.throttle_mode is None:
        self.throttle_mode = 0
      if self.throttle is None:
        self.throttle = 0.
      if self.brake_mode is None:
        self.brake_mode = 0
      if self.brake is None:
        self.brake = 0.
      if self.acceleration_request is None:
        self.acceleration_request = 0.
      if self.acceleration_mode is None:
        self.acceleration_mode = 0
      if self.gear is None:
        self.gear = pncc_msgs.msg.Gear()
      if self.gear_mode is None:
        self.gear_mode = 0
      if self.turn_light_mode is None:
        self.turn_light_mode = 0
      if self.turn_light is None:
        self.turn_light = 0
      if self.light_mode is None:
        self.light_mode = 0
      if self.light is None:
        self.light = 0
      if self.wiper_mode is None:
        self.wiper_mode = 0
      if self.wiper is None:
        self.wiper = 0
      if self.door_mode is None:
        self.door_mode = 0
      if self.door is None:
        self.door = 0
      if self.horn_mode is None:
        self.horn_mode = 0
      if self.horn is None:
        self.horn = 0
      if self.auto_driver_cmd is None:
        self.auto_driver_cmd = 0
      if self.e_stop_cmd is None:
        self.e_stop_cmd = 0
    else:
      self.header = std_msgs.msg.Header()
      self.steering_mode = 0
      self.steering_angle = 0.
      self.steering_speed = 0.
      self.throttle_mode = 0
      self.throttle = 0.
      self.brake_mode = 0
      self.brake = 0.
      self.acceleration_request = 0.
      self.acceleration_mode = 0
      self.gear = pncc_msgs.msg.Gear()
      self.gear_mode = 0
      self.turn_light_mode = 0
      self.turn_light = 0
      self.light_mode = 0
      self.light = 0
      self.wiper_mode = 0
      self.wiper = 0
      self.door_mode = 0
      self.door = 0
      self.horn_mode = 0
      self.horn = 0
      self.auto_driver_cmd = 0
      self.e_stop_cmd = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B2dBdB2d15B().pack(_x.steering_mode, _x.steering_angle, _x.steering_speed, _x.throttle_mode, _x.throttle, _x.brake_mode, _x.brake, _x.acceleration_request, _x.acceleration_mode, _x.gear.value, _x.gear_mode, _x.turn_light_mode, _x.turn_light, _x.light_mode, _x.light, _x.wiper_mode, _x.wiper, _x.door_mode, _x.door, _x.horn_mode, _x.horn, _x.auto_driver_cmd, _x.e_stop_cmd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.gear is None:
        self.gear = pncc_msgs.msg.Gear()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 58
      (_x.steering_mode, _x.steering_angle, _x.steering_speed, _x.throttle_mode, _x.throttle, _x.brake_mode, _x.brake, _x.acceleration_request, _x.acceleration_mode, _x.gear.value, _x.gear_mode, _x.turn_light_mode, _x.turn_light, _x.light_mode, _x.light, _x.wiper_mode, _x.wiper, _x.door_mode, _x.door, _x.horn_mode, _x.horn, _x.auto_driver_cmd, _x.e_stop_cmd,) = _get_struct_B2dBdB2d15B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B2dBdB2d15B().pack(_x.steering_mode, _x.steering_angle, _x.steering_speed, _x.throttle_mode, _x.throttle, _x.brake_mode, _x.brake, _x.acceleration_request, _x.acceleration_mode, _x.gear.value, _x.gear_mode, _x.turn_light_mode, _x.turn_light, _x.light_mode, _x.light, _x.wiper_mode, _x.wiper, _x.door_mode, _x.door, _x.horn_mode, _x.horn, _x.auto_driver_cmd, _x.e_stop_cmd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.gear is None:
        self.gear = pncc_msgs.msg.Gear()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 58
      (_x.steering_mode, _x.steering_angle, _x.steering_speed, _x.throttle_mode, _x.throttle, _x.brake_mode, _x.brake, _x.acceleration_request, _x.acceleration_mode, _x.gear.value, _x.gear_mode, _x.turn_light_mode, _x.turn_light, _x.light_mode, _x.light, _x.wiper_mode, _x.wiper, _x.door_mode, _x.door, _x.horn_mode, _x.horn, _x.auto_driver_cmd, _x.e_stop_cmd,) = _get_struct_B2dBdB2d15B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B2dBdB2d15B = None
def _get_struct_B2dBdB2d15B():
    global _struct_B2dBdB2d15B
    if _struct_B2dBdB2d15B is None:
        _struct_B2dBdB2d15B = struct.Struct("<B2dBdB2d15B")
    return _struct_B2dBdB2d15B
