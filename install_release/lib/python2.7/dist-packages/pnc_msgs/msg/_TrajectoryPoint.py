# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pnc_msgs/TrajectoryPoint.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import pnc_msgs.msg

class TrajectoryPoint(genpy.Message):
  _md5sum = "4a43a3290619888e9cb73555dd15375b"
  _type = "pnc_msgs/TrajectoryPoint"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# path data
PathPoint path_point

# linear velocity in [m/s]
float64 v
# linear acceleration in [m/s^2]
float64 a
# relative time from beginning of the trajectory in [s]
float64 relative_time
================================================================================
MSG: pnc_msgs/PathPoint
# coordinates in [m]
float64 x
float64 y
float64 z

# accumulated distance from beginning of the path in [m]
float64 s

# direction on the x-y plane in [0 ~ 2Ï€]
float64 theta

# curvature on the x-y planning
float64 kappa

# derivative of kappa w.r.t s.
float64 dkappa

# derivative of derivative of kappa w.r.t s.
float64 ddkappa"""
  __slots__ = ['path_point','v','a','relative_time']
  _slot_types = ['pnc_msgs/PathPoint','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       path_point,v,a,relative_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrajectoryPoint, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.path_point is None:
        self.path_point = pnc_msgs.msg.PathPoint()
      if self.v is None:
        self.v = 0.
      if self.a is None:
        self.a = 0.
      if self.relative_time is None:
        self.relative_time = 0.
    else:
      self.path_point = pnc_msgs.msg.PathPoint()
      self.v = 0.
      self.a = 0.
      self.relative_time = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_11d().pack(_x.path_point.x, _x.path_point.y, _x.path_point.z, _x.path_point.s, _x.path_point.theta, _x.path_point.kappa, _x.path_point.dkappa, _x.path_point.ddkappa, _x.v, _x.a, _x.relative_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.path_point is None:
        self.path_point = pnc_msgs.msg.PathPoint()
      end = 0
      _x = self
      start = end
      end += 88
      (_x.path_point.x, _x.path_point.y, _x.path_point.z, _x.path_point.s, _x.path_point.theta, _x.path_point.kappa, _x.path_point.dkappa, _x.path_point.ddkappa, _x.v, _x.a, _x.relative_time,) = _get_struct_11d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_11d().pack(_x.path_point.x, _x.path_point.y, _x.path_point.z, _x.path_point.s, _x.path_point.theta, _x.path_point.kappa, _x.path_point.dkappa, _x.path_point.ddkappa, _x.v, _x.a, _x.relative_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.path_point is None:
        self.path_point = pnc_msgs.msg.PathPoint()
      end = 0
      _x = self
      start = end
      end += 88
      (_x.path_point.x, _x.path_point.y, _x.path_point.z, _x.path_point.s, _x.path_point.theta, _x.path_point.kappa, _x.path_point.dkappa, _x.path_point.ddkappa, _x.v, _x.a, _x.relative_time,) = _get_struct_11d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11d = None
def _get_struct_11d():
    global _struct_11d
    if _struct_11d is None:
        _struct_11d = struct.Struct("<11d")
    return _struct_11d
