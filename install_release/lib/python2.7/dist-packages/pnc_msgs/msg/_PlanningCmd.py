# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pnc_msgs/PlanningCmd.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import pnc_msgs.msg
import std_msgs.msg

class PlanningCmd(genpy.Message):
  _md5sum = "c524a0bbbcc9e84caf1b33d77fd89eaf"
  _type = "pnc_msgs/PlanningCmd"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# control mode
uint8 MODE_AUTO                 = 0
uint8 MODE_LATERAL_CLOSED_LOOP  = 1
uint8 MODE_SPEED_CLOSED_LOOP    = 2
uint8 MODE_OPEN_LOOP            = 3

# lateral state
uint8 LATERAL_KEEP_LANE         = 0
uint8 LATERAL_CHG_TO_LEFT       = 1
uint8 LATERAL_CHG_TO_RIGHT      = 2

# longtude state
uint8 SPEED_PARK   = 0
uint8 SPEED_FOLLOW = 1
uint8 SPEED_ESTOP  = 2
uint8 SPEED_BRAKE  = 3

# turn light direction
uint8 DIR_STRAIGHT              = 0
uint8 DIR_TURN_LEFT             = 1
uint8 DIR_TURN_RIGHT            = 2

Header header

# control mode
uint8               mode

# trajectory in utm coord
pnc_msgs/Trajectory utm_traj

# trajectory in vehicle coord
pnc_msgs/Trajectory veh_traj

# real time speed in [km/h]
float64             rt_speed

# target follow speed in [km/h]
float64             final_speed

# target follow distance in [m]
float64             final_distance

# lateral state
uint8               lateral_state

# speed state
uint8               speed_state

# if vehicle stop at dest
bool                stop_at_dest

# turn light direction when change lane or turn
uint8               turn_direction

int32 task_id

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: pnc_msgs/Trajectory
# total traj length in [m]
float64 total_traj_length

# total traj time in [s]
float64 total_traj_time

pnc_msgs/TrajectoryPoint[] trajectory_pts
================================================================================
MSG: pnc_msgs/TrajectoryPoint
# path data
PathPoint path_point

# linear velocity in [m/s]
float64 v
# linear acceleration in [m/s^2]
float64 a
# relative time from beginning of the trajectory in [s]
float64 relative_time
================================================================================
MSG: pnc_msgs/PathPoint
# coordinates in [m]
float64 x
float64 y
float64 z

# accumulated distance from beginning of the path in [m]
float64 s

# direction on the x-y plane in [0 ~ 2Ï€]
float64 theta

# curvature on the x-y planning
float64 kappa

# derivative of kappa w.r.t s.
float64 dkappa

# derivative of derivative of kappa w.r.t s.
float64 ddkappa"""
  # Pseudo-constants
  MODE_AUTO = 0
  MODE_LATERAL_CLOSED_LOOP = 1
  MODE_SPEED_CLOSED_LOOP = 2
  MODE_OPEN_LOOP = 3
  LATERAL_KEEP_LANE = 0
  LATERAL_CHG_TO_LEFT = 1
  LATERAL_CHG_TO_RIGHT = 2
  SPEED_PARK = 0
  SPEED_FOLLOW = 1
  SPEED_ESTOP = 2
  SPEED_BRAKE = 3
  DIR_STRAIGHT = 0
  DIR_TURN_LEFT = 1
  DIR_TURN_RIGHT = 2

  __slots__ = ['header','mode','utm_traj','veh_traj','rt_speed','final_speed','final_distance','lateral_state','speed_state','stop_at_dest','turn_direction','task_id']
  _slot_types = ['std_msgs/Header','uint8','pnc_msgs/Trajectory','pnc_msgs/Trajectory','float64','float64','float64','uint8','uint8','bool','uint8','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,mode,utm_traj,veh_traj,rt_speed,final_speed,final_distance,lateral_state,speed_state,stop_at_dest,turn_direction,task_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanningCmd, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.mode is None:
        self.mode = 0
      if self.utm_traj is None:
        self.utm_traj = pnc_msgs.msg.Trajectory()
      if self.veh_traj is None:
        self.veh_traj = pnc_msgs.msg.Trajectory()
      if self.rt_speed is None:
        self.rt_speed = 0.
      if self.final_speed is None:
        self.final_speed = 0.
      if self.final_distance is None:
        self.final_distance = 0.
      if self.lateral_state is None:
        self.lateral_state = 0
      if self.speed_state is None:
        self.speed_state = 0
      if self.stop_at_dest is None:
        self.stop_at_dest = False
      if self.turn_direction is None:
        self.turn_direction = 0
      if self.task_id is None:
        self.task_id = 0
    else:
      self.header = std_msgs.msg.Header()
      self.mode = 0
      self.utm_traj = pnc_msgs.msg.Trajectory()
      self.veh_traj = pnc_msgs.msg.Trajectory()
      self.rt_speed = 0.
      self.final_speed = 0.
      self.final_distance = 0.
      self.lateral_state = 0
      self.speed_state = 0
      self.stop_at_dest = False
      self.turn_direction = 0
      self.task_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B2d().pack(_x.mode, _x.utm_traj.total_traj_length, _x.utm_traj.total_traj_time))
      length = len(self.utm_traj.trajectory_pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.utm_traj.trajectory_pts:
        _v1 = val1.path_point
        _x = _v1
        buff.write(_get_struct_8d().pack(_x.x, _x.y, _x.z, _x.s, _x.theta, _x.kappa, _x.dkappa, _x.ddkappa))
        _x = val1
        buff.write(_get_struct_3d().pack(_x.v, _x.a, _x.relative_time))
      _x = self
      buff.write(_get_struct_2d().pack(_x.veh_traj.total_traj_length, _x.veh_traj.total_traj_time))
      length = len(self.veh_traj.trajectory_pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.veh_traj.trajectory_pts:
        _v2 = val1.path_point
        _x = _v2
        buff.write(_get_struct_8d().pack(_x.x, _x.y, _x.z, _x.s, _x.theta, _x.kappa, _x.dkappa, _x.ddkappa))
        _x = val1
        buff.write(_get_struct_3d().pack(_x.v, _x.a, _x.relative_time))
      _x = self
      buff.write(_get_struct_3d4Bi().pack(_x.rt_speed, _x.final_speed, _x.final_distance, _x.lateral_state, _x.speed_state, _x.stop_at_dest, _x.turn_direction, _x.task_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.utm_traj is None:
        self.utm_traj = pnc_msgs.msg.Trajectory()
      if self.veh_traj is None:
        self.veh_traj = pnc_msgs.msg.Trajectory()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.mode, _x.utm_traj.total_traj_length, _x.utm_traj.total_traj_time,) = _get_struct_B2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.utm_traj.trajectory_pts = []
      for i in range(0, length):
        val1 = pnc_msgs.msg.TrajectoryPoint()
        _v3 = val1.path_point
        _x = _v3
        start = end
        end += 64
        (_x.x, _x.y, _x.z, _x.s, _x.theta, _x.kappa, _x.dkappa, _x.ddkappa,) = _get_struct_8d().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.v, _x.a, _x.relative_time,) = _get_struct_3d().unpack(str[start:end])
        self.utm_traj.trajectory_pts.append(val1)
      _x = self
      start = end
      end += 16
      (_x.veh_traj.total_traj_length, _x.veh_traj.total_traj_time,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.veh_traj.trajectory_pts = []
      for i in range(0, length):
        val1 = pnc_msgs.msg.TrajectoryPoint()
        _v4 = val1.path_point
        _x = _v4
        start = end
        end += 64
        (_x.x, _x.y, _x.z, _x.s, _x.theta, _x.kappa, _x.dkappa, _x.ddkappa,) = _get_struct_8d().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.v, _x.a, _x.relative_time,) = _get_struct_3d().unpack(str[start:end])
        self.veh_traj.trajectory_pts.append(val1)
      _x = self
      start = end
      end += 32
      (_x.rt_speed, _x.final_speed, _x.final_distance, _x.lateral_state, _x.speed_state, _x.stop_at_dest, _x.turn_direction, _x.task_id,) = _get_struct_3d4Bi().unpack(str[start:end])
      self.stop_at_dest = bool(self.stop_at_dest)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B2d().pack(_x.mode, _x.utm_traj.total_traj_length, _x.utm_traj.total_traj_time))
      length = len(self.utm_traj.trajectory_pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.utm_traj.trajectory_pts:
        _v5 = val1.path_point
        _x = _v5
        buff.write(_get_struct_8d().pack(_x.x, _x.y, _x.z, _x.s, _x.theta, _x.kappa, _x.dkappa, _x.ddkappa))
        _x = val1
        buff.write(_get_struct_3d().pack(_x.v, _x.a, _x.relative_time))
      _x = self
      buff.write(_get_struct_2d().pack(_x.veh_traj.total_traj_length, _x.veh_traj.total_traj_time))
      length = len(self.veh_traj.trajectory_pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.veh_traj.trajectory_pts:
        _v6 = val1.path_point
        _x = _v6
        buff.write(_get_struct_8d().pack(_x.x, _x.y, _x.z, _x.s, _x.theta, _x.kappa, _x.dkappa, _x.ddkappa))
        _x = val1
        buff.write(_get_struct_3d().pack(_x.v, _x.a, _x.relative_time))
      _x = self
      buff.write(_get_struct_3d4Bi().pack(_x.rt_speed, _x.final_speed, _x.final_distance, _x.lateral_state, _x.speed_state, _x.stop_at_dest, _x.turn_direction, _x.task_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.utm_traj is None:
        self.utm_traj = pnc_msgs.msg.Trajectory()
      if self.veh_traj is None:
        self.veh_traj = pnc_msgs.msg.Trajectory()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.mode, _x.utm_traj.total_traj_length, _x.utm_traj.total_traj_time,) = _get_struct_B2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.utm_traj.trajectory_pts = []
      for i in range(0, length):
        val1 = pnc_msgs.msg.TrajectoryPoint()
        _v7 = val1.path_point
        _x = _v7
        start = end
        end += 64
        (_x.x, _x.y, _x.z, _x.s, _x.theta, _x.kappa, _x.dkappa, _x.ddkappa,) = _get_struct_8d().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.v, _x.a, _x.relative_time,) = _get_struct_3d().unpack(str[start:end])
        self.utm_traj.trajectory_pts.append(val1)
      _x = self
      start = end
      end += 16
      (_x.veh_traj.total_traj_length, _x.veh_traj.total_traj_time,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.veh_traj.trajectory_pts = []
      for i in range(0, length):
        val1 = pnc_msgs.msg.TrajectoryPoint()
        _v8 = val1.path_point
        _x = _v8
        start = end
        end += 64
        (_x.x, _x.y, _x.z, _x.s, _x.theta, _x.kappa, _x.dkappa, _x.ddkappa,) = _get_struct_8d().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.v, _x.a, _x.relative_time,) = _get_struct_3d().unpack(str[start:end])
        self.veh_traj.trajectory_pts.append(val1)
      _x = self
      start = end
      end += 32
      (_x.rt_speed, _x.final_speed, _x.final_distance, _x.lateral_state, _x.speed_state, _x.stop_at_dest, _x.turn_direction, _x.task_id,) = _get_struct_3d4Bi().unpack(str[start:end])
      self.stop_at_dest = bool(self.stop_at_dest)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d4Bi = None
def _get_struct_3d4Bi():
    global _struct_3d4Bi
    if _struct_3d4Bi is None:
        _struct_3d4Bi = struct.Struct("<3d4Bi")
    return _struct_3d4Bi
_struct_8d = None
def _get_struct_8d():
    global _struct_8d
    if _struct_8d is None:
        _struct_8d = struct.Struct("<8d")
    return _struct_8d
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B2d = None
def _get_struct_B2d():
    global _struct_B2d
    if _struct_B2d is None:
        _struct_B2d = struct.Struct("<B2d")
    return _struct_B2d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
