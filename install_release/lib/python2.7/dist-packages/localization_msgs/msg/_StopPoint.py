# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from localization_msgs/StopPoint.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class StopPoint(genpy.Message):
  _md5sum = "857da375e16b789899f14886149cb405"
  _type = "localization_msgs/StopPoint"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# main key
int32 id

# distance, [0, unlimit]
float64 distance_shift


float64 angle # rad
float64 distance_vertical



uint8 TYPE_CRANE = 0
uint8 TYPE_YARD = 1
uint8 TYPE_OTHER = 2

# type
uint8 type

# decelerate flag
bool decelerate # true


"""
  # Pseudo-constants
  TYPE_CRANE = 0
  TYPE_YARD = 1
  TYPE_OTHER = 2

  __slots__ = ['id','distance_shift','angle','distance_vertical','type','decelerate']
  _slot_types = ['int32','float64','float64','float64','uint8','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,distance_shift,angle,distance_vertical,type,decelerate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StopPoint, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.distance_shift is None:
        self.distance_shift = 0.
      if self.angle is None:
        self.angle = 0.
      if self.distance_vertical is None:
        self.distance_vertical = 0.
      if self.type is None:
        self.type = 0
      if self.decelerate is None:
        self.decelerate = False
    else:
      self.id = 0
      self.distance_shift = 0.
      self.angle = 0.
      self.distance_vertical = 0.
      self.type = 0
      self.decelerate = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i3d2B().pack(_x.id, _x.distance_shift, _x.angle, _x.distance_vertical, _x.type, _x.decelerate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 30
      (_x.id, _x.distance_shift, _x.angle, _x.distance_vertical, _x.type, _x.decelerate,) = _get_struct_i3d2B().unpack(str[start:end])
      self.decelerate = bool(self.decelerate)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i3d2B().pack(_x.id, _x.distance_shift, _x.angle, _x.distance_vertical, _x.type, _x.decelerate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 30
      (_x.id, _x.distance_shift, _x.angle, _x.distance_vertical, _x.type, _x.decelerate,) = _get_struct_i3d2B().unpack(str[start:end])
      self.decelerate = bool(self.decelerate)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i3d2B = None
def _get_struct_i3d2B():
    global _struct_i3d2B
    if _struct_i3d2B is None:
        _struct_i3d2B = struct.Struct("<i3d2B")
    return _struct_i3d2B
