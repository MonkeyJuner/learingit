# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from perception_msgs/Object.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Object(genpy.Message):
  _md5sum = "683135dacc3cb368d96ceddae6f34be6"
  _type = "perception_msgs/Object"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 id
int32 age
int32 prediction_age

geometry_msgs/Point reference_point
geometry_msgs/Point[] reference_points
geometry_msgs/Point bounding_box_center
geometry_msgs/Point bounding_box_size
geometry_msgs/Point object_box_center
geometry_msgs/Point object_box_size

float64 object_box_orientation
float64 object_box_orientation_absolute

geometry_msgs/Point absolute_velocity
geometry_msgs/Point absolute_velocity_sigma
geometry_msgs/Point relative_velocity

geometry_msgs/Point absolute_acceleration
geometry_msgs/Point relative_acceleration

geometry_msgs/Point absolute_yaw_rate
geometry_msgs/Point relative_yaw_rate

int32 classification
int32 classification_age
int32 classification_certainty

geometry_msgs/Point[] contour_points
geometry_msgs/Point[] contour_points_absolute



================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['id','age','prediction_age','reference_point','reference_points','bounding_box_center','bounding_box_size','object_box_center','object_box_size','object_box_orientation','object_box_orientation_absolute','absolute_velocity','absolute_velocity_sigma','relative_velocity','absolute_acceleration','relative_acceleration','absolute_yaw_rate','relative_yaw_rate','classification','classification_age','classification_certainty','contour_points','contour_points_absolute']
  _slot_types = ['int32','int32','int32','geometry_msgs/Point','geometry_msgs/Point[]','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','float64','float64','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','int32','int32','int32','geometry_msgs/Point[]','geometry_msgs/Point[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,age,prediction_age,reference_point,reference_points,bounding_box_center,bounding_box_size,object_box_center,object_box_size,object_box_orientation,object_box_orientation_absolute,absolute_velocity,absolute_velocity_sigma,relative_velocity,absolute_acceleration,relative_acceleration,absolute_yaw_rate,relative_yaw_rate,classification,classification_age,classification_certainty,contour_points,contour_points_absolute

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Object, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.age is None:
        self.age = 0
      if self.prediction_age is None:
        self.prediction_age = 0
      if self.reference_point is None:
        self.reference_point = geometry_msgs.msg.Point()
      if self.reference_points is None:
        self.reference_points = []
      if self.bounding_box_center is None:
        self.bounding_box_center = geometry_msgs.msg.Point()
      if self.bounding_box_size is None:
        self.bounding_box_size = geometry_msgs.msg.Point()
      if self.object_box_center is None:
        self.object_box_center = geometry_msgs.msg.Point()
      if self.object_box_size is None:
        self.object_box_size = geometry_msgs.msg.Point()
      if self.object_box_orientation is None:
        self.object_box_orientation = 0.
      if self.object_box_orientation_absolute is None:
        self.object_box_orientation_absolute = 0.
      if self.absolute_velocity is None:
        self.absolute_velocity = geometry_msgs.msg.Point()
      if self.absolute_velocity_sigma is None:
        self.absolute_velocity_sigma = geometry_msgs.msg.Point()
      if self.relative_velocity is None:
        self.relative_velocity = geometry_msgs.msg.Point()
      if self.absolute_acceleration is None:
        self.absolute_acceleration = geometry_msgs.msg.Point()
      if self.relative_acceleration is None:
        self.relative_acceleration = geometry_msgs.msg.Point()
      if self.absolute_yaw_rate is None:
        self.absolute_yaw_rate = geometry_msgs.msg.Point()
      if self.relative_yaw_rate is None:
        self.relative_yaw_rate = geometry_msgs.msg.Point()
      if self.classification is None:
        self.classification = 0
      if self.classification_age is None:
        self.classification_age = 0
      if self.classification_certainty is None:
        self.classification_certainty = 0
      if self.contour_points is None:
        self.contour_points = []
      if self.contour_points_absolute is None:
        self.contour_points_absolute = []
    else:
      self.id = 0
      self.age = 0
      self.prediction_age = 0
      self.reference_point = geometry_msgs.msg.Point()
      self.reference_points = []
      self.bounding_box_center = geometry_msgs.msg.Point()
      self.bounding_box_size = geometry_msgs.msg.Point()
      self.object_box_center = geometry_msgs.msg.Point()
      self.object_box_size = geometry_msgs.msg.Point()
      self.object_box_orientation = 0.
      self.object_box_orientation_absolute = 0.
      self.absolute_velocity = geometry_msgs.msg.Point()
      self.absolute_velocity_sigma = geometry_msgs.msg.Point()
      self.relative_velocity = geometry_msgs.msg.Point()
      self.absolute_acceleration = geometry_msgs.msg.Point()
      self.relative_acceleration = geometry_msgs.msg.Point()
      self.absolute_yaw_rate = geometry_msgs.msg.Point()
      self.relative_yaw_rate = geometry_msgs.msg.Point()
      self.classification = 0
      self.classification_age = 0
      self.classification_certainty = 0
      self.contour_points = []
      self.contour_points_absolute = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3i3d().pack(_x.id, _x.age, _x.prediction_age, _x.reference_point.x, _x.reference_point.y, _x.reference_point.z))
      length = len(self.reference_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.reference_points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_35d3i().pack(_x.bounding_box_center.x, _x.bounding_box_center.y, _x.bounding_box_center.z, _x.bounding_box_size.x, _x.bounding_box_size.y, _x.bounding_box_size.z, _x.object_box_center.x, _x.object_box_center.y, _x.object_box_center.z, _x.object_box_size.x, _x.object_box_size.y, _x.object_box_size.z, _x.object_box_orientation, _x.object_box_orientation_absolute, _x.absolute_velocity.x, _x.absolute_velocity.y, _x.absolute_velocity.z, _x.absolute_velocity_sigma.x, _x.absolute_velocity_sigma.y, _x.absolute_velocity_sigma.z, _x.relative_velocity.x, _x.relative_velocity.y, _x.relative_velocity.z, _x.absolute_acceleration.x, _x.absolute_acceleration.y, _x.absolute_acceleration.z, _x.relative_acceleration.x, _x.relative_acceleration.y, _x.relative_acceleration.z, _x.absolute_yaw_rate.x, _x.absolute_yaw_rate.y, _x.absolute_yaw_rate.z, _x.relative_yaw_rate.x, _x.relative_yaw_rate.y, _x.relative_yaw_rate.z, _x.classification, _x.classification_age, _x.classification_certainty))
      length = len(self.contour_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.contour_points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.contour_points_absolute)
      buff.write(_struct_I.pack(length))
      for val1 in self.contour_points_absolute:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.reference_point is None:
        self.reference_point = geometry_msgs.msg.Point()
      if self.reference_points is None:
        self.reference_points = None
      if self.bounding_box_center is None:
        self.bounding_box_center = geometry_msgs.msg.Point()
      if self.bounding_box_size is None:
        self.bounding_box_size = geometry_msgs.msg.Point()
      if self.object_box_center is None:
        self.object_box_center = geometry_msgs.msg.Point()
      if self.object_box_size is None:
        self.object_box_size = geometry_msgs.msg.Point()
      if self.absolute_velocity is None:
        self.absolute_velocity = geometry_msgs.msg.Point()
      if self.absolute_velocity_sigma is None:
        self.absolute_velocity_sigma = geometry_msgs.msg.Point()
      if self.relative_velocity is None:
        self.relative_velocity = geometry_msgs.msg.Point()
      if self.absolute_acceleration is None:
        self.absolute_acceleration = geometry_msgs.msg.Point()
      if self.relative_acceleration is None:
        self.relative_acceleration = geometry_msgs.msg.Point()
      if self.absolute_yaw_rate is None:
        self.absolute_yaw_rate = geometry_msgs.msg.Point()
      if self.relative_yaw_rate is None:
        self.relative_yaw_rate = geometry_msgs.msg.Point()
      if self.contour_points is None:
        self.contour_points = None
      if self.contour_points_absolute is None:
        self.contour_points_absolute = None
      end = 0
      _x = self
      start = end
      end += 36
      (_x.id, _x.age, _x.prediction_age, _x.reference_point.x, _x.reference_point.y, _x.reference_point.z,) = _get_struct_3i3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.reference_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.reference_points.append(val1)
      _x = self
      start = end
      end += 292
      (_x.bounding_box_center.x, _x.bounding_box_center.y, _x.bounding_box_center.z, _x.bounding_box_size.x, _x.bounding_box_size.y, _x.bounding_box_size.z, _x.object_box_center.x, _x.object_box_center.y, _x.object_box_center.z, _x.object_box_size.x, _x.object_box_size.y, _x.object_box_size.z, _x.object_box_orientation, _x.object_box_orientation_absolute, _x.absolute_velocity.x, _x.absolute_velocity.y, _x.absolute_velocity.z, _x.absolute_velocity_sigma.x, _x.absolute_velocity_sigma.y, _x.absolute_velocity_sigma.z, _x.relative_velocity.x, _x.relative_velocity.y, _x.relative_velocity.z, _x.absolute_acceleration.x, _x.absolute_acceleration.y, _x.absolute_acceleration.z, _x.relative_acceleration.x, _x.relative_acceleration.y, _x.relative_acceleration.z, _x.absolute_yaw_rate.x, _x.absolute_yaw_rate.y, _x.absolute_yaw_rate.z, _x.relative_yaw_rate.x, _x.relative_yaw_rate.y, _x.relative_yaw_rate.z, _x.classification, _x.classification_age, _x.classification_certainty,) = _get_struct_35d3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contour_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.contour_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contour_points_absolute = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.contour_points_absolute.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3i3d().pack(_x.id, _x.age, _x.prediction_age, _x.reference_point.x, _x.reference_point.y, _x.reference_point.z))
      length = len(self.reference_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.reference_points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_35d3i().pack(_x.bounding_box_center.x, _x.bounding_box_center.y, _x.bounding_box_center.z, _x.bounding_box_size.x, _x.bounding_box_size.y, _x.bounding_box_size.z, _x.object_box_center.x, _x.object_box_center.y, _x.object_box_center.z, _x.object_box_size.x, _x.object_box_size.y, _x.object_box_size.z, _x.object_box_orientation, _x.object_box_orientation_absolute, _x.absolute_velocity.x, _x.absolute_velocity.y, _x.absolute_velocity.z, _x.absolute_velocity_sigma.x, _x.absolute_velocity_sigma.y, _x.absolute_velocity_sigma.z, _x.relative_velocity.x, _x.relative_velocity.y, _x.relative_velocity.z, _x.absolute_acceleration.x, _x.absolute_acceleration.y, _x.absolute_acceleration.z, _x.relative_acceleration.x, _x.relative_acceleration.y, _x.relative_acceleration.z, _x.absolute_yaw_rate.x, _x.absolute_yaw_rate.y, _x.absolute_yaw_rate.z, _x.relative_yaw_rate.x, _x.relative_yaw_rate.y, _x.relative_yaw_rate.z, _x.classification, _x.classification_age, _x.classification_certainty))
      length = len(self.contour_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.contour_points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.contour_points_absolute)
      buff.write(_struct_I.pack(length))
      for val1 in self.contour_points_absolute:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.reference_point is None:
        self.reference_point = geometry_msgs.msg.Point()
      if self.reference_points is None:
        self.reference_points = None
      if self.bounding_box_center is None:
        self.bounding_box_center = geometry_msgs.msg.Point()
      if self.bounding_box_size is None:
        self.bounding_box_size = geometry_msgs.msg.Point()
      if self.object_box_center is None:
        self.object_box_center = geometry_msgs.msg.Point()
      if self.object_box_size is None:
        self.object_box_size = geometry_msgs.msg.Point()
      if self.absolute_velocity is None:
        self.absolute_velocity = geometry_msgs.msg.Point()
      if self.absolute_velocity_sigma is None:
        self.absolute_velocity_sigma = geometry_msgs.msg.Point()
      if self.relative_velocity is None:
        self.relative_velocity = geometry_msgs.msg.Point()
      if self.absolute_acceleration is None:
        self.absolute_acceleration = geometry_msgs.msg.Point()
      if self.relative_acceleration is None:
        self.relative_acceleration = geometry_msgs.msg.Point()
      if self.absolute_yaw_rate is None:
        self.absolute_yaw_rate = geometry_msgs.msg.Point()
      if self.relative_yaw_rate is None:
        self.relative_yaw_rate = geometry_msgs.msg.Point()
      if self.contour_points is None:
        self.contour_points = None
      if self.contour_points_absolute is None:
        self.contour_points_absolute = None
      end = 0
      _x = self
      start = end
      end += 36
      (_x.id, _x.age, _x.prediction_age, _x.reference_point.x, _x.reference_point.y, _x.reference_point.z,) = _get_struct_3i3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.reference_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.reference_points.append(val1)
      _x = self
      start = end
      end += 292
      (_x.bounding_box_center.x, _x.bounding_box_center.y, _x.bounding_box_center.z, _x.bounding_box_size.x, _x.bounding_box_size.y, _x.bounding_box_size.z, _x.object_box_center.x, _x.object_box_center.y, _x.object_box_center.z, _x.object_box_size.x, _x.object_box_size.y, _x.object_box_size.z, _x.object_box_orientation, _x.object_box_orientation_absolute, _x.absolute_velocity.x, _x.absolute_velocity.y, _x.absolute_velocity.z, _x.absolute_velocity_sigma.x, _x.absolute_velocity_sigma.y, _x.absolute_velocity_sigma.z, _x.relative_velocity.x, _x.relative_velocity.y, _x.relative_velocity.z, _x.absolute_acceleration.x, _x.absolute_acceleration.y, _x.absolute_acceleration.z, _x.relative_acceleration.x, _x.relative_acceleration.y, _x.relative_acceleration.z, _x.absolute_yaw_rate.x, _x.absolute_yaw_rate.y, _x.absolute_yaw_rate.z, _x.relative_yaw_rate.x, _x.relative_yaw_rate.y, _x.relative_yaw_rate.z, _x.classification, _x.classification_age, _x.classification_certainty,) = _get_struct_35d3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contour_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.contour_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contour_points_absolute = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.contour_points_absolute.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3i3d = None
def _get_struct_3i3d():
    global _struct_3i3d
    if _struct_3i3d is None:
        _struct_3i3d = struct.Struct("<3i3d")
    return _struct_3i3d
_struct_35d3i = None
def _get_struct_35d3i():
    global _struct_35d3i
    if _struct_35d3i is None:
        _struct_35d3i = struct.Struct("<35d3i")
    return _struct_35d3i
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
