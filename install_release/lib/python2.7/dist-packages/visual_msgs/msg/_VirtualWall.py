# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from visual_msgs/VirtualWall.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VirtualWall(genpy.Message):
  _md5sum = "551524b8a92acd2689036d94355e750a"
  _type = "visual_msgs/VirtualWall"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 UNCLASSIFIED          = 0
uint8 STOP_SIGN_ABSOLUTE    = 1
uint8 STOP_SIGN_RELATIVE    = 2
uint8 OBJECT                = 3
uint8 OBJECT_VIRTUAL        = 4
uint8 OBJECT_CLOSE          = 5
uint8 OGM                   = 6
uint8 HMAP_SPEED_LIMIT      = 7
uint8 CURV_SPEED_LIMIT      = 8
uint8 LONGITUDE_CMD         = 9

uint8   type
uint32  id
float64 distance
float64 speed

float64 x           # Optional
float64 y           # Optional
float64 z           # Optional
float64 heading     # Optional


"""
  # Pseudo-constants
  UNCLASSIFIED = 0
  STOP_SIGN_ABSOLUTE = 1
  STOP_SIGN_RELATIVE = 2
  OBJECT = 3
  OBJECT_VIRTUAL = 4
  OBJECT_CLOSE = 5
  OGM = 6
  HMAP_SPEED_LIMIT = 7
  CURV_SPEED_LIMIT = 8
  LONGITUDE_CMD = 9

  __slots__ = ['type','id','distance','speed','x','y','z','heading']
  _slot_types = ['uint8','uint32','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,id,distance,speed,x,y,z,heading

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VirtualWall, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = 0
      if self.id is None:
        self.id = 0
      if self.distance is None:
        self.distance = 0.
      if self.speed is None:
        self.speed = 0.
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.heading is None:
        self.heading = 0.
    else:
      self.type = 0
      self.id = 0
      self.distance = 0.
      self.speed = 0.
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.heading = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BI6d().pack(_x.type, _x.id, _x.distance, _x.speed, _x.x, _x.y, _x.z, _x.heading))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 53
      (_x.type, _x.id, _x.distance, _x.speed, _x.x, _x.y, _x.z, _x.heading,) = _get_struct_BI6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BI6d().pack(_x.type, _x.id, _x.distance, _x.speed, _x.x, _x.y, _x.z, _x.heading))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 53
      (_x.type, _x.id, _x.distance, _x.speed, _x.x, _x.y, _x.z, _x.heading,) = _get_struct_BI6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BI6d = None
def _get_struct_BI6d():
    global _struct_BI6d
    if _struct_BI6d is None:
        _struct_BI6d = struct.Struct("<BI6d")
    return _struct_BI6d
