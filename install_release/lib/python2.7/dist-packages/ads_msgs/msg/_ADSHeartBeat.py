# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ads_msgs/ADSHeartBeat.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ads_msgs.msg
import std_msgs.msg

class ADSHeartBeat(genpy.Message):
  _md5sum = "4a20797a7f321095ed8bcf7768c64a33"
  _type = "ads_msgs/ADSHeartBeat"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
# 车体状态
ADSLockStatus lock_status
# 行驶状态
ADSDrivingStatus driving_status
# 命令状态
ADSCommandStatus command_status
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: ads_msgs/ADSLockStatus
# 状态-空闲
uint8 STATUS_LOCK = 0
# 状态-就绪
uint8 STATUS_UNLOCK = 1
# 状态-无效
uint8 STATUS_UNVALID = 2

# 车体状态
uint8 status

# 错误码
uint8[] err_codes
================================================================================
MSG: ads_msgs/ADSDrivingStatus
# 状态-等待目标
uint8 STATUS_WAIT_TARGET = 0
# 状态-等待启动
uint8 STATUS_WAIT_START = 1
# 状态-驶向终点
uint8 STATUS_TRAVEL = 2
# 状态-到达终点
uint8 STATUS_ARRIVED = 3
# 状态-错误
uint8 STATUS_ERROR = 4
# 状态-无效
uint8 STATUS_UNVALID = 5

# 错误-未处于自动驾驶状态
uint8 ERROR_AUTO_OFF = 0
# 错误-硬件锁定
uint8 ERROR_HARDWARE_LOCK = 1
# 错误-定位或底盘失效
uint8 ERROR_VEHICLE = 2
# 错误-地图
uint8 ERROR_MAP = 3
# 错误-雷达
uint8 ERROR_LADAR = 4
# 错误-长时间无法到达终点
uint8 ERROR_CANNOT_ARRIVE = 5

# 任务ID
uint32 task_id

# 行驶状态
uint8 status

# 错误码
uint8[] err_codes
================================================================================
MSG: ads_msgs/ADSCommandStatus
# 状态-执行中
uint8 STATUS_EXECUTING = 0
# 状态-已完毕
uint8 STATUS_DONE = 1
# 状态-错误
uint8 STATUS_ERROR = 2
# 状态-无效
uint8 STATUS_UNVALID = 3

# 错误-执行命令超时
uint8 ERROR_TIMEOUT = 1
# 错误-当不允许执行该命令
uint8 ERROR_REJECT = 2
# 错误-命令执行结果不符合预期
uint8 ERROR_FAIL = 3
# 错误-重复命令
uint8 ERROR_REPEAT = 4

# 命令唯一标识
uint32 id

# 命令状态
uint8 status

# 错误码
uint8[] err_codes"""
  __slots__ = ['header','lock_status','driving_status','command_status']
  _slot_types = ['std_msgs/Header','ads_msgs/ADSLockStatus','ads_msgs/ADSDrivingStatus','ads_msgs/ADSCommandStatus']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,lock_status,driving_status,command_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ADSHeartBeat, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lock_status is None:
        self.lock_status = ads_msgs.msg.ADSLockStatus()
      if self.driving_status is None:
        self.driving_status = ads_msgs.msg.ADSDrivingStatus()
      if self.command_status is None:
        self.command_status = ads_msgs.msg.ADSCommandStatus()
    else:
      self.header = std_msgs.msg.Header()
      self.lock_status = ads_msgs.msg.ADSLockStatus()
      self.driving_status = ads_msgs.msg.ADSDrivingStatus()
      self.command_status = ads_msgs.msg.ADSCommandStatus()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.lock_status.status))
      _x = self.lock_status.err_codes
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_IB().pack(_x.driving_status.task_id, _x.driving_status.status))
      _x = self.driving_status.err_codes
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_IB().pack(_x.command_status.id, _x.command_status.status))
      _x = self.command_status.err_codes
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lock_status is None:
        self.lock_status = ads_msgs.msg.ADSLockStatus()
      if self.driving_status is None:
        self.driving_status = ads_msgs.msg.ADSDrivingStatus()
      if self.command_status is None:
        self.command_status = ads_msgs.msg.ADSCommandStatus()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.lock_status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.lock_status.err_codes = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.driving_status.task_id, _x.driving_status.status,) = _get_struct_IB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.driving_status.err_codes = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.command_status.id, _x.command_status.status,) = _get_struct_IB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.command_status.err_codes = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.lock_status.status))
      _x = self.lock_status.err_codes
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_IB().pack(_x.driving_status.task_id, _x.driving_status.status))
      _x = self.driving_status.err_codes
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_IB().pack(_x.command_status.id, _x.command_status.status))
      _x = self.command_status.err_codes
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lock_status is None:
        self.lock_status = ads_msgs.msg.ADSLockStatus()
      if self.driving_status is None:
        self.driving_status = ads_msgs.msg.ADSDrivingStatus()
      if self.command_status is None:
        self.command_status = ads_msgs.msg.ADSCommandStatus()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.lock_status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.lock_status.err_codes = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.driving_status.task_id, _x.driving_status.status,) = _get_struct_IB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.driving_status.err_codes = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.command_status.id, _x.command_status.status,) = _get_struct_IB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.command_status.err_codes = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_IB = None
def _get_struct_IB():
    global _struct_IB
    if _struct_IB is None:
        _struct_IB = struct.Struct("<IB")
    return _struct_IB
