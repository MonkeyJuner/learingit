# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ads_msgs/ADSDrivingStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ADSDrivingStatus(genpy.Message):
  _md5sum = "d820d95d8e174cb96103f731f03f3fd9"
  _type = "ads_msgs/ADSDrivingStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# 状态-等待目标
uint8 STATUS_WAIT_TARGET = 0
# 状态-等待启动
uint8 STATUS_WAIT_START = 1
# 状态-驶向终点
uint8 STATUS_TRAVEL = 2
# 状态-到达终点
uint8 STATUS_ARRIVED = 3
# 状态-错误
uint8 STATUS_ERROR = 4
# 状态-无效
uint8 STATUS_UNVALID = 5

# 错误-未处于自动驾驶状态
uint8 ERROR_AUTO_OFF = 0
# 错误-硬件锁定
uint8 ERROR_HARDWARE_LOCK = 1
# 错误-定位或底盘失效
uint8 ERROR_VEHICLE = 2
# 错误-地图
uint8 ERROR_MAP = 3
# 错误-雷达
uint8 ERROR_LADAR = 4
# 错误-长时间无法到达终点
uint8 ERROR_CANNOT_ARRIVE = 5

# 任务ID
uint32 task_id

# 行驶状态
uint8 status

# 错误码
uint8[] err_codes"""
  # Pseudo-constants
  STATUS_WAIT_TARGET = 0
  STATUS_WAIT_START = 1
  STATUS_TRAVEL = 2
  STATUS_ARRIVED = 3
  STATUS_ERROR = 4
  STATUS_UNVALID = 5
  ERROR_AUTO_OFF = 0
  ERROR_HARDWARE_LOCK = 1
  ERROR_VEHICLE = 2
  ERROR_MAP = 3
  ERROR_LADAR = 4
  ERROR_CANNOT_ARRIVE = 5

  __slots__ = ['task_id','status','err_codes']
  _slot_types = ['uint32','uint8','uint8[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       task_id,status,err_codes

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ADSDrivingStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.task_id is None:
        self.task_id = 0
      if self.status is None:
        self.status = 0
      if self.err_codes is None:
        self.err_codes = b''
    else:
      self.task_id = 0
      self.status = 0
      self.err_codes = b''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_IB().pack(_x.task_id, _x.status))
      _x = self.err_codes
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.task_id, _x.status,) = _get_struct_IB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.err_codes = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_IB().pack(_x.task_id, _x.status))
      _x = self.err_codes
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.task_id, _x.status,) = _get_struct_IB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.err_codes = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_IB = None
def _get_struct_IB():
    global _struct_IB
    if _struct_IB is None:
        _struct_IB = struct.Struct("<IB")
    return _struct_IB
